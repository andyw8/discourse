# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sshkey` gem.
# Please instead update this file by running `bin/tapioca gem sshkey`.

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://sshkey//lib/sshkey.rb#7
  def jruby_not_implemented(msg); end
end

# Monkey patch OpenSSL::PKey::EC to provide convenience methods usable in this gem
#
# source://sshkey//lib/sshkey.rb#12
class OpenSSL::PKey::EC < ::OpenSSL::PKey::PKey
  # source://sshkey//lib/sshkey.rb#13
  def identifier; end

  # source://sshkey//lib/sshkey.rb#27
  def q; end
end

# source://sshkey//lib/sshkey.rb#36
class SSHKey
  # Create a new SSHKey object
  #
  # ==== Parameters
  # * private_key - Existing RSA or DSA or ECDSA private key
  # * options<~Hash>
  #   * :comment<~String> - Comment to use for the public key, defaults to ""
  #   * :passphrase<~String> - If the key is encrypted, supply the passphrase
  #   * :directives<~Array> - Options prefixed to the public key
  #
  # @return [SSHKey] a new instance of SSHKey
  #
  # source://sshkey//lib/sshkey.rb#378
  def initialize(private_key, options = T.unsafe(nil)); end

  # Determine the length (bits) of the key as an integer
  #
  # source://sshkey//lib/sshkey.rb#531
  def bits; end

  # Returns the value of attribute comment.
  #
  # source://sshkey//lib/sshkey.rb#367
  def comment; end

  # Sets the attribute comment
  #
  # @param value the value to set the attribute comment to.
  #
  # source://sshkey//lib/sshkey.rb#367
  def comment=(_arg0); end

  # Returns the value of attribute directives.
  #
  # source://sshkey//lib/sshkey.rb#617
  def directives; end

  # source://sshkey//lib/sshkey.rb#614
  def directives=(directives); end

  # Fetch the private key (PEM format)
  #
  # rsa_private_key and dsa_private_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#412
  def dsa_private_key; end

  # Fetch the public key (PEM format)
  #
  # rsa_public_key and dsa_public_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#433
  def dsa_public_key; end

  # Fetch the encrypted RSA/DSA private key using the passphrase provided
  #
  # If no passphrase is set, returns the unencrypted private key
  #
  # source://sshkey//lib/sshkey.rb#425
  def encrypted_private_key; end

  # Fingerprints
  #
  # MD5 fingerprint for the given SSH public key
  #
  # source://sshkey//lib/sshkey.rb#515
  def fingerprint; end

  # Returns the value of attribute key_object.
  #
  # source://sshkey//lib/sshkey.rb#366
  def key_object; end

  # Fingerprints
  #
  # MD5 fingerprint for the given SSH public key
  #
  # source://sshkey//lib/sshkey.rb#515
  def md5_fingerprint; end

  # Returns the value of attribute passphrase.
  #
  # source://sshkey//lib/sshkey.rb#367
  def passphrase; end

  # Sets the attribute passphrase
  #
  # @param value the value to set the attribute passphrase to.
  #
  # source://sshkey//lib/sshkey.rb#367
  def passphrase=(_arg0); end

  # Fetch the private key (PEM format)
  #
  # rsa_private_key and dsa_private_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#412
  def private_key; end

  # Fetch the public key (PEM format)
  #
  # rsa_public_key and dsa_public_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#433
  def public_key; end

  # source://sshkey//lib/sshkey.rb#439
  def public_key_object; end

  # Randomart
  #
  # Generate OpenSSH compatible ASCII art fingerprints
  # See http://www.opensource.apple.com/source/OpenSSH/OpenSSH-175/openssh/key.c (key_fingerprint_randomart function)
  # or https://mirrors.mit.edu/pub/OpenBSD/OpenSSH/ (sshkey.c fingerprint_randomart function)
  #
  # Example:
  # +--[ RSA 2048]----+
  # |o+ o..           |
  # |..+.o            |
  # | ooo             |
  # |.++. o           |
  # |+o+ +   S        |
  # |.. + o .         |
  # |  . + .          |
  # |   . .           |
  # |    Eo.          |
  # +-----------------+
  #
  # source://sshkey//lib/sshkey.rb#553
  def randomart(dgst_alg = T.unsafe(nil)); end

  # Fetch the private key (PEM format)
  #
  # rsa_private_key and dsa_private_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#412
  def rsa_private_key; end

  # Fetch the public key (PEM format)
  #
  # rsa_public_key and dsa_public_key are aliased for backward compatibility
  #
  # source://sshkey//lib/sshkey.rb#433
  def rsa_public_key; end

  # SHA1 fingerprint for the given SSH public key
  #
  # source://sshkey//lib/sshkey.rb#521
  def sha1_fingerprint; end

  # SHA256 fingerprint for the given SSH public key
  #
  # source://sshkey//lib/sshkey.rb#526
  def sha256_fingerprint; end

  # SSH2 public key (RFC4716)
  #
  # ==== Parameters
  # * headers<~Hash> - Keys will be used as header-tags and values as header-values.
  #
  # ==== Examples
  # {'Comment' => '2048-bit RSA created by user@example'}
  # {'x-private-use-tag' => 'Private Use Value'}
  #
  # source://sshkey//lib/sshkey.rb#508
  def ssh2_public_key(headers = T.unsafe(nil)); end

  # SSH public key
  #
  # source://sshkey//lib/sshkey.rb#495
  def ssh_public_key; end

  # source://sshkey//lib/sshkey.rb#610
  def sshfp(hostname); end

  # Returns the value of attribute type.
  #
  # source://sshkey//lib/sshkey.rb#366
  def type; end

  # Returns the value of attribute typestr.
  #
  # source://sshkey//lib/sshkey.rb#366
  def typestr; end

  private

  # For instance, the "ssh-rsa" string is encoded as the following byte array
  # [0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a']
  #
  # source://sshkey//lib/sshkey.rb#650
  def ssh_public_key_conversion; end

  class << self
    # Fingerprints
    #
    # Accepts either a public or private key
    #
    # MD5 fingerprint for the given SSH key
    #
    # source://sshkey//lib/sshkey.rb#186
    def fingerprint(key); end

    # source://sshkey//lib/sshkey.rb#246
    def format_sshfp_record(hostname, type, key); end

    # Generate a new keypair and return an SSHKey object
    #
    # The default behavior when providing no options will generate a 2048-bit RSA
    # keypair.
    #
    # ==== Parameters
    # * options<~Hash>:
    #   * :type<~String> - "rsa" or "dsa", "rsa" by default
    #   * :bits<~Integer> - Bit length
    #   * :comment<~String> - Comment to use for the public key, defaults to ""
    #   * :passphrase<~String> - Encrypt the key with this passphrase
    #
    # source://sshkey//lib/sshkey.rb#84
    def generate(options = T.unsafe(nil)); end

    # Fingerprints
    #
    # Accepts either a public or private key
    #
    # MD5 fingerprint for the given SSH key
    #
    # source://sshkey//lib/sshkey.rb#186
    def md5_fingerprint(key); end

    # SHA1 fingerprint for the given SSH key
    #
    # source://sshkey//lib/sshkey.rb#196
    def sha1_fingerprint(key); end

    # SHA256 fingerprint for the given SSH key
    #
    # source://sshkey//lib/sshkey.rb#205
    def sha256_fingerprint(key); end

    # Bits
    #
    # Returns ssh public key bits or false depending on the validity of the public key provided
    #
    # ==== Parameters
    # * ssh_public_key<~String> - "ssh-rsa AAAAB3NzaC1yc2EA...."
    # * ssh_public_key<~String> - "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTY...."
    #
    # source://sshkey//lib/sshkey.rb#160
    def ssh_public_key_bits(ssh_public_key); end

    # source://sshkey//lib/sshkey.rb#621
    def ssh_public_key_data_dsarsa(val); end

    # source://sshkey//lib/sshkey.rb#637
    def ssh_public_key_data_ecdsa(val); end

    # Convert an existing SSH public key to SSH2 (RFC4716) public key
    #
    # ==== Parameters
    # * ssh_public_key<~String> - "ssh-rsa AAAAB3NzaC1yc2EA...."
    # * headers<~Hash> - The Key will be used as the header-tag and the value as the header-value
    #
    # @raise [PublicKeyError]
    #
    # source://sshkey//lib/sshkey.rb#229
    def ssh_public_key_to_ssh2_public_key(ssh_public_key, headers = T.unsafe(nil)); end

    # SSHFP records for the given SSH key
    #
    # source://sshkey//lib/sshkey.rb#214
    def sshfp(hostname, key); end

    # Validate an existing SSH public key
    #
    # Returns true or false depending on the validity of the public key provided
    #
    # ==== Parameters
    # * ssh_public_key<~String> - "ssh-rsa AAAAB3NzaC1yc2EA...."
    #
    # @return [Boolean]
    #
    # source://sshkey//lib/sshkey.rb#135
    def valid_ssh_public_key?(ssh_public_key); end

    private

    # source://sshkey//lib/sshkey.rb#351
    def build_ssh2_headers(headers = T.unsafe(nil)); end

    # source://sshkey//lib/sshkey.rb#329
    def decoded_key(key); end

    # @raise [PublicKeyError]
    #
    # source://sshkey//lib/sshkey.rb#287
    def ecdsa_bits(ssh_type, identifier, q); end

    # source://sshkey//lib/sshkey.rb#333
    def fingerprint_regex; end

    # @raise [PublicKeyError]
    #
    # source://sshkey//lib/sshkey.rb#337
    def parse_ssh_public_key(public_key); end

    # source://sshkey//lib/sshkey.rb#255
    def unpacked_byte_array(ssh_type, encoded_key); end
  end
end

# source://sshkey//lib/sshkey.rb#53
SSHKey::ECDSA_CURVES = T.let(T.unsafe(nil), Hash)

# source://sshkey//lib/sshkey.rb#669
class SSHKey::PublicKeyError < ::StandardError; end

# +1 (for line wrap '/' character) must be <= 72
#
# source://sshkey//lib/sshkey.rb#69
SSHKey::SSH2_LINE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://sshkey//lib/sshkey.rb#46
SSHKey::SSHFP_TYPES = T.let(T.unsafe(nil), Hash)

# Accessor methods are defined in:
# - RSA:   https://github.com/ruby/openssl/blob/master/ext/openssl/ossl_pkey_rsa.c
# - DSA:   https://github.com/ruby/openssl/blob/master/ext/openssl/ossl_pkey_dsa.c
# - ECDSA: monkey patch OpenSSL::PKey::EC above
#
# source://sshkey//lib/sshkey.rb#67
SSHKey::SSH_CONVERSION = T.let(T.unsafe(nil), Hash)

# source://sshkey//lib/sshkey.rb#37
SSHKey::SSH_TYPES = T.let(T.unsafe(nil), Hash)

# source://sshkey//lib/sshkey.rb#59
SSHKey::VALID_BITS = T.let(T.unsafe(nil), Hash)
