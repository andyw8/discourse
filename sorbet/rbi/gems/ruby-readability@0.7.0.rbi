# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-readability` gem.
# Please instead update this file by running `bin/tapioca gem ruby-readability`.

# source://ruby-readability//lib/readability.rb#7
module Readability; end

# source://ruby-readability//lib/readability.rb#8
class Readability::Document
  # @return [Document] a new instance of Document
  #
  # source://ruby-readability//lib/readability.rb#39
  def initialize(input, options = T.unsafe(nil)); end

  # Look through the @html document looking for the author
  # Precedence Information here on the wiki: (TODO attach wiki URL if it is accepted)
  # Returns nil if no author is detected
  #
  # source://ruby-readability//lib/readability.rb#194
  def author; end

  # Returns the value of attribute best_candidate.
  #
  # source://ruby-readability//lib/readability.rb#37
  def best_candidate; end

  # Sets the attribute best_candidate
  #
  # @param value the value to set the attribute best_candidate to.
  #
  # source://ruby-readability//lib/readability.rb#37
  def best_candidate=(_arg0); end

  # Returns the value of attribute best_candidate_has_image.
  #
  # source://ruby-readability//lib/readability.rb#37
  def best_candidate_has_image; end

  # Sets the attribute best_candidate_has_image
  #
  # @param value the value to set the attribute best_candidate_has_image to.
  #
  # source://ruby-readability//lib/readability.rb#37
  def best_candidate_has_image=(_arg0); end

  # Returns the value of attribute candidates.
  #
  # source://ruby-readability//lib/readability.rb#37
  def candidates; end

  # Sets the attribute candidates
  #
  # @param value the value to set the attribute candidates to.
  #
  # source://ruby-readability//lib/readability.rb#37
  def candidates=(_arg0); end

  # source://ruby-readability//lib/readability.rb#341
  def class_weight(e); end

  # source://ruby-readability//lib/readability.rb#466
  def clean_conditionally(node, candidates, selector); end

  # @return [Boolean]
  #
  # source://ruby-readability//lib/readability.rb#495
  def clean_conditionally_reason?(name, counts, content_length, options, weight, link_density); end

  # source://ruby-readability//lib/readability.rb#232
  def content(remove_unlikely_candidates = T.unsafe(nil)); end

  # source://ruby-readability//lib/readability.rb#371
  def debug(str); end

  # source://ruby-readability//lib/readability.rb#258
  def get_article(candidates, best_candidate); end

  # source://ruby-readability//lib/readability.rb#172
  def get_image_size(url); end

  # source://ruby-readability//lib/readability.rb#305
  def get_link_density(elem); end

  # source://ruby-readability//lib/readability.rb#66
  def handle_exclusions!(whitelist, blacklist); end

  # Returns the value of attribute html.
  #
  # source://ruby-readability//lib/readability.rb#37
  def html; end

  # Sets the attribute html
  #
  # @param value the value to set the attribute html to.
  #
  # source://ruby-readability//lib/readability.rb#37
  def html=(_arg0); end

  # @return [Boolean]
  #
  # source://ruby-readability//lib/readability.rb#181
  def image_meets_criteria?(image); end

  # source://ruby-readability//lib/readability.rb#98
  def images(content = T.unsafe(nil), reload = T.unsafe(nil)); end

  # source://ruby-readability//lib/readability.rb#151
  def images_with_fqdn_uris(document = T.unsafe(nil), source_uri); end

  # source://ruby-readability//lib/readability.rb#147
  def images_with_fqdn_uris!(source_uri); end

  # source://ruby-readability//lib/readability.rb#89
  def make_html(whitelist = T.unsafe(nil), blacklist = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://ruby-readability//lib/readability.rb#37
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://ruby-readability//lib/readability.rb#37
  def options=(_arg0); end

  # source://ruby-readability//lib/readability.rb#57
  def prepare_candidates; end

  # source://ruby-readability//lib/readability.rb#375
  def remove_unlikely_candidates!; end

  # source://ruby-readability//lib/readability.rb#405
  def sanitize(node, candidates, options = T.unsafe(nil)); end

  # source://ruby-readability//lib/readability.rb#365
  def score_node(elem); end

  # source://ruby-readability//lib/readability.rb#311
  def score_paragraphs(min_text_length); end

  # source://ruby-readability//lib/readability.rb#291
  def select_best_candidate(candidates); end

  # source://ruby-readability//lib/readability.rb#186
  def title; end

  # source://ruby-readability//lib/readability.rb#385
  def transform_misused_divs_into_paragraphs!; end
end

# source://ruby-readability//lib/readability.rb#9
Readability::Document::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ruby-readability//lib/readability.rb#358
Readability::Document::ELEMENT_SCORES = T.let(T.unsafe(nil), Hash)

# source://ruby-readability//lib/readability.rb#23
Readability::Document::REGEXES = T.let(T.unsafe(nil), Hash)
