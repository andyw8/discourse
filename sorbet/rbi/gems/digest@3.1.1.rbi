# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `digest` gem.
# Please instead update this file by running `bin/tapioca gem digest`.

module Digest
  class << self
    # source://digest//digest.rb#22
    def const_missing(name); end
  end
end

class Digest::Class
  include ::Digest::Instance

  class << self
    # Returns the base64 encoded hash value of a given _string_.  The
    # return value is properly padded with '=' and contains no line
    # feeds.
    #
    # source://digest//digest.rb#55
    def base64digest(str, *args); end

    # Creates a digest object and reads a given file, _name_.
    # Optional arguments are passed to the constructor of the digest
    # class.
    #
    #   p Digest::SHA256.file("X11R6.8.2-src.tar.bz2").hexdigest
    #   # => "f02e3c85572dc9ad7cb77c2a638e3be24cc1b5bea9fdbb0b0299c9668475c534"
    #
    # source://digest//digest.rb#48
    def file(name, *args); end
  end
end

module Digest::Instance
  # If none is given, returns the resulting hash value of the digest
  # in a base64 encoded form, keeping the digest's state.
  #
  # If a +string+ is given, returns the hash value for the given
  # +string+ in a base64 encoded form, resetting the digest to the
  # initial state before and after the process.
  #
  # In either case, the return value is properly padded with '=' and
  # contains no line feeds.
  #
  # source://digest//digest.rb#82
  def base64digest(str = T.unsafe(nil)); end

  # Returns the resulting hash value and resets the digest to the
  # initial state.
  #
  # source://digest//digest.rb#88
  def base64digest!; end

  # Updates the digest with the contents of a given file _name_ and
  # returns self.
  #
  # source://digest//digest.rb#63
  def file(name); end
end

# source://digest//digest/version.rb#4
Digest::VERSION = T.let(T.unsafe(nil), String)

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://digest//digest.rb#110
  def Digest(name); end
end
