# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fspath` gem.
# Please instead update this file by running `bin/tapioca gem fspath`.

# Extension of Pathname with helpful methods and fixes
#
# source://fspath//lib/fspath.rb#9
class FSPath < ::Pathname
  # Fixing Pathname#+
  #
  # source://fspath//lib/fspath.rb#115
  def +(other); end

  # Join paths using File.join
  #
  # source://fspath//lib/fspath.rb#109
  def /(other); end

  # Append data to file
  #
  # source://fspath//lib/fspath.rb#171
  def append(data); end

  # Iterates over and yields each element in the given path in ascending order
  #
  # source://fspath//lib/fspath.rb#217
  def ascend(&block); end

  # Returns list of elements in the given path in ascending order
  #
  # source://fspath//lib/fspath.rb#198
  def ascendants; end

  # Append data to file opened in binary mode
  #
  # source://fspath//lib/fspath.rb#178
  def binappend(data); end

  # Iterates over and yields each element in the given path in descending order
  #
  # source://fspath//lib/fspath.rb#224
  def descend(&block); end

  # Returns list of elements in the given path in descending order
  #
  # source://fspath//lib/fspath.rb#212
  def descendants; end

  # Escape characters in glob pattern
  #
  # source://fspath//lib/fspath.rb#185
  def escape_glob; end

  # Expand glob
  #
  # source://fspath//lib/fspath.rb#190
  def glob(*args, &block); end

  # Returns path parts
  #   FSPath('/a/b/c').parts    # ['/', 'a', 'b', 'c']
  #   FSPath('a/b/c').parts     # ['a', 'b', 'c']
  #   FSPath('./a/b/c').parts   # ['.', 'a', 'b', 'c']
  #   FSPath('a/../b/c').parts  # ['a', '..', 'b', 'c']
  #
  # source://fspath//lib/fspath.rb#235
  def parts; end

  # Return basename without ext and ext as two-element array
  #
  # source://fspath//lib/fspath.rb#121
  def prefix_suffix; end

  # Fixing Pathname.relative_path_from
  #
  # source://fspath//lib/fspath.rb#142
  def relative_path_from(other); end

  # Calls class method with prefix and suffix set using prefix_suffix
  #
  # source://fspath//lib/fspath.rb#137
  def temp_dir(*args, &block); end

  # Calls class method with prefix and suffix set using prefix_suffix
  #
  # source://fspath//lib/fspath.rb#127
  def temp_file(*args, &block); end

  # Calls class method with prefix and suffix set using prefix_suffix
  #
  # source://fspath//lib/fspath.rb#132
  def temp_file_path(*args, &block); end

  private

  # source://fspath//lib/fspath.rb#337
  def _write(data, offset, binmode); end

  # source://fspath//lib/fspath.rb#333
  def escape_glob_string; end

  class << self
    # Returns common dir for paths
    #
    # source://fspath//lib/fspath.rb#52
    def common_dir(*paths); end

    # Returns or yields FSPath with temp directory created by Dir.mktmpdir
    #
    # source://fspath//lib/fspath.rb#86
    def temp_dir(prefix_suffix = T.unsafe(nil), *args); end

    # Returns or yields temp file created by Tempfile.new with path returning
    # FSPath
    #
    # source://fspath//lib/fspath.rb#62
    def temp_file(prefix_suffix = T.unsafe(nil), *args, &block); end

    # Returns or yields path as FSPath of temp file created by Tempfile.new
    # WARNING: loosing reference to returned object will remove file on nearest
    # GC run
    #
    # source://fspath//lib/fspath.rb#70
    def temp_file_path(prefix_suffix = T.unsafe(nil), *args); end

    # Return current user home path if called without argument.
    # If called with argument return specified user home path.
    #
    # source://fspath//lib/fspath.rb#47
    def ~(name = T.unsafe(nil)); end

    private

    # source://fspath//lib/fspath.rb#99
    def fix_prefix_suffix(prefix_suffix); end
  end
end

# Extension of Tempfile returning instance of provided class for path
#
# source://fspath//lib/fspath.rb#11
class FSPath::Tempfile < ::Tempfile
  # Eats first argument which must be a class, and calls super
  #
  # @return [Tempfile] a new instance of Tempfile
  #
  # source://fspath//lib/fspath.rb#13
  def initialize(path_klass, *args); end

  # Returns path wrapped in class provided in initialize
  #
  # source://fspath//lib/fspath.rb#23
  def path; end

  class << self
    # Fixes using appropriate initializer for jruby in 1.8 mode, also returns
    # result of block in ruby 1.8
    #
    # source://fspath//lib/fspath.rb#29
    def open(*args); end
  end
end
