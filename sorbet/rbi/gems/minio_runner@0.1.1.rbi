# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minio_runner` gem.
# Please instead update this file by running `bin/tapioca gem minio_runner`.

# source://minio_runner//lib/minio_runner/version.rb#3
module MinioRunner
  class << self
    # source://minio_runner//lib/minio_runner.rb#16
    def config(&block); end

    # source://minio_runner//lib/minio_runner.rb#58
    def install_binaries; end

    # source://minio_runner//lib/minio_runner.rb#25
    def logger; end

    # source://minio_runner//lib/minio_runner.rb#92
    def remove_install_dir; end

    # source://minio_runner//lib/minio_runner.rb#88
    def reset_config!; end

    # source://minio_runner//lib/minio_runner.rb#69
    def setup_alias; end

    # source://minio_runner//lib/minio_runner.rb#73
    def setup_buckets; end

    # source://minio_runner//lib/minio_runner.rb#47
    def start; end

    # source://minio_runner//lib/minio_runner.rb#65
    def start_server; end

    # source://minio_runner//lib/minio_runner.rb#82
    def stop; end
  end
end

# source://minio_runner//lib/minio_runner/base_binary.rb#6
class MinioRunner::BaseBinary
  class << self
    # @raise [NotImplementedError]
    #
    # source://minio_runner//lib/minio_runner/base_binary.rb#40
    def base_url; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#24
    def binary_file_path; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#20
    def checksum_file_path; end

    # @raise [NotImplementedError]
    #
    # source://minio_runner//lib/minio_runner/base_binary.rb#36
    def name; end

    # @raise [NotImplementedError]
    #
    # source://minio_runner//lib/minio_runner/base_binary.rb#44
    def platform_base_url; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#28
    def platform_binary_url; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#32
    def platform_sha256sum_url; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#8
    def sha_file_name; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#12
    def version_file_name; end

    # source://minio_runner//lib/minio_runner/base_binary.rb#16
    def version_file_path; end
  end
end

# source://minio_runner//lib/minio_runner/binary_manager.rb#6
class MinioRunner::BinaryManager
  # @return [BinaryManager] a new instance of BinaryManager
  #
  # source://minio_runner//lib/minio_runner/binary_manager.rb#15
  def initialize(binary); end

  # Returns the value of attribute binary.
  #
  # source://minio_runner//lib/minio_runner/binary_manager.rb#13
  def binary; end

  # source://minio_runner//lib/minio_runner/binary_manager.rb#47
  def download_binary; end

  # source://minio_runner//lib/minio_runner/binary_manager.rb#19
  def install; end

  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/binary_manager.rb#60
  def installed?; end

  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/binary_manager.rb#34
  def new_version_available?; end

  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/binary_manager.rb#64
  def version_cache_expired?; end

  class << self
    # source://minio_runner//lib/minio_runner/binary_manager.rb#8
    def install(binary); end
  end
end

# @api private
#
# source://minio_runner//lib/minio_runner/child_process.rb#27
class MinioRunner::ChildProcess
  # @api private
  # @return [ChildProcess] a new instance of ChildProcess
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#43
  def initialize(command, env: T.unsafe(nil), log_file: T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#83
  def alive?; end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#35
  def detach; end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#35
  def detach=(_arg0); end

  # @api private
  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#87
  def exited?; end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#52
  def io; end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#36
  def io=(_arg0); end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#37
  def pid; end

  # @api private
  # @raise [TimeoutError]
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#100
  def poll_for_exit(timeout); end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#56
  def start; end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#67
  def stop(timeout = T.unsafe(nil)); end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#109
  def wait; end

  private

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#121
  def kill(pid); end

  # @api private
  #
  # source://minio_runner//lib/minio_runner/child_process.rb#117
  def terminate(pid); end

  class << self
    # @api private
    #
    # source://minio_runner//lib/minio_runner/child_process.rb#39
    def build(command, env: T.unsafe(nil), log_file: T.unsafe(nil)); end
  end
end

# @api private
#
# source://minio_runner//lib/minio_runner/child_process.rb#33
MinioRunner::ChildProcess::POLL_INTERVAL = T.let(T.unsafe(nil), Float)

# @api private
#
# source://minio_runner//lib/minio_runner/child_process.rb#31
MinioRunner::ChildProcess::SIGKILL = T.let(T.unsafe(nil), String)

# @api private
#
# source://minio_runner//lib/minio_runner/child_process.rb#30
MinioRunner::ChildProcess::SIGTERM = T.let(T.unsafe(nil), String)

# @api private
#
# source://minio_runner//lib/minio_runner/child_process.rb#28
class MinioRunner::ChildProcess::TimeoutError < ::StandardError; end

# source://minio_runner//lib/minio_runner/config.rb#4
class MinioRunner::Config
  # @return [Config] a new instance of Config
  #
  # source://minio_runner//lib/minio_runner/config.rb#40
  def initialize; end

  # Returns the value of attribute buckets.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def buckets; end

  # Sets the attribute buckets
  #
  # @param value the value to set the attribute buckets to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def buckets=(_arg0); end

  # Returns the value of attribute cache_time.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def cache_time; end

  # Sets the attribute cache_time
  #
  # @param value the value to set the attribute cache_time to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def cache_time=(_arg0); end

  # Returns the value of attribute install_dir.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def install_dir; end

  # Sets the attribute install_dir
  #
  # @param value the value to set the attribute install_dir to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#55
  def install_dir=(dir); end

  # Returns the value of attribute log_level.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def log_level=(_arg0); end

  # Returns the value of attribute minio_console_port.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_console_port; end

  # Sets the attribute minio_console_port
  #
  # @param value the value to set the attribute minio_console_port to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_console_port=(_arg0); end

  # Returns the value of attribute minio_data_directory.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_data_directory; end

  # Sets the attribute minio_data_directory
  #
  # @param value the value to set the attribute minio_data_directory to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#59
  def minio_data_directory=(dir); end

  # Returns the value of attribute minio_domain.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_domain; end

  # Sets the attribute minio_domain
  #
  # @param value the value to set the attribute minio_domain to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_domain=(_arg0); end

  # Returns the value of attribute minio_port.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_port; end

  # Sets the attribute minio_port
  #
  # @param value the value to set the attribute minio_port to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_port=(_arg0); end

  # Returns the value of attribute minio_root_password.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_root_password; end

  # Sets the attribute minio_root_password
  #
  # @param value the value to set the attribute minio_root_password to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_root_password=(_arg0); end

  # Returns the value of attribute minio_root_user.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_root_user; end

  # Sets the attribute minio_root_user
  #
  # @param value the value to set the attribute minio_root_user to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#6
  def minio_root_user=(_arg0); end

  # source://minio_runner//lib/minio_runner/config.rb#63
  def minio_server_url; end

  # source://minio_runner//lib/minio_runner/config.rb#67
  def minio_urls; end

  # Returns the value of attribute public_buckets.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def public_buckets; end

  # Sets the attribute public_buckets
  #
  # @param value the value to set the attribute public_buckets to.
  #
  # source://minio_runner//lib/minio_runner/config.rb#5
  def public_buckets=(_arg0); end
end

# source://minio_runner//lib/minio_runner/config.rb#22
MinioRunner::Config::CONFIGURABLE_ENV_VARS = T.let(T.unsafe(nil), Hash)

# 24 hours in seconds
#
# source://minio_runner//lib/minio_runner/config.rb#14
MinioRunner::Config::DEFAULT_CACHE_TIME = T.let(T.unsafe(nil), Integer)

# source://minio_runner//lib/minio_runner/config.rb#13
MinioRunner::Config::DEFAULT_INSTALL_DIR = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/config.rb#18
MinioRunner::Config::DEFAULT_MINIO_CONSOLE_PORT = T.let(T.unsafe(nil), Integer)

# source://minio_runner//lib/minio_runner/config.rb#17
MinioRunner::Config::DEFAULT_MINIO_PORT = T.let(T.unsafe(nil), Integer)

# source://minio_runner//lib/minio_runner/config.rb#20
MinioRunner::Config::DEFAULT_MINIO_ROOT_PASSWORD = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/config.rb#19
MinioRunner::Config::DEFAULT_MINIO_ROOT_USER = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/config.rb#16
MinioRunner::Config::DEFAULT_MINIO_SERVER_DATA_DIR = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/mc_binary.rb#6
class MinioRunner::McBinary < ::MinioRunner::BaseBinary
  class << self
    # source://minio_runner//lib/minio_runner/mc_binary.rb#12
    def base_url; end

    # source://minio_runner//lib/minio_runner/mc_binary.rb#8
    def name; end

    # source://minio_runner//lib/minio_runner/mc_binary.rb#16
    def platform_base_url; end
  end
end

# source://minio_runner//lib/minio_runner/mc_manager.rb#4
class MinioRunner::McManager
  class << self
    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/mc_manager.rb#10
    def bucket_exists?(alias_name, name); end

    # source://minio_runner//lib/minio_runner/mc_manager.rb#6
    def command; end

    # source://minio_runner//lib/minio_runner/mc_manager.rb#17
    def create_bucket(alias_name, name); end

    # source://minio_runner//lib/minio_runner/mc_manager.rb#30
    def set_alias(name, url); end

    # source://minio_runner//lib/minio_runner/mc_manager.rb#48
    def set_anon(alias_name, bucket, policy); end
  end
end

# source://minio_runner//lib/minio_runner/minio_binary.rb#6
class MinioRunner::MinioBinary < ::MinioRunner::BaseBinary
  class << self
    # source://minio_runner//lib/minio_runner/minio_binary.rb#12
    def base_url; end

    # source://minio_runner//lib/minio_runner/minio_binary.rb#8
    def name; end

    # source://minio_runner//lib/minio_runner/minio_binary.rb#24
    def platform_base_url; end

    # source://minio_runner//lib/minio_runner/minio_binary.rb#16
    def platform_binary_url; end

    # source://minio_runner//lib/minio_runner/minio_binary.rb#20
    def platform_sha256sum_url; end
  end
end

# Checks that the minio server is running on the configured port using
# the /minio/health/live endpoint with a limited number of retries.
#
# Also used to check whether /etc/hosts is configured properly; some platforms
# (read: macOS) have to be configured in a certain way to avoid this.
#
# source://minio_runner//lib/minio_runner/minio_health_check.rb#10
class MinioRunner::MinioHealthCheck
  class << self
    # source://minio_runner//lib/minio_runner/minio_health_check.rb#12
    def call(retries: T.unsafe(nil), initial_retries: T.unsafe(nil)); end
  end
end

# source://minio_runner//lib/minio_runner/minio_server_manager.rb#6
class MinioRunner::MinioServerManager
  # Returns the value of attribute pid.
  #
  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#9
  def pid; end

  # Returns the value of attribute process.
  #
  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#9
  def process; end

  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#69
  def process_exited?; end

  # @return [Boolean]
  #
  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#65
  def process_running?; end

  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#27
  def start; end

  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#56
  def stop; end

  private

  # source://minio_runner//lib/minio_runner/minio_server_manager.rb#75
  def server_command; end

  class << self
    # source://minio_runner//lib/minio_runner/minio_server_manager.rb#22
    def log_file_path; end

    # source://minio_runner//lib/minio_runner/minio_server_manager.rb#12
    def start; end

    # source://minio_runner//lib/minio_runner/minio_server_manager.rb#17
    def stop; end
  end
end

# source://minio_runner//lib/minio_runner/minio_server_manager.rb#7
MinioRunner::MinioServerManager::SERVER_STOP_TIMEOUT_SECONDS = T.let(T.unsafe(nil), Integer)

# source://minio_runner//lib/minio_runner/network.rb#7
class MinioRunner::Network
  class << self
    # source://minio_runner//lib/minio_runner/network.rb#60
    def download(url, &block); end

    # source://minio_runner//lib/minio_runner/network.rb#24
    def get(url); end

    # source://minio_runner//lib/minio_runner/network.rb#77
    def log_time_error(request_start_time); end
  end
end

# source://minio_runner//lib/minio_runner/network.rb#11
MinioRunner::Network::LONG_RESPONSE_TIME_SECONDS = T.let(T.unsafe(nil), Integer)

# source://minio_runner//lib/minio_runner/network.rb#12
MinioRunner::Network::MAC_OS_LOCAL_DOMAIN_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/network.rb#8
class MinioRunner::Network::NetworkError < ::StandardError; end

# source://minio_runner//lib/minio_runner/system.rb#6
class MinioRunner::System
  class << self
    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/system.rb#27
    def defined_env?(name); end

    # source://minio_runner//lib/minio_runner/system.rb#15
    def env(name); end

    # source://minio_runner//lib/minio_runner/system.rb#62
    def exit_hook; end

    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/system.rb#58
    def linux?; end

    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/system.rb#50
    def mac?; end

    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/system.rb#54
    def mac_m?; end

    # source://minio_runner//lib/minio_runner/system.rb#31
    def make_install_dir; end

    # @return [Boolean]
    #
    # source://minio_runner//lib/minio_runner/system.rb#38
    def valid_platform?; end

    # source://minio_runner//lib/minio_runner/system.rb#42
    def validate_platform; end
  end
end

# source://minio_runner//lib/minio_runner/system.rb#12
MinioRunner::System::ENV_VAR_PREFIX = T.let(T.unsafe(nil), String)

# source://minio_runner//lib/minio_runner/system.rb#7
class MinioRunner::System::InvalidEnvVar < ::StandardError; end

# source://minio_runner//lib/minio_runner/system.rb#9
class MinioRunner::System::InvalidPlatform < ::StandardError; end

# source://minio_runner//lib/minio_runner/version.rb#4
MinioRunner::VERSION = T.let(T.unsafe(nil), String)
