# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_multisite` gem.
# Please instead update this file by running `bin/tapioca gem rails_multisite`.

# source://rails_multisite//lib/rails_multisite/version.rb#3
module RailsMultisite; end

# source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#4
class RailsMultisite::ConnectionManagement
  # @return [ConnectionManagement] a new instance of ConnectionManagement
  #
  # source://rails_multisite//lib/rails_multisite/connection_management.rb#164
  def initialize(config_filename); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#349
  def all_dbs; end

  # Returns the value of attribute config_filename.
  #
  # source://rails_multisite//lib/rails_multisite/connection_management.rb#161
  def config_filename; end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#13
  def connection_handlers; end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#13
  def connection_handlers=(val); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#379
  def connection_spec(opts); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#353
  def current_db; end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#357
  def current_hostname; end

  # Returns the value of attribute db_spec_cache.
  #
  # source://rails_multisite//lib/rails_multisite/connection_management.rb#161
  def db_spec_cache; end

  # Sets the attribute default_connection_handler
  #
  # @param value the value to set the attribute default_connection_handler to.
  #
  # source://rails_multisite//lib/rails_multisite/connection_management.rb#162
  def default_connection_handler=(_arg0); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#292
  def each_connection(opts = T.unsafe(nil), &blk); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#231
  def establish_connection(opts); end

  # @return [Boolean]
  #
  # source://rails_multisite//lib/rails_multisite/connection_management.rb#226
  def has_db?(db); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#361
  def host(env); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#176
  def load_config!; end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#220
  def reload; end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#275
  def with_connection(db = T.unsafe(nil)); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#258
  def with_hostname(hostname); end

  private

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#389
  def handler_establish_connection(handler, spec); end

  # source://rails_multisite//lib/rails_multisite/connection_management.rb#393
  def handler_key(spec); end

  class << self
    # source://rails_multisite//lib/rails_multisite/connection_management.rb#96
    def all_dbs; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#44
    def asset_hostnames; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#48
    def asset_hostnames=(h); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#19
    def clear_settings!; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#52
    def config_filename; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#36
    def config_filename=(config_filename); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#13
    def connection_handlers; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#13
    def connection_handlers=(val); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#121
    def connection_spec(opts); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#104
    def current_db; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#116
    def current_db_hostnames; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#112
    def current_hostname; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#15
    def default_config_filename; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#151
    def default_connection_handler=(connection_handler); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#88
    def each_connection(opts = T.unsafe(nil), &blk); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#65
    def establish_connection(opts); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#137
    def handler_key(spec); end

    # @return [Boolean]
    #
    # source://rails_multisite//lib/rails_multisite/connection_management.rb#60
    def has_db?(db); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#129
    def host(env); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#32
    def instance; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#27
    def load_settings!; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#56
    def reload; end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#77
    def with_connection(db = T.unsafe(nil), &blk); end

    # source://rails_multisite//lib/rails_multisite/connection_management.rb#69
    def with_hostname(hostname, &blk); end
  end
end

# source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#5
class RailsMultisite::ConnectionManagement::ConnectionSpecification
  # @return [ConnectionSpecification] a new instance of ConnectionSpecification
  #
  # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#23
  def initialize(spec); end

  # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#31
  def config; end

  # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#27
  def name; end

  # Returns the value of attribute spec.
  #
  # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#21
  def spec; end

  # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#31
  def to_hash; end

  class << self
    # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#7
    def current; end

    # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#11
    def db_spec_cache(configs); end

    # source://rails_multisite//lib/rails_multisite/connection_management/rails_61_compat.rb#16
    def default; end
  end
end

# source://rails_multisite//lib/rails_multisite/connection_management.rb#11
RailsMultisite::ConnectionManagement::DEFAULT = T.let(T.unsafe(nil), String)

# source://rails_multisite//lib/rails_multisite/cookie_salt.rb#4
class RailsMultisite::CookieSalt
  class << self
    # source://rails_multisite//lib/rails_multisite/cookie_salt.rb#12
    def update_cookie_salts(env:, host:); end
  end
end

# source://rails_multisite//lib/rails_multisite/cookie_salt.rb#5
RailsMultisite::CookieSalt::COOKIE_SALT_KEYS = T.let(T.unsafe(nil), Array)

# source://rails_multisite//lib/rails_multisite/formatter.rb#4
class RailsMultisite::Formatter < ::ActiveSupport::Logger::SimpleFormatter
  include ::ActiveSupport::TaggedLogging::Formatter

  # source://rails_multisite//lib/rails_multisite/formatter.rb#7
  def call(severity, timestamp, progname, msg); end
end

# source://rails_multisite//lib/rails_multisite/middleware.rb#3
class RailsMultisite::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://rails_multisite//lib/rails_multisite/middleware.rb#4
  def initialize(app, config = T.unsafe(nil)); end

  # source://rails_multisite//lib/rails_multisite/middleware.rb#9
  def call(env); end
end

# source://rails_multisite//lib/rails_multisite/railtie.rb#4
class RailsMultisite::Railtie < ::Rails::Railtie
  # @return [Boolean]
  #
  # source://rails_multisite//lib/rails_multisite/railtie.rb#34
  def skip_middleware?(config); end
end

# source://rails_multisite//lib/rails_multisite/version.rb#4
RailsMultisite::VERSION = T.let(T.unsafe(nil), String)
