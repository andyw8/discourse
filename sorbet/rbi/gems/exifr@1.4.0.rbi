# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `exifr` gem.
# Please instead update this file by running `bin/tapioca gem exifr`.

# source://exifr//lib/exifr.rb#5
module EXIFR
  class << self
    # Returns the value of attribute logger.
    #
    # source://exifr//lib/exifr.rb#10
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://exifr//lib/exifr.rb#10
    def logger=(_arg0); end
  end
end

# = JPEG decoder
#
# == Examples
#   EXIFR::JPEG.new('IMG_3422.JPG').width         # -> 2272
#   EXIFR::JPEG.new('IMG_3422.JPG').exif.model    # -> "Canon PowerShot G3"
#
# source://exifr//lib/exifr/jpeg.rb#14
class EXIFR::JPEG
  # +file+ is a filename or an IO object.  Hint: use StringIO when working with slurped data like blobs.
  #
  # @return [JPEG] a new instance of JPEG
  #
  # source://exifr//lib/exifr/jpeg.rb#32
  def initialize(file, load_thumbnails: T.unsafe(nil)); end

  # raw APP1 frames
  #
  # source://exifr//lib/exifr/jpeg.rb#29
  def app1s; end

  # number of bits per ??
  #
  # source://exifr//lib/exifr/jpeg.rb#20
  def bits; end

  # comment; a string if one comment found, an array if more,
  # otherwise <tt>nil</tt>
  #
  # source://exifr//lib/exifr/jpeg.rb#23
  def comment; end

  # EXIF data if available
  #
  # source://exifr//lib/exifr/jpeg.rb#25
  def exif; end

  # Returns +true+ when EXIF data is available.
  #
  # @return [Boolean]
  #
  # source://exifr//lib/exifr/jpeg.rb#41
  def exif?; end

  # raw EXIF data
  #
  # source://exifr//lib/exifr/jpeg.rb#27
  def exif_data; end

  # image height
  #
  # source://exifr//lib/exifr/jpeg.rb#16
  def height; end

  # Dispatch to EXIF.  When no EXIF data is available but the
  # +method+ does exist for EXIF data +nil+ will be returned.
  #
  # source://exifr//lib/exifr/jpeg.rb#59
  def method_missing(method, *args); end

  # source://exifr//lib/exifr/jpeg.rb#69
  def methods(regular = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://exifr//lib/exifr/jpeg.rb#65
  def respond_to?(method, include_all = T.unsafe(nil)); end

  # Return thumbnail data when available.
  #
  # source://exifr//lib/exifr/jpeg.rb#46
  def thumbnail; end

  # Get a hash presentation of the image.
  #
  # source://exifr//lib/exifr/jpeg.rb#51
  def to_hash; end

  # image width
  #
  # source://exifr//lib/exifr/jpeg.rb#18
  def width; end

  private

  # source://exifr//lib/exifr/jpeg.rb#98
  def examine(io, load_thumbnails: T.unsafe(nil)); end

  class << self
    # source://exifr//lib/exifr/jpeg.rb#79
    def instance_methods(include_super = T.unsafe(nil)); end

    def instance_methods_without_jpeg_extras(*_arg0); end
  end
end

# source://exifr//lib/exifr/jpeg.rb#86
class EXIFR::JPEG::Reader < ::SimpleDelegator
  # source://exifr//lib/exifr/jpeg.rb#91
  def next; end

  # source://exifr//lib/exifr/jpeg.rb#89
  def readframe; end

  # source://exifr//lib/exifr/jpeg.rb#88
  def readint; end

  # source://exifr//lib/exifr/jpeg.rb#90
  def readsof; end
end

# source://exifr//lib/exifr.rb#6
class EXIFR::MalformedImage < ::StandardError; end

# source://exifr//lib/exifr.rb#7
class EXIFR::MalformedJPEG < ::EXIFR::MalformedImage; end

# source://exifr//lib/exifr.rb#8
class EXIFR::MalformedTIFF < ::EXIFR::MalformedImage; end

# = TIFF decoder
#
# == Date properties
# The properties <tt>:date_time</tt>, <tt>:date_time_original</tt>,
# <tt>:date_time_digitized</tt> coerced into Time objects.
#
# == Orientation
# The property <tt>:orientation</tt> describes the subject rotated and/or
# mirrored in relation to the camera.  It is translated to one of the following
# instances:
# * TopLeftOrientation
# * TopRightOrientation
# * BottomRightOrientation
# * BottomLeftOrientation
# * LeftTopOrientation
# * RightTopOrientation
# * RightBottomOrientation
# * LeftBottomOrientation
#
# These instances of Orientation have two methods:
# * <tt>to_i</tt>; return the original integer
# * <tt>transform_rmagick(image)</tt>; transforms the given RMagick::Image
#   to a viewable version
#
# == Examples
#   EXIFR::TIFF.new('DSC_0218.TIF').width           # => 3008
#   EXIFR::TIFF.new('DSC_0218.TIF')[1].width        # => 160
#   EXIFR::TIFF.new('DSC_0218.TIF').model           # => "NIKON D1X"
#   EXIFR::TIFF.new('DSC_0218.TIF').date_time       # => Tue May 23 19:15:32 +0200 2006
#   EXIFR::TIFF.new('DSC_0218.TIF').exposure_time   # => Rational(1, 100)
#   EXIFR::TIFF.new('DSC_0218.TIF').orientation     # => EXIFR::TIFF::Orientation
#
# source://exifr//lib/exifr/tiff.rb#39
class EXIFR::TIFF
  include ::Enumerable

  # +file+ is a filename or an +IO+ object.  Hint: use +StringIO+ when working with slurped data like blobs.
  #
  # @return [TIFF] a new instance of TIFF
  #
  # source://exifr//lib/exifr/tiff.rb#378
  def initialize(file, load_thumbnails: T.unsafe(nil)); end

  # Get +index+ image.
  #
  # source://exifr//lib/exifr/tiff.rb#415
  def [](index); end

  # Yield for each image.
  #
  # source://exifr//lib/exifr/tiff.rb#410
  def each; end

  # source://exifr//lib/exifr/tiff.rb#446
  def encode_with(coder); end

  # Get GPS location, altitude and image direction return nil when not available.
  #
  # source://exifr//lib/exifr/tiff.rb#473
  def gps; end

  # Convenience method to access image height.
  #
  # source://exifr//lib/exifr/tiff.rb#465
  def height; end

  # source://exifr//lib/exifr/tiff.rb#484
  def inspect; end

  # JPEG thumbnails
  #
  # source://exifr//lib/exifr/tiff.rb#43
  def jpeg_thumbnails; end

  # Dispatch to first image.
  #
  # source://exifr//lib/exifr/tiff.rb#420
  def method_missing(method, *args); end

  # source://exifr//lib/exifr/tiff.rb#438
  def methods(regular = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://exifr//lib/exifr/tiff.rb#432
  def respond_to?(method, include_all = T.unsafe(nil)); end

  # Number of images.
  #
  # source://exifr//lib/exifr/tiff.rb#405
  def size; end

  # Get a hash presentation of the (first) image.
  #
  # source://exifr//lib/exifr/tiff.rb#468
  def to_hash; end

  # source://exifr//lib/exifr/tiff.rb#450
  def to_yaml_properties; end

  # Convenience method to access image width.
  #
  # source://exifr//lib/exifr/tiff.rb#462
  def width; end

  class << self
    # source://exifr//lib/exifr/tiff.rb#456
    def instance_methods(include_super = T.unsafe(nil)); end

    def instance_methods_without_tiff_extras(*_arg0); end

    # Callable to create a +Time+ object.  Defaults to <tt>proc{|*a|Time.local(*a)}</tt>.
    #
    # source://exifr//lib/exifr/tiff.rb#247
    def mktime_proc; end

    # Callable to create a +Time+ object.  Defaults to <tt>proc{|*a|Time.local(*a)}</tt>.
    #
    # source://exifr//lib/exifr/tiff.rb#247
    def mktime_proc=(_arg0); end

    # source://exifr//lib/exifr/tiff.rb#345
    def rational(n, d); end

    # source://exifr//lib/exifr/tiff.rb#355
    def round(f, n); end
  end
end

# source://exifr//lib/exifr/tiff.rb#360
EXIFR::TIFF::ADAPTERS = T.let(T.unsafe(nil), Hash)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::BottomLeftOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::BottomRightOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#649
class EXIFR::TIFF::Data
  # @return [Data] a new instance of Data
  #
  # source://exifr//lib/exifr/tiff.rb#652
  def initialize(file); end

  # source://exifr//lib/exifr/tiff.rb#672
  def [](pos); end

  # Returns the value of attribute double.
  #
  # source://exifr//lib/exifr/tiff.rb#650
  def double; end

  # Returns the value of attribute file.
  #
  # source://exifr//lib/exifr/tiff.rb#650
  def file; end

  # Returns the value of attribute float.
  #
  # source://exifr//lib/exifr/tiff.rb#650
  def float; end

  # Returns the value of attribute long.
  #
  # source://exifr//lib/exifr/tiff.rb#650
  def long; end

  # source://exifr//lib/exifr/tiff.rb#688
  def readlong(pos); end

  # source://exifr//lib/exifr/tiff.rb#684
  def readshort(pos); end

  # Returns the value of attribute short.
  #
  # source://exifr//lib/exifr/tiff.rb#650
  def short; end

  # source://exifr//lib/exifr/tiff.rb#692
  def size; end

  private

  # source://exifr//lib/exifr/tiff.rb#698
  def read_for(pos); end

  class << self
    # source://exifr//lib/exifr/tiff.rb#665
    def open(file, &block); end
  end
end

# source://exifr//lib/exifr/tiff.rb#332
class EXIFR::TIFF::Degrees < ::Array
  # @return [Degrees] a new instance of Degrees
  #
  # source://exifr//lib/exifr/tiff.rb#333
  def initialize(arr); end

  # source://exifr//lib/exifr/tiff.rb#340
  def to_f; end
end

# source://exifr//lib/exifr/tiff.rb#566
class EXIFR::TIFF::Field
  # @return [Field] a new instance of Field
  #
  # source://exifr//lib/exifr/tiff.rb#569
  def initialize(data, pos); end

  # Returns the value of attribute offset.
  #
  # source://exifr//lib/exifr/tiff.rb#567
  def offset; end

  # Returns the value of attribute tag.
  #
  # source://exifr//lib/exifr/tiff.rb#567
  def tag; end

  # Returns the value of attribute value.
  #
  # source://exifr//lib/exifr/tiff.rb#567
  def value; end

  private

  # source://exifr//lib/exifr/tiff.rb#640
  def rational(n, d); end

  # source://exifr//lib/exifr/tiff.rb#628
  def sign_byte(n); end

  # source://exifr//lib/exifr/tiff.rb#636
  def sign_long(n); end

  # source://exifr//lib/exifr/tiff.rb#632
  def sign_short(n); end
end

# source://exifr//lib/exifr/tiff.rb#470
class EXIFR::TIFF::GPS < ::Struct
  # Returns the value of attribute altitude
  #
  # @return [Object] the current value of altitude
  def altitude; end

  # Sets the attribute altitude
  #
  # @param value [Object] the value to set the attribute altitude to.
  # @return [Object] the newly set value
  def altitude=(_); end

  # Returns the value of attribute image_direction
  #
  # @return [Object] the current value of image_direction
  def image_direction; end

  # Sets the attribute image_direction
  #
  # @param value [Object] the value to set the attribute image_direction to.
  # @return [Object] the newly set value
  def image_direction=(_); end

  # Returns the value of attribute latitude
  #
  # @return [Object] the current value of latitude
  def latitude; end

  # Sets the attribute latitude
  #
  # @param value [Object] the value to set the attribute latitude to.
  # @return [Object] the newly set value
  def latitude=(_); end

  # Returns the value of attribute longitude
  #
  # @return [Object] the current value of longitude
  def longitude; end

  # Sets the attribute longitude
  #
  # @param value [Object] the value to set the attribute longitude to.
  # @return [Object] the newly set value
  def longitude=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://exifr//lib/exifr/tiff.rb#488
class EXIFR::TIFF::IFD
  # @return [IFD] a new instance of IFD
  #
  # source://exifr//lib/exifr/tiff.rb#491
  def initialize(data, offset = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://exifr//lib/exifr/tiff.rb#543
  def encode_with(coder); end

  # Returns the value of attribute fields.
  #
  # source://exifr//lib/exifr/tiff.rb#489
  def fields; end

  # source://exifr//lib/exifr/tiff.rb#517
  def height; end

  # source://exifr//lib/exifr/tiff.rb#531
  def inspect; end

  # source://exifr//lib/exifr/tiff.rb#511
  def method_missing(method, *args); end

  # source://exifr//lib/exifr/tiff.rb#539
  def next; end

  # @return [Boolean]
  #
  # source://exifr//lib/exifr/tiff.rb#535
  def next?; end

  # Returns the value of attribute offset.
  #
  # source://exifr//lib/exifr/tiff.rb#489
  def offset; end

  # Returns the value of attribute raw_fields.
  #
  # source://exifr//lib/exifr/tiff.rb#489
  def raw_fields; end

  # source://exifr//lib/exifr/tiff.rb#519
  def to_hash; end

  # source://exifr//lib/exifr/tiff.rb#547
  def to_yaml_properties; end

  # Returns the value of attribute type.
  #
  # source://exifr//lib/exifr/tiff.rb#489
  def type; end

  # source://exifr//lib/exifr/tiff.rb#516
  def width; end

  private

  # source://exifr//lib/exifr/tiff.rb#552
  def add_field(field); end
end

# source://exifr//lib/exifr/tiff.rb#243
EXIFR::TIFF::IFD_TAGS = T.let(T.unsafe(nil), Array)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::LeftBottomOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::LeftTopOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#307
EXIFR::TIFF::ORIENTATIONS = T.let(T.unsafe(nil), Array)

# The orientation of the image with respect to the rows and columns.
#
# source://exifr//lib/exifr/tiff.rb#267
class EXIFR::TIFF::Orientation
  # @return [Orientation] a new instance of Orientation
  #
  # source://exifr//lib/exifr/tiff.rb#268
  def initialize(value, type); end

  # source://exifr//lib/exifr/tiff.rb#302
  def ==(other); end

  # Debugging output.
  #
  # source://exifr//lib/exifr/tiff.rb#283
  def inspect; end

  # Field value.
  #
  # source://exifr//lib/exifr/tiff.rb#273
  def to_i; end

  # Symbolic value.
  #
  # source://exifr//lib/exifr/tiff.rb#278
  def to_sym; end

  # Rotate and/or flip for proper viewing.
  #
  # source://exifr//lib/exifr/tiff.rb#288
  def transform_rmagick(img); end
end

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::RightBottomOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::RightTopOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# Names for all recognized TIFF fields.
#
# source://exifr//lib/exifr/tiff.rb#375
EXIFR::TIFF::TAGS = T.let(T.unsafe(nil), Array)

# source://exifr//lib/exifr/tiff.rb#45
EXIFR::TIFF::TAG_MAPPING = T.let(T.unsafe(nil), Hash)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::TopLeftOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)

# source://exifr//lib/exifr/tiff.rb#320
EXIFR::TIFF::TopRightOrientation = T.let(T.unsafe(nil), EXIFR::TIFF::Orientation)
