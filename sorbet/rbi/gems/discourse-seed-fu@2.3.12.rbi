# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `discourse-seed-fu` gem.
# Please instead update this file by running `bin/tapioca gem discourse-seed-fu`.

# source://discourse-seed-fu//lib/discourse-seed-fu.rb#34
class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::SeedFu::ActiveRecordExtension

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.7/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.7/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers; end

  # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers?; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.7/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.7/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.7/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.7/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.7/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.7/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.7/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.7/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.7/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.7/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.7/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.7/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.7/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.7/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.7/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.7/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.7/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.7/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.7/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#68
  def time_zone_aware_types; end

  # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#68
  def time_zone_aware_types?; end

  # source://activerecord/7.0.7/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.0.7/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.7/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.7/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.7/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.7/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers; end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.7/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers?; end

    # source://activerecord/7.0.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.7/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.7/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.7/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.7/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.7/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.7/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.7/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.7/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.7/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activemodel/7.0.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.7/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.7/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.7/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.7/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.7/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.7/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.7/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.7/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.7/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.7/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.7/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.7/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types; end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.7/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types?; end

    private

    # source://activerecord/7.0.7/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end
  end
end

# source://discourse-seed-fu//lib/seed-fu/railtie.rb#1
module SeedFu
  # source://discourse-seed-fu//lib/discourse-seed-fu.rb#18
  def fixture_paths; end

  # source://discourse-seed-fu//lib/discourse-seed-fu.rb#18
  def fixture_paths=(val); end

  # source://discourse-seed-fu//lib/discourse-seed-fu.rb#13
  def quiet; end

  # source://discourse-seed-fu//lib/discourse-seed-fu.rb#13
  def quiet=(val); end

  class << self
    # source://discourse-seed-fu//lib/discourse-seed-fu.rb#18
    def fixture_paths; end

    # source://discourse-seed-fu//lib/discourse-seed-fu.rb#18
    def fixture_paths=(val); end

    # source://discourse-seed-fu//lib/discourse-seed-fu.rb#13
    def quiet; end

    # source://discourse-seed-fu//lib/discourse-seed-fu.rb#13
    def quiet=(val); end

    # Load seed data from files
    #
    # @param fixture_paths [Array] The paths to look for seed files in
    # @param filter [Regexp] If given, only filenames matching this expression will be loaded
    #
    # source://discourse-seed-fu//lib/discourse-seed-fu.rb#28
    def seed(fixture_paths = T.unsafe(nil), filter = T.unsafe(nil)); end
  end
end

# source://discourse-seed-fu//lib/seed-fu/active_record_extension.rb#2
module SeedFu::ActiveRecordExtension
  # Load some seed data. There are two ways to do this.
  #
  # Verbose syntax
  # --------------
  #
  # This will seed a single record. The `:id` parameter ensures that if a record already exists
  # in the database with the same id, then it will be updated with the name and age, rather
  # than created from scratch.
  #
  #     Person.seed(:id) do |s|
  #       s.id   = 1
  #       s.name = "Jon"
  #       s.age  = 21
  #     end
  #
  # Note that `:id` is the default attribute used to identify a seed, so it need not be
  # specified.
  #
  # Terse syntax
  # ------------
  #
  # This is a more succinct way to load multiple records. Note that both `:x` and `:y` are being
  # used to identify a seed here.
  #
  #     Point.seed(:x, :y,
  #       { :x => 3, :y => 10, :name => "Home" },
  #       { :x => 5, :y => 9,  :name => "Office" }
  #     )
  #
  # source://discourse-seed-fu//lib/seed-fu/active_record_extension.rb#31
  def seed(*args, &block); end

  # Has the same syntax as {#seed}, but if a record already exists with the same values for
  # constraining attributes, it will not be updated.
  #
  # @example
  #   Person.seed(:id, :id => 1, :name => "Jon") # => Record created
  #   Person.seed(:id, :id => 1, :name => "Bob") # => Name changed
  #   Person.seed_once(:id, :id => 1, :name => "Harry") # => Name *not* changed
  #
  # source://discourse-seed-fu//lib/seed-fu/active_record_extension.rb#42
  def seed_once(*args, &block); end

  private

  # source://discourse-seed-fu//lib/seed-fu/active_record_extension.rb#49
  def parse_seed_fu_args(args, block); end
end

# @private
#
# source://discourse-seed-fu//lib/seed-fu/block_hash.rb#3
class SeedFu::BlockHash
  # @return [BlockHash] a new instance of BlockHash
  #
  # source://discourse-seed-fu//lib/seed-fu/block_hash.rb#4
  def initialize(proc); end

  # source://discourse-seed-fu//lib/seed-fu/block_hash.rb#13
  def method_missing(method_name, *args, &block); end

  # source://discourse-seed-fu//lib/seed-fu/block_hash.rb#9
  def to_hash; end
end

# source://discourse-seed-fu//lib/seed-fu/railtie.rb#2
class SeedFu::Railtie < ::Rails::Railtie; end

# Runs seed files.
#
# It is not recommended to use this class directly. Instead, use {SeedFu.seed SeedFu.seed}, which creates
# an instead of {Runner} and calls {#run #run}.
#
# @see SeedFu.seed SeedFu.seed
#
# source://discourse-seed-fu//lib/seed-fu/runner.rb#11
class SeedFu::Runner
  # @param fixture_paths [Array<String>] The paths where fixtures are located. Will use
  #   `SeedFu.fixture_paths` if {nil}. If the argument is not an array, it will be wrapped by one.
  # @param filter [Regexp] If given, only seed files with a file name matching this pattern will
  #   be used
  # @return [Runner] a new instance of Runner
  #
  # source://discourse-seed-fu//lib/seed-fu/runner.rb#16
  def initialize(fixture_paths = T.unsafe(nil), filter = T.unsafe(nil)); end

  # Run the seed files.
  #
  # source://discourse-seed-fu//lib/seed-fu/runner.rb#22
  def run; end

  private

  # source://discourse-seed-fu//lib/seed-fu/runner.rb#63
  def filenames; end

  # source://discourse-seed-fu//lib/seed-fu/runner.rb#51
  def open(filename); end

  # source://discourse-seed-fu//lib/seed-fu/runner.rb#32
  def run_file(filename); end
end

# Creates or updates seed records with data.
#
# It is not recommended to use this class directly. Instead, use `Model.seed`, and `Model.seed_once`,
# where `Model` is your Active Record model.
#
# @see ActiveRecordExtension
#
# source://discourse-seed-fu//lib/seed-fu/seeder.rb#10
class SeedFu::Seeder
  # @option options
  # @option options
  # @param model_class [ActiveRecord::Base] The model to be seeded
  # @param constraints [Array<Symbol>] A list of attributes which identify a particular seed. If
  #   a record with these attributes already exists then it will be updated rather than created.
  # @param data [Array<Hash>] Each item in this array is a hash containing attributes for a
  #   particular record.
  # @param options [Hash]
  # @return [Seeder] a new instance of Seeder
  #
  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#20
  def initialize(model_class, constraints, data, options = T.unsafe(nil)); end

  # Insert/update the records as appropriate. Validation is skipped while saving.
  #
  # @return [Array<ActiveRecord::Base>] The records which have been seeded
  #
  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#34
  def seed; end

  private

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#57
  def column_list(columns); end

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#83
  def constraint_conditions(data); end

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#78
  def find_or_initialize_record(data); end

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#61
  def seed_record(data); end

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#87
  def update_id_sequence; end

  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#44
  def validate_constraints!; end

  # @raise [ArgumentError]
  #
  # source://discourse-seed-fu//lib/seed-fu/seeder.rb#53
  def validate_data!; end
end

# The current version of Seed Fu
#
# source://discourse-seed-fu//lib/seed-fu/version.rb#3
SeedFu::VERSION = T.let(T.unsafe(nil), String)

# {Writer} is used to programmatically generated seed files. For example, you might want to write
# a script which converts data in a CSV file to a valid Seed Fu seed file, which can then be
# imported.
#
# @example Basic usage
#   SeedFu::Writer.write('path/to/file.rb', :class_name => 'Person', :constraints => [:first_name, :last_name]) do |writer|
#   writer.add(:first_name => 'Jon',   :last_name => 'Smith',    :age => 21)
#   writer.add(:first_name => 'Emily', :last_name => 'McDonald', :age => 24)
#   end
#
#   # Writes the following to the file:
#   #
#   # Person.seed(:first_name, :last_name,
#   #   {:first_name=>"Jon", :last_name=>"Smith", :age=>21},
#   #   {:first_name=>"Emily", :last_name=>"McDonald", :age=>24}
#   # )
#
# source://discourse-seed-fu//lib/seed-fu/writer.rb#18
class SeedFu::Writer
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @raise [ArgumentError]
  # @return [Writer] a new instance of Writer
  #
  # source://discourse-seed-fu//lib/seed-fu/writer.rb#34
  def initialize(options = T.unsafe(nil)); end

  # Add a seed. Must be called within a block passed to {#write}.
  #
  # @param seed [Hash] The attributes for the seed
  #
  # source://discourse-seed-fu//lib/seed-fu/writer.rb#67
  def <<(seed); end

  # Add a seed. Must be called within a block passed to {#write}.
  #
  # @param seed [Hash] The attributes for the seed
  #
  # source://discourse-seed-fu//lib/seed-fu/writer.rb#67
  def add(seed); end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#19
  def default_options; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#19
  def default_options=(val); end

  # Writes the necessary headers and footers, and yields to a block within which the actual
  # seed data should be writting using the `#<<` method.
  #
  # @param io_or_filename [IO] The IO to which writes will be made. (If an `IO` is given, it is
  #   your responsibility to close it after writing.)
  # @param io_or_filename [String] The filename of a file to make writes to. (Will be opened and
  #   closed automatically.)
  # @raise [ArgumentError]
  # @yield [self] make calls to `#<<` within the block
  #
  # source://discourse-seed-fu//lib/seed-fu/writer.rb#53
  def write(io_or_filename, &block); end

  private

  # @return [Boolean]
  #
  # source://discourse-seed-fu//lib/seed-fu/writer.rb#128
  def chunk_this_seed?; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#113
  def file_footer; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#100
  def file_header; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#124
  def seed_footer; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#119
  def seed_header; end

  # source://discourse-seed-fu//lib/seed-fu/writer.rb#89
  def write_to_io(io); end

  class << self
    # source://discourse-seed-fu//lib/seed-fu/writer.rb#19
    def default_options; end

    # source://discourse-seed-fu//lib/seed-fu/writer.rb#19
    def default_options=(val); end

    # Creates a new instance of {Writer} with the `options`, and then calls {#write} with the
    # `io_or_filename` and `block`
    #
    # source://discourse-seed-fu//lib/seed-fu/writer.rb#41
    def write(io_or_filename, options = T.unsafe(nil), &block); end
  end
end
