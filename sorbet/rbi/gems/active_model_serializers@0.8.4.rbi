# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_model_serializers` gem.
# Please instead update this file by running `bin/tapioca gem active_model_serializers`.

# source://active_model_serializers//lib/action_controller/serialization.rb#1
module ActionController
  class << self
    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#7
    def add_renderer(key, &block); end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#12
    def remove_renderer(key); end
  end
end

class ActionController::API < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope; end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope=(_arg0); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects; end

  # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope; end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope=(value); end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects; end

    # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://actionpack/7.0.7/lib/action_controller/api.rb#104
    def without_modules(*modules); end
  end
end

class ActionController::Base < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::BasicImplicitRender

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.7/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope; end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope=(_arg0); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#31
  def _serialization_scope?; end

  # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects; end

  # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.7/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.7/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.7/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.7/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.7/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.7/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.7/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope; end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope=(value); end

    # source://active_model_serializers//lib/action_controller/serialization.rb#31
    def _serialization_scope?; end

    # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.7/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.7/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.7/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects; end

    # source://actionpack/7.0.7/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.7/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.7/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.7/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack/7.0.7/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

# Action Controller Serialization
#
# Overrides render :json to check if the given object implements +active_model_serializer+
# as a method. If so, use the returned serializer instead of calling +to_json+ on the object.
#
# This module also provides a serialization_scope method that allows you to configure the
# +serialization_scope+ of the serializer. Most apps will likely set the +serialization_scope+
# to the current user:
#
#    class ApplicationController < ActionController::Base
#      serialization_scope :current_user
#    end
#
# If you need more complex scope rules, you can simply override the serialization_scope:
#
#    class ApplicationController < ActionController::Base
#      private
#
#      def serialization_scope
#        current_user
#      end
#    end
#
# source://active_model_serializers//lib/action_controller/serialization.rb#25
module ActionController::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods
  mixes_in_class_methods ::ActionController::Serialization::ClassMethods

  # source://active_model_serializers//lib/action_controller/serialization.rb#44
  def _render_option_json(resource, options); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#44
  def _render_with_renderer_json(resource, options); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#40
  def default_serializer_options; end

  # source://active_model_serializers//lib/action_controller/serialization.rb#35
  def serialization_scope; end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
    def _serialization_scope; end
    def _serialization_scope=(value); end
    def _serialization_scope?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
    def _serialization_scope; end
    def _serialization_scope=(value); end
    def _serialization_scope?; end
  end
end

# source://active_model_serializers//lib/action_controller/serialization.rb#55
module ActionController::Serialization::ClassMethods
  # source://active_model_serializers//lib/action_controller/serialization.rb#56
  def serialization_scope(scope); end
end

# source://active_model_serializers//lib/active_model/array_serializer.rb#5
module ActiveModel
  class << self
    # source://activemodel/7.0.7/lib/active_model.rb#72
    def eager_load!; end

    # source://activemodel/7.0.7/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.0.7/lib/active_model/version.rb#7
    def version; end
  end
end

# Active Model Array Serializer
#
# Serializes an Array, checking if each element implements
# the +active_model_serializer+ method.
#
# To disable serialization of root elements:
#
#     ActiveModel::ArraySerializer.root = false
#
# source://active_model_serializers//lib/active_model/array_serializer.rb#15
class ActiveModel::ArraySerializer
  extend ::ActiveSupport::DescendantsTracker

  # @return [ArraySerializer] a new instance of ArraySerializer
  #
  # source://active_model_serializers//lib/active_model/array_serializer.rb#32
  def initialize(object, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#44
  def as_json(*args); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#22
  def cache; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#22
  def cache=(_arg0); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#22
  def cache?; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#40
  def include_meta(hash); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#36
  def meta_key; end

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model/array_serializer.rb#18
  def object; end

  # Returns the value of attribute options.
  #
  # source://active_model_serializers//lib/active_model/array_serializer.rb#18
  def options; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#23
  def perform_caching; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#23
  def perform_caching=(_arg0); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#20
  def root; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#20
  def root=(_arg0); end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#20
  def root?; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#67
  def serializable_array; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#57
  def to_json(*args); end

  private

  # source://active_model_serializers//lib/active_model/array_serializer.rb#78
  def _serializable_array; end

  # source://active_model_serializers//lib/active_model/array_serializer.rb#96
  def expand_cache_key(*args); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/array_serializer.rb#100
  def perform_caching?; end

  class << self
    # source://active_model_serializers//lib/active_model/array_serializer.rb#22
    def cache; end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#22
    def cache=(value); end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#22
    def cache?; end

    # set perform caching like root
    #
    # source://active_model_serializers//lib/active_model/array_serializer.rb#27
    def cached(value = T.unsafe(nil)); end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#23
    def perform_caching; end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#23
    def perform_caching=(value); end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#23
    def perform_caching?; end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#20
    def root; end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#20
    def root=(value); end

    # source://active_model_serializers//lib/active_model/array_serializer.rb#20
    def root?; end
  end
end

# source://active_model_serializers//lib/active_model_serializers.rb#65
module ActiveModel::ArraySerializerSupport
  # source://active_model_serializers//lib/active_model_serializers.rb#66
  def active_model_serializer; end
end

# DefaultSerializer
#
# Provides a constant interface for all items, particularly
# for ArraySerializer.
#
# source://active_model_serializers//lib/active_model/serializer.rb#503
class ActiveModel::DefaultSerializer
  # @return [DefaultSerializer] a new instance of DefaultSerializer
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#506
  def initialize(object, options = T.unsafe(nil)); end

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#504
  def object; end

  # Returns the value of attribute options.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#504
  def options; end

  # source://active_model_serializers//lib/active_model/serializer.rb#510
  def serializable_hash; end
end

# source://active_model_serializers//lib/active_model_serializers.rb#12
class ActiveModel::Railtie < ::Rails::Railtie; end

# Active Model Serializer
#
# Provides a basic serializer implementation that allows you to easily
# control how a given object is going to be serialized. On initialization,
# it expects two objects as arguments, a resource and options. For example,
# one may do in a controller:
#
#     PostSerializer.new(@post, :scope => current_user).to_json
#
# The object to be serialized is the +@post+ and the current user is passed
# in for authorization purposes.
#
# We use the scope to check if a given attribute should be serialized or not.
# For example, some attributes may only be returned if +current_user+ is the
# author of the post:
#
#     class PostSerializer < ActiveModel::Serializer
#       attributes :title, :body
#       has_many :comments
#
#       private
#
#       def attributes
#         hash = super
#         hash.merge!(:email => post.email) if author?
#         hash
#       end
#
#       def author?
#         post.author == scope
#       end
#     end
#
# source://active_model_serializers//lib/active_model/serializer.rb#40
class ActiveModel::Serializer
  extend ::ActiveSupport::DescendantsTracker

  # @return [Serializer] a new instance of Serializer
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#292
  def initialize(object, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/serializer.rb#61
  def _associations; end

  # source://active_model_serializers//lib/active_model/serializer.rb#61
  def _associations=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#61
  def _associations?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#58
  def _attributes; end

  # source://active_model_serializers//lib/active_model/serializer.rb#58
  def _attributes=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#58
  def _attributes?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#65
  def _embed; end

  # source://active_model_serializers//lib/active_model/serializer.rb#65
  def _embed=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#65
  def _embed?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#64
  def _root; end

  # source://active_model_serializers//lib/active_model/serializer.rb#64
  def _root=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#64
  def _root?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#67
  def _root_embed; end

  # source://active_model_serializers//lib/active_model/serializer.rb#67
  def _root_embed=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#67
  def _root_embed?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#478
  def _serializable_hash; end

  # Returns a json representation of the serializable
  # object including the root.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#337
  def as_json(options = T.unsafe(nil)); end

  # Returns a hash representation of the serializable
  # object attributes.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#455
  def attributes; end

  # source://active_model_serializers//lib/active_model/serializer.rb#69
  def cache; end

  # source://active_model_serializers//lib/active_model/serializer.rb#69
  def cache=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#69
  def cache?; end

  # source://active_model_serializers//lib/active_model/serializer.rb#487
  def expand_cache_key(*args); end

  # source://active_model_serializers//lib/active_model/serializer.rb#378
  def include!(name, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#372
  def include?(name); end

  # source://active_model_serializers//lib/active_model/serializer.rb#366
  def include_associations!; end

  # source://active_model_serializers//lib/active_model/serializer.rb#321
  def include_meta(hash); end

  # Use ActiveSupport::Notifications to send events to external systems.
  # The event name is: name.class_name.serializer
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#493
  def instrument(name, payload = T.unsafe(nil), &block); end

  # In some cases, an Array of associations is built by merging the associated
  # content for all of the children. For instance, if a Post has_many comments,
  # which has_many tags, the top-level :tags key will contain the merged list
  # of all tags for all comments of the post.
  #
  # In order to make this efficient, we store a :unique_values hash containing
  # a unique list of all of the objects that are already in the Array. This
  # avoids the need to scan through the Array looking for entries every time
  # we want to merge a new list of values.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#441
  def merge_association(hash, key, serializables, unique_values); end

  # source://active_model_serializers//lib/active_model/serializer.rb#317
  def meta_key; end

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#290
  def object; end

  # Returns the value of attribute options.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#290
  def options; end

  # source://active_model_serializers//lib/active_model/serializer.rb#70
  def perform_caching; end

  # source://active_model_serializers//lib/active_model/serializer.rb#70
  def perform_caching=(_arg0); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#483
  def perform_caching?; end

  def read_attribute_for_serialization(*_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#301
  def root_name; end

  # Returns options[:scope]
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#472
  def scope; end

  # Returns a hash representation of the serializable
  # object without the root.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#353
  def serializable_hash; end

  # source://active_model_serializers//lib/active_model/serializer.rb#325
  def to_json(*args); end

  # source://active_model_serializers//lib/active_model/serializer.rb#313
  def url_options; end

  class << self
    # source://active_model_serializers//lib/active_model/serializer.rb#61
    def _associations; end

    # source://active_model_serializers//lib/active_model/serializer.rb#61
    def _associations=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#61
    def _associations?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#58
    def _attributes; end

    # source://active_model_serializers//lib/active_model/serializer.rb#58
    def _attributes=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#58
    def _attributes?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#65
    def _embed; end

    # source://active_model_serializers//lib/active_model/serializer.rb#65
    def _embed=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#65
    def _embed?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#64
    def _root; end

    # source://active_model_serializers//lib/active_model/serializer.rb#64
    def _root=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#64
    def _root?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#67
    def _root_embed; end

    # source://active_model_serializers//lib/active_model/serializer.rb#67
    def _root_embed=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#67
    def _root_embed?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#115
    def associate(klass, attrs); end

    # source://active_model_serializers//lib/active_model/serializer.rb#92
    def attribute(attr, options = T.unsafe(nil)); end

    # Define attributes to be used in the serialization.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#79
    def attributes(*attrs); end

    # Used internally to create a new serializer object based on controller
    # settings and options for a given resource. These settings are typically
    # set during the request lifecycle or by the controller class, and should
    # not be manually defined for this method.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#260
    def build_json(controller, resource, options); end

    # source://active_model_serializers//lib/active_model/serializer.rb#69
    def cache; end

    # source://active_model_serializers//lib/active_model/serializer.rb#69
    def cache=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#69
    def cache?; end

    # set perform caching like root
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#74
    def cached(value = T.unsafe(nil)); end

    # source://active_model_serializers//lib/active_model/serializer.rb#132
    def define_include_method(name); end

    # Define how associations should be embedded.
    #
    #   embed :objects               # Embed associations as full objects
    #   embed :ids                   # Embed only the association ids
    #   embed :ids, :include => true # Embed the association ids and include objects in the root
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#245
    def embed(type, options = T.unsafe(nil)); end

    # Defines an association in the object should be rendered.
    #
    # The serializer object should implement the association name
    # as a method which should return an array when invoked. If a method
    # with the association name does not exist, the association name is
    # dispatched to the serialized object.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#150
    def has_many(*attrs); end

    # Defines an association in the object should be rendered.
    #
    # The serializer object should implement the association name
    # as a method which should return an object when invoked. If a method
    # with the association name does not exist, the association name is
    # dispatched to the serialized object.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#160
    def has_one(*attrs); end

    # The model class associated with this serializer.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#235
    def model_class; end

    # source://active_model_serializers//lib/active_model/serializer.rb#70
    def perform_caching; end

    # source://active_model_serializers//lib/active_model/serializer.rb#70
    def perform_caching=(value); end

    # source://active_model_serializers//lib/active_model/serializer.rb#70
    def perform_caching?; end

    # Defines the root used on serialization. If false, disables the root.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#251
    def root(name); end

    # Defines the root used on serialization. If false, disables the root.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#251
    def root=(name); end

    # Return a schema hash for the current serializer. This information
    # can be used to generate clients for the serialized output.
    #
    # The schema hash has two keys: +attributes+ and +associations+.
    #
    # The +attributes+ hash looks like this:
    #
    #     { :name => :string, :age => :integer }
    #
    # The +associations+ hash looks like this:
    #     { :posts => { :has_many => :posts } }
    #
    # If :key is used:
    #
    #     class PostsSerializer < ActiveModel::Serializer
    #       has_many :posts, :key => :my_posts
    #     end
    #
    # the hash looks like this:
    #
    #     { :my_posts => { :has_many => :posts }
    #
    # This information is extracted from the serializer's model class,
    # which is provided by +SerializerClass.model_class+.
    #
    # The schema method uses the +columns_hash+ and +reflect_on_association+
    # methods, provided by default by ActiveRecord. You can implement these
    # methods on your custom models if you want the serializer's schema method
    # to work.
    #
    # TODO: This is currently coupled to Active Record. We need to
    # figure out a way to decouple those two.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#196
    def schema; end
  end
end

# source://active_model_serializers//lib/active_model/serializer/associations.rb#3
module ActiveModel::Serializer::Associations; end

# source://active_model_serializers//lib/active_model/serializer/associations.rb#4
class ActiveModel::Serializer::Associations::Config
  # @return [Config] a new instance of Config
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#33
  def initialize(name, source, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#70
  def associated_object; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#74
  def embed_ids?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#82
  def embed_in_root?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#78
  def embed_objects?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#86
  def embeddable?; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#58
  def key; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#66
  def name; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#39
  def option(key, default = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
  def options; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
  def options=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
  def options?; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#62
  def root; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#54
  def source_serializer; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#49
  def target_serializer; end

  protected

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#92
  def find_serializable(object); end

  class << self
    # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
    def options; end

    # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
    def options=(value); end

    # source://active_model_serializers//lib/active_model/serializer/associations.rb#5
    def options?; end

    # source://active_model_serializers//lib/active_model/serializer/associations.rb#7
    def refine(name, class_options); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/associations.rb#103
class ActiveModel::Serializer::Associations::HasMany < ::ActiveModel::Serializer::Associations::Config
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#114
  def embed_key; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#104
  def key; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#128
  def serializables; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#122
  def serialize; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#134
  def serialize_ids; end
end

# source://active_model_serializers//lib/active_model/serializer/associations.rb#146
class ActiveModel::Serializer::Associations::HasOne < ::ActiveModel::Serializer::Associations::Config
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#179
  def embed_key; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#147
  def embeddable?; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#169
  def key; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/associations.rb#155
  def polymorphic?; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#187
  def polymorphic_key; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#159
  def root; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#204
  def serializables; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#191
  def serialize; end

  # source://active_model_serializers//lib/active_model/serializer/associations.rb#210
  def serialize_ids; end
end

# source://active_model_serializers//lib/active_model/serializer.rb#43
ActiveModel::Serializer::INCLUDE_METHODS = T.let(T.unsafe(nil), Hash)

# source://active_model_serializers//lib/active_model/serializer.rb#44
ActiveModel::Serializer::INSTRUMENT = T.let(T.unsafe(nil), Hash)

# source://active_model_serializers//lib/active_model/serializer.rb#46
class ActiveModel::Serializer::IncludeError < ::StandardError
  # @return [IncludeError] a new instance of IncludeError
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#49
  def initialize(source, association); end

  # Returns the value of attribute association.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#47
  def association; end

  # Returns the value of attribute source.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#47
  def source; end

  # source://active_model_serializers//lib/active_model/serializer.rb#53
  def to_s; end
end

# source://active_model_serializers//lib/active_model_serializers.rb#38
module ActiveModel::SerializerSupport
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::SerializerSupport::ClassMethods

  # Returns a model serializer for this object considering its namespace.
  #
  # source://active_model_serializers//lib/active_model_serializers.rb#58
  def active_model_serializer; end

  def read_attribute_for_serialization(*_arg0); end
end

# source://active_model_serializers//lib/active_model_serializers.rb#41
module ActiveModel::SerializerSupport::ClassMethods
  # source://active_model_serializers//lib/active_model_serializers.rb#43
  def active_model_serializer; end
end

class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  include ::ActiveModel::SerializerSupport
  extend ::ActiveModel::SerializerSupport::ClassMethods
end

class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::ArraySerializerSupport
end

class Array
  include ::Enumerable
  include ::ActiveModel::ArraySerializerSupport
end

class Set
  include ::Enumerable
  include ::ActiveModel::ArraySerializerSupport
end
