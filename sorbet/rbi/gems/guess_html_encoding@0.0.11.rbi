# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guess_html_encoding` gem.
# Please instead update this file by running `bin/tapioca gem guess_html_encoding`.

# A small and simple library for guessing the encoding of HTML in Ruby 1.9.
#
# source://guess_html_encoding//lib/guess_html_encoding/version.rb#1
module GuessHtmlEncoding
  class << self
    # Force an HTML string into a guessed encoding.
    #
    # source://guess_html_encoding//lib/guess_html_encoding.rb#41
    def encode(html, headers = T.unsafe(nil)); end

    # Is this encoding loaded?
    #
    # @return [Boolean]
    #
    # source://guess_html_encoding//lib/guess_html_encoding.rb#53
    def encoding_loaded?(encoding); end

    # Guess the encoding of an HTML string, using HTTP headers if provided.  HTTP headers can be a string or a hash.
    #
    # source://guess_html_encoding//lib/guess_html_encoding.rb#6
    def guess(html, headers = T.unsafe(nil)); end
  end
end

# source://guess_html_encoding//lib/guess_html_encoding.rb#57
class GuessHtmlEncoding::HTMLScanner
  # @return [HTMLScanner] a new instance of HTMLScanner
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#59
  def initialize(html); end

  # Returns the encoding sniffed from the content of an HTML page, as determined using an
  # implemention of the algorithm to 'prescan a byte stream to determine its encoding', as
  # specified by the HTML specification:
  # http://www.w3.org/html/wg/drafts/html/master/syntax.html#prescan-a-byte-stream-to-determine-its-encoding
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#67
  def encoding; end

  private

  # Given a string, returns the first attribute in the sting (as a hash), and
  # the position of the next character in the string
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#199
  def attribute(string); end

  # Given a string, this returns the attribute value from the start of the string,
  # and the position of the following character in the string
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#265
  def attribute_value(string); end

  # Given a string which starts with the space or slash following a `<meta`,
  # look for a charset and returns it along with the position of the next
  # character following the closing `>` character
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#116
  def charset_from_meta(string); end

  # Given a string representing the 'content' attribute value of a meta tag
  # with an `http-equiv` attribute, returns the charset specified within that
  # value, or nil.
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#179
  def charset_from_meta_content(string); end

  # Downcases the A-Z characters only (eg not É -> é)
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#329
  def downcase_A_to_Z_only(string); end

  # Given a string, at the start of which is quoted attribute value, returns
  # that attribute value, and the position of the next character in the string
  # (following the second matching quote mark)
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#299
  def quoted_value(string); end

  # Given a string, at the start of which is an unquoted attribute value, returns
  # that attribute value, and the position of the next character in the string
  #
  # source://guess_html_encoding//lib/guess_html_encoding.rb#323
  def unquoted_value(string); end
end

# source://guess_html_encoding//lib/guess_html_encoding/version.rb#2
GuessHtmlEncoding::VERSION = T.let(T.unsafe(nil), String)
