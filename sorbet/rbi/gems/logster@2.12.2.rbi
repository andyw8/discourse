# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `logster` gem.
# Please instead update this file by running `bin/tapioca gem logster`.

# source://logster//lib/logster/version.rb#3
module Logster
  class << self
    # source://logster//lib/logster.rb#47
    def add_to_env(env, key, value); end

    # source://logster//lib/logster.rb#43
    def config; end

    # source://logster//lib/logster.rb#39
    def config=(config); end

    # source://logster//lib/logster.rb#27
    def logger; end

    # source://logster//lib/logster.rb#23
    def logger=(logger); end

    # source://logster//lib/logster.rb#52
    def set_environments(envs); end

    # source://logster//lib/logster.rb#35
    def store; end

    # source://logster//lib/logster.rb#31
    def store=(store); end
  end
end

# source://logster//lib/logster/base_store.rb#4
class Logster::BaseStore
  # @return [BaseStore] a new instance of BaseStore
  #
  # source://logster//lib/logster/base_store.rb#8
  def initialize; end

  # Returns the value of attribute allow_custom_patterns.
  #
  # source://logster//lib/logster/base_store.rb#6
  def allow_custom_patterns; end

  # Sets the attribute allow_custom_patterns
  #
  # @param value the value to set the attribute allow_custom_patterns to.
  #
  # source://logster//lib/logster/base_store.rb#6
  def allow_custom_patterns=(_arg0); end

  # Delete messages associated with given message_keys
  #
  # source://logster//lib/logster/base_store.rb#76
  def bulk_delete(message_keys, grouping_keys); end

  # Get a group of messages by their message_keys
  #
  # source://logster//lib/logster/base_store.rb#52
  def bulk_get(message_keys); end

  # Checks all the existing rate limiters to check if any has been exceeded
  #
  # source://logster//lib/logster/base_store.rb#97
  def check_rate_limits(severity); end

  # Delete all unprotected messages in the store.
  #
  # source://logster//lib/logster/base_store.rb#37
  def clear; end

  # Delete all messages, including protected messages.
  #
  # source://logster//lib/logster/base_store.rb#42
  def clear_all; end

  # source://logster//lib/logster/base_store.rb#244
  def clear_patterns_cache(key); end

  # The number of messages currently stored.
  #
  # source://logster//lib/logster/base_store.rb#32
  def count; end

  # source://logster//lib/logster/base_store.rb#71
  def delete(message_key); end

  # find all pattern groups; returns an array of Logster::Group
  #
  # source://logster//lib/logster/base_store.rb#137
  def find_pattern_groups(load_messages: T.unsafe(nil)); end

  # Get a message by its message_key
  #
  # source://logster//lib/logster/base_store.rb#47
  def get(message_key, load_env: T.unsafe(nil)); end

  # returns a hash that maps patterns to the number of messages they
  # have suppressed
  #
  # source://logster//lib/logster/base_store.rb#128
  def get_all_ignore_count; end

  # Get all messages that you have in the store
  #
  # source://logster//lib/logster/base_store.rb#57
  def get_all_messages; end

  # Get a message's env by its message_key
  #
  # source://logster//lib/logster/base_store.rb#62
  def get_env(message_key); end

  # returns an array of strings each of which must be convertible to regexp
  #
  # source://logster//lib/logster/base_store.rb#112
  def get_patterns(set_name); end

  # Returns the value of attribute ignore.
  #
  # source://logster//lib/logster/base_store.rb#6
  def ignore; end

  # Sets the attribute ignore
  #
  # @param value the value to set the attribute ignore to.
  #
  # source://logster//lib/logster/base_store.rb#6
  def ignore=(_arg0); end

  # increments the number of messages that have been suppressed by a pattern
  #
  # source://logster//lib/logster/base_store.rb#117
  def increment_ignore_count(pattern); end

  # takes a string as `pattern` and places it under the set `set_name`
  #
  # source://logster//lib/logster/base_store.rb#102
  def insert_pattern(set_name, pattern); end

  # Returns the value of attribute level.
  #
  # source://logster//lib/logster/base_store.rb#6
  def level; end

  # Sets the attribute level
  #
  # @param value the value to set the attribute level to.
  #
  # source://logster//lib/logster/base_store.rb#6
  def level=(_arg0); end

  # Returns the value of attribute max_retention.
  #
  # source://logster//lib/logster/base_store.rb#6
  def max_retention; end

  # Sets the attribute max_retention
  #
  # @param value the value to set the attribute max_retention to.
  #
  # source://logster//lib/logster/base_store.rb#6
  def max_retention=(_arg0); end

  # Mark a message as protected; i.e. it is not deleted by the #clear method
  #
  # source://logster//lib/logster/base_store.rb#67
  def protect(message_key); end

  # @return [Boolean]
  #
  # source://logster//lib/logster/base_store.rb#132
  def rate_limited?(ip_address, perform: T.unsafe(nil), limit: T.unsafe(nil)); end

  # Registers a rate limit on the given severities of logs
  #
  # source://logster//lib/logster/base_store.rb#92
  def register_rate_limit(severities, limit, duration, &block); end

  # removes number of suppressed messages by a pattern
  #
  # source://logster//lib/logster/base_store.rb#122
  def remove_ignore_count(pattern); end

  # takes a string as `pattern` and removes it from the set `set_name`
  #
  # source://logster//lib/logster/base_store.rb#107
  def remove_pattern(set_name, pattern); end

  # removes the Logster::Group instance associated with the given pattern
  #
  # source://logster//lib/logster/base_store.rb#147
  def remove_pattern_group(pattern); end

  # Modify the saved message to the given one (identified by message.key) and bump it to the top of the latest list
  #
  # source://logster//lib/logster/base_store.rb#21
  def replace_and_bump(message); end

  # source://logster//lib/logster/base_store.rb#151
  def report(severity, progname, msg, opts = T.unsafe(nil)); end

  # Save a new message at the front of the latest list.
  #
  # source://logster//lib/logster/base_store.rb#16
  def save(message); end

  # saves an instance of Logster::Group
  #
  # source://logster//lib/logster/base_store.rb#142
  def save_pattern_group(group); end

  # Check if another message with the same grouping_key is already stored.
  # Returns the similar message's message.key
  #
  # source://logster//lib/logster/base_store.rb#27
  def similar_key(message); end

  # Returns the value of attribute skip_empty.
  #
  # source://logster//lib/logster/base_store.rb#6
  def skip_empty; end

  # Sets the attribute skip_empty
  #
  # @param value the value to set the attribute skip_empty to.
  #
  # source://logster//lib/logster/base_store.rb#6
  def skip_empty=(_arg0); end

  # Solve a particular message, causing all old messages with matching version and backtrace
  # to be deleted (report should delete any solved messages when called)
  #
  # source://logster//lib/logster/base_store.rb#87
  def solve(message_key); end

  # Clear the protected mark for a message.
  #
  # source://logster//lib/logster/base_store.rb#81
  def unprotect(message_key); end

  private

  # source://logster//lib/logster/base_store.rb#255
  def not_implemented; end

  # source://logster//lib/logster/base_store.rb#250
  def truncate_message(msg); end
end

# source://logster//lib/logster/cache.rb#4
class Logster::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://logster//lib/logster/cache.rb#5
  def initialize(age = T.unsafe(nil)); end

  # source://logster//lib/logster/cache.rb#17
  def clear(key); end

  # source://logster//lib/logster/cache.rb#10
  def fetch(key); end
end

# source://logster//lib/logster/configuration.rb#4
class Logster::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://logster//lib/logster/configuration.rb#27
  def initialize; end

  # Returns the value of attribute allow_grouping.
  #
  # source://logster//lib/logster/configuration.rb#5
  def allow_grouping; end

  # Sets the attribute allow_grouping
  #
  # @param value the value to set the attribute allow_grouping to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def allow_grouping=(_arg0); end

  # Returns the value of attribute application_version.
  #
  # source://logster//lib/logster/configuration.rb#5
  def application_version; end

  # Sets the attribute application_version
  #
  # @param value the value to set the attribute application_version to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def application_version=(_arg0); end

  # Returns the value of attribute current_context.
  #
  # source://logster//lib/logster/configuration.rb#5
  def current_context; end

  # Sets the attribute current_context
  #
  # @param value the value to set the attribute current_context to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def current_context=(_arg0); end

  # Returns the value of attribute enable_backtrace_links.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_backtrace_links; end

  # Sets the attribute enable_backtrace_links
  #
  # @param value the value to set the attribute enable_backtrace_links to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_backtrace_links=(_arg0); end

  # Returns the value of attribute enable_custom_patterns_via_ui.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_custom_patterns_via_ui; end

  # Sets the attribute enable_custom_patterns_via_ui
  #
  # @param value the value to set the attribute enable_custom_patterns_via_ui to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_custom_patterns_via_ui=(_arg0); end

  # Returns the value of attribute enable_js_error_reporting.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_js_error_reporting; end

  # Sets the attribute enable_js_error_reporting
  #
  # @param value the value to set the attribute enable_js_error_reporting to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def enable_js_error_reporting=(_arg0); end

  # Returns the value of attribute env_expandable_keys.
  #
  # source://logster//lib/logster/configuration.rb#5
  def env_expandable_keys; end

  # Sets the attribute env_expandable_keys
  #
  # @param value the value to set the attribute env_expandable_keys to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def env_expandable_keys=(_arg0); end

  # Returns the value of attribute environments.
  #
  # source://logster//lib/logster/configuration.rb#5
  def environments; end

  # Sets the attribute environments
  #
  # @param value the value to set the attribute environments to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def environments=(_arg0); end

  # Returns the value of attribute gems_dir.
  #
  # source://logster//lib/logster/configuration.rb#5
  def gems_dir; end

  # Sets the attribute gems_dir
  #
  # @param value the value to set the attribute gems_dir to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def gems_dir=(_arg0); end

  # Returns the value of attribute max_env_bytes.
  #
  # source://logster//lib/logster/configuration.rb#5
  def max_env_bytes; end

  # Sets the attribute max_env_bytes
  #
  # @param value the value to set the attribute max_env_bytes to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def max_env_bytes=(_arg0); end

  # Returns the value of attribute max_env_count_per_message.
  #
  # source://logster//lib/logster/configuration.rb#5
  def max_env_count_per_message; end

  # Sets the attribute max_env_count_per_message
  #
  # @param value the value to set the attribute max_env_count_per_message to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def max_env_count_per_message=(_arg0); end

  # Returns the value of attribute maximum_message_length.
  #
  # source://logster//lib/logster/configuration.rb#5
  def maximum_message_length; end

  # Sets the attribute maximum_message_length
  #
  # @param value the value to set the attribute maximum_message_length to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def maximum_message_length=(_arg0); end

  # Returns the value of attribute maximum_message_size_bytes.
  #
  # source://logster//lib/logster/configuration.rb#5
  def maximum_message_size_bytes; end

  # Sets the attribute maximum_message_size_bytes
  #
  # @param value the value to set the attribute maximum_message_size_bytes to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def maximum_message_size_bytes=(_arg0); end

  # Returns the value of attribute project_directories.
  #
  # source://logster//lib/logster/configuration.rb#5
  def project_directories; end

  # Sets the attribute project_directories
  #
  # @param value the value to set the attribute project_directories to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def project_directories=(_arg0); end

  # Returns the value of attribute rate_limit_error_reporting.
  #
  # source://logster//lib/logster/configuration.rb#5
  def rate_limit_error_reporting; end

  # Sets the attribute rate_limit_error_reporting
  #
  # @param value the value to set the attribute rate_limit_error_reporting to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def rate_limit_error_reporting=(_arg0); end

  # source://logster//lib/logster/configuration.rb#52
  def subdirectory; end

  # Sets the attribute subdirectory
  #
  # @param value the value to set the attribute subdirectory to.
  #
  # source://logster//lib/logster/configuration.rb#25
  def subdirectory=(_arg0); end

  # Returns the value of attribute use_full_hostname.
  #
  # source://logster//lib/logster/configuration.rb#5
  def use_full_hostname; end

  # Sets the attribute use_full_hostname
  #
  # @param value the value to set the attribute use_full_hostname to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def use_full_hostname=(_arg0); end

  # Returns the value of attribute web_title.
  #
  # source://logster//lib/logster/configuration.rb#5
  def web_title; end

  # Sets the attribute web_title
  #
  # @param value the value to set the attribute web_title to.
  #
  # source://logster//lib/logster/configuration.rb#5
  def web_title=(_arg0); end
end

# source://logster//lib/logster/group.rb#4
class Logster::Group
  # @return [Group] a new instance of Group
  #
  # source://logster//lib/logster/group.rb#10
  def initialize(key, messages_keys = T.unsafe(nil), timestamp: T.unsafe(nil), count: T.unsafe(nil)); end

  # source://logster//lib/logster/group.rb#58
  def add_message(message); end

  # Returns the value of attribute changed.
  #
  # source://logster//lib/logster/group.rb#8
  def changed; end

  # Sets the attribute changed
  #
  # @param value the value to set the attribute changed to.
  #
  # source://logster//lib/logster/group.rb#8
  def changed=(_arg0); end

  # @return [Boolean]
  #
  # source://logster//lib/logster/group.rb#104
  def changed?; end

  # Returns the value of attribute count.
  #
  # source://logster//lib/logster/group.rb#8
  def count; end

  # Sets the attribute count
  #
  # @param value the value to set the attribute count to.
  #
  # source://logster//lib/logster/group.rb#8
  def count=(_arg0); end

  # Returns the value of attribute key.
  #
  # source://logster//lib/logster/group.rb#7
  def key; end

  # Returns the value of attribute messages.
  #
  # source://logster//lib/logster/group.rb#7
  def messages; end

  # source://logster//lib/logster/group.rb#83
  def messages=(messages); end

  # Returns the value of attribute messages_keys.
  #
  # source://logster//lib/logster/group.rb#7
  def messages_keys; end

  # Returns the value of attribute pattern.
  #
  # source://logster//lib/logster/group.rb#8
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value the value to set the attribute pattern to.
  #
  # source://logster//lib/logster/group.rb#8
  def pattern=(_arg0); end

  # source://logster//lib/logster/group.rb#75
  def remove_message(message); end

  # Returns the value of attribute timestamp.
  #
  # source://logster//lib/logster/group.rb#7
  def timestamp; end

  # source://logster//lib/logster/group.rb#34
  def to_h; end

  # source://logster//lib/logster/group.rb#43
  def to_h_web; end

  # source://logster//lib/logster/group.rb#54
  def to_json(opts = T.unsafe(nil)); end

  private

  # source://logster//lib/logster/group.rb#110
  def max_size; end

  class << self
    # source://logster//lib/logster/group.rb#18
    def from_json(json); end

    # source://logster//lib/logster/group.rb#30
    def max_size; end
  end
end

# source://logster//lib/logster/group.rb#114
class Logster::Group::GroupWeb < ::Struct
  def count; end
  def count=(_); end

  # source://logster//lib/logster/group.rb#119
  def key; end

  def messages; end
  def messages=(_); end
  def regex; end
  def regex=(_); end
  def row_id; end
  def row_id=(_); end
  def timestamp; end
  def timestamp=(_); end

  # source://logster//lib/logster/group.rb#115
  def to_json(opts = T.unsafe(nil)); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://logster//lib/logster/group.rb#5
Logster::Group::MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://logster//lib/logster/grouping_pattern.rb#4
class Logster::GroupingPattern < ::Logster::Pattern
  # arg used in tests
  #
  # source://logster//lib/logster/grouping_pattern.rb#24
  def destroy(clear_cache: T.unsafe(nil)); end

  # source://logster//lib/logster/grouping_pattern.rb#10
  def save(args = T.unsafe(nil)); end

  class << self
    # source://logster//lib/logster/grouping_pattern.rb#6
    def set_name; end
  end
end

# source://logster//lib/logster/grouping_pattern.rb#5
Logster::GroupingPattern::CACHE_KEY = T.let(T.unsafe(nil), Symbol)

# source://logster//lib/logster/ignore_pattern.rb#4
class Logster::IgnorePattern
  # @return [IgnorePattern] a new instance of IgnorePattern
  #
  # source://logster//lib/logster/ignore_pattern.rb#6
  def initialize(message_pattern = T.unsafe(nil), env_patterns = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://logster//lib/logster/ignore_pattern.rb#15
  def matches?(message); end

  # source://logster//lib/logster/ignore_pattern.rb#27
  def to_s; end

  private

  # source://logster//lib/logster/ignore_pattern.rb#33
  def compare(message, pattern); end

  # source://logster//lib/logster/ignore_pattern.rb#52
  def compare_hash(message_hash, pattern_hash); end

  # source://logster//lib/logster/ignore_pattern.rb#60
  def get_indifferent(hash, key); end

  class << self
    # source://logster//lib/logster/ignore_pattern.rb#11
    def from_message_and_request_uri(msg, request); end
  end
end

# source://logster//lib/logster/logger.rb#6
class Logster::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://logster//lib/logster/logger.rb#12
  def initialize(store); end

  # source://logster//lib/logster/logger.rb#49
  def add(*args, &block); end

  # source://logster//lib/logster/logger.rb#32
  def add_to_chained(logger, severity, message, progname, opts = T.unsafe(nil), &block); end

  # source://logster//lib/logster/logger.rb#57
  def add_with_opts(severity, message = T.unsafe(nil), progname = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://logster//lib/logster/logger.rb#28
  def chain(logger); end

  # Returns the value of attribute chained.
  #
  # source://logster//lib/logster/logger.rb#10
  def chained; end

  # source://logster//lib/logster/logger.rb#53
  def level; end

  # source://logster//lib/logster/logger.rb#24
  def override_level; end

  # source://logster//lib/logster/logger.rb#20
  def override_level=(val); end

  # Returns the value of attribute skip_store.
  #
  # source://logster//lib/logster/logger.rb#9
  def skip_store; end

  # Sets the attribute skip_store
  #
  # @param value the value to set the attribute skip_store to.
  #
  # source://logster//lib/logster/logger.rb#9
  def skip_store=(_arg0); end

  # Returns the value of attribute store.
  #
  # source://logster//lib/logster/logger.rb#9
  def store; end

  # Sets the attribute store
  #
  # @param value the value to set the attribute store to.
  #
  # source://logster//lib/logster/logger.rb#9
  def store=(_arg0); end

  private

  # source://logster//lib/logster/logger.rb#122
  def report_to_store(severity, progname, message, opts = T.unsafe(nil)); end
end

# source://logster//lib/logster/logger.rb#7
Logster::Logger::LOGSTER_ENV = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/message.rb#7
class Logster::Message
  # @return [Message] a new instance of Message
  #
  # source://logster//lib/logster/message.rb#27
  def initialize(severity, progname, message, timestamp = T.unsafe(nil), key = T.unsafe(nil), count: T.unsafe(nil)); end

  # source://logster//lib/logster/message.rb#204
  def <=>(other); end

  # source://logster//lib/logster/message.rb#211
  def =~(pattern); end

  # source://logster//lib/logster/message.rb#249
  def apply_env_size_limit(size_limit); end

  # source://logster//lib/logster/message.rb#257
  def apply_message_size_limit(limit, gems_dir: T.unsafe(nil)); end

  # Returns the value of attribute backtrace.
  #
  # source://logster//lib/logster/message.rb#24
  def backtrace; end

  # Sets the attribute backtrace
  #
  # @param value the value to set the attribute backtrace to.
  #
  # source://logster//lib/logster/message.rb#24
  def backtrace=(_arg0); end

  # Returns the value of attribute count.
  #
  # source://logster//lib/logster/message.rb#24
  def count; end

  # Sets the attribute count
  #
  # @param value the value to set the attribute count to.
  #
  # source://logster//lib/logster/message.rb#24
  def count=(_arg0); end

  # source://logster//lib/logster/message.rb#243
  def drop_redundant_envs(limit); end

  # Returns the value of attribute env.
  #
  # source://logster//lib/logster/message.rb#25
  def env; end

  # source://logster//lib/logster/message.rb#78
  def env=(env); end

  # Returns the value of attribute env_buffer.
  #
  # source://logster//lib/logster/message.rb#24
  def env_buffer; end

  # Sets the attribute env_buffer
  #
  # @param value the value to set the attribute env_buffer to.
  #
  # source://logster//lib/logster/message.rb#24
  def env_buffer=(_arg0); end

  # Returns the value of attribute first_timestamp.
  #
  # source://logster//lib/logster/message.rb#24
  def first_timestamp; end

  # Sets the attribute first_timestamp
  #
  # @param value the value to set the attribute first_timestamp to.
  #
  # source://logster//lib/logster/message.rb#24
  def first_timestamp=(_arg0); end

  # in its own method so it can be overridden
  #
  # source://logster//lib/logster/message.rb#121
  def grouping_hash; end

  # todo - memoize?
  #
  # source://logster//lib/logster/message.rb#127
  def grouping_key; end

  # @return [Boolean]
  #
  # source://logster//lib/logster/message.rb#164
  def has_env_buffer?; end

  # Returns the value of attribute key.
  #
  # source://logster//lib/logster/message.rb#24
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://logster//lib/logster/message.rb#24
  def key=(_arg0); end

  # source://logster//lib/logster/message.rb#147
  def merge_similar_message(other); end

  # Returns the value of attribute message.
  #
  # source://logster//lib/logster/message.rb#25
  def message; end

  # source://logster//lib/logster/message.rb#92
  def populate_from_env(env); end

  # Returns the value of attribute progname.
  #
  # source://logster//lib/logster/message.rb#24
  def progname; end

  # Sets the attribute progname
  #
  # @param value the value to set the attribute progname to.
  #
  # source://logster//lib/logster/message.rb#24
  def progname=(_arg0); end

  # Returns the value of attribute protected.
  #
  # source://logster//lib/logster/message.rb#24
  def protected; end

  # Sets the attribute protected
  #
  # @param value the value to set the attribute protected to.
  #
  # source://logster//lib/logster/message.rb#24
  def protected=(_arg0); end

  # Returns the value of attribute severity.
  #
  # source://logster//lib/logster/message.rb#24
  def severity; end

  # Sets the attribute severity
  #
  # @param value the value to set the attribute severity to.
  #
  # source://logster//lib/logster/message.rb#24
  def severity=(_arg0); end

  # todo - memoize?
  #
  # source://logster//lib/logster/message.rb#132
  def solved_keys; end

  # Returns the value of attribute timestamp.
  #
  # source://logster//lib/logster/message.rb#24
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value the value to set the attribute timestamp to.
  #
  # source://logster//lib/logster/message.rb#24
  def timestamp=(_arg0); end

  # source://logster//lib/logster/message.rb#40
  def to_h(exclude_env: T.unsafe(nil)); end

  # source://logster//lib/logster/message.rb#58
  def to_json(opts = T.unsafe(nil)); end

  # source://logster//lib/logster/message.rb#269
  def truncate_backtrace(bytes_limit); end

  protected

  # source://logster//lib/logster/message.rb#311
  def get_timestamp; end

  # source://logster//lib/logster/message.rb#278
  def truncate_env(env, limit); end

  class << self
    # source://logster//lib/logster/message.rb#111
    def default_env; end

    # source://logster//lib/logster/message.rb#63
    def from_json(json); end

    # source://logster//lib/logster/message.rb#82
    def hostname; end

    # source://logster//lib/logster/message.rb#178
    def populate_env_helper(env); end

    # source://logster//lib/logster/message.rb#168
    def populate_from_env(env); end

    # source://logster//lib/logster/message.rb#226
    def scrub_params(params); end
  end
end

# source://logster//lib/logster/message.rb#9
Logster::Message::ALLOWED_ENV = T.let(T.unsafe(nil), Array)

# source://logster//lib/logster/message.rb#8
Logster::Message::LOGSTER_ENV = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/middleware/viewer.rb#6
module Logster::Middleware; end

# source://logster//lib/logster/middleware/viewer.rb#7
class Logster::Middleware::Viewer
  # @return [Viewer] a new instance of Viewer
  #
  # source://logster//lib/logster/middleware/viewer.rb#13
  def initialize(app); end

  # source://logster//lib/logster/middleware/viewer.rb#24
  def call(env); end

  protected

  # source://logster//lib/logster/middleware/viewer.rb#361
  def body(preload = T.unsafe(nil)); end

  # source://logster//lib/logster/middleware/viewer.rb#313
  def css(name, attrs = T.unsafe(nil)); end

  # source://logster//lib/logster/middleware/viewer.rb#273
  def get_class(set_name); end

  # source://logster//lib/logster/middleware/viewer.rb#292
  def method_not_allowed(allowed_methods); end

  # source://logster//lib/logster/middleware/viewer.rb#288
  def not_allowed(message = T.unsafe(nil)); end

  # source://logster//lib/logster/middleware/viewer.rb#284
  def not_found(message = T.unsafe(nil)); end

  # source://logster//lib/logster/middleware/viewer.rb#299
  def parse_regex(string); end

  # source://logster//lib/logster/middleware/viewer.rb#330
  def preload_backtrace_data; end

  # source://logster//lib/logster/middleware/viewer.rb#344
  def preloaded_data; end

  # source://logster//lib/logster/middleware/viewer.rb#307
  def resolve_path(path); end

  # source://logster//lib/logster/middleware/viewer.rb#321
  def script(prod, dev = T.unsafe(nil)); end

  # source://logster//lib/logster/middleware/viewer.rb#195
  def serve_file(env, path); end

  # source://logster//lib/logster/middleware/viewer.rb#202
  def serve_messages(req); end

  # source://logster//lib/logster/middleware/viewer.rb#326
  def to_json_and_escape(payload); end

  # source://logster//lib/logster/middleware/viewer.rb#236
  def update_patterns(set_name, req); end
end

# source://logster//lib/logster/middleware/viewer.rb#9
Logster::Middleware::Viewer::PATH_INFO = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/middleware/viewer.rb#11
Logster::Middleware::Viewer::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/middleware/viewer.rb#10
Logster::Middleware::Viewer::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/pattern.rb#4
class Logster::Pattern
  # @return [Pattern] a new instance of Pattern
  #
  # source://logster//lib/logster/pattern.rb#60
  def initialize(pattern, store: T.unsafe(nil)); end

  # source://logster//lib/logster/pattern.rb#86
  def destroy; end

  # @raise [PatternError]
  #
  # source://logster//lib/logster/pattern.rb#78
  def modify(new_pattern); end

  # source://logster//lib/logster/pattern.rb#90
  def pattern; end

  # source://logster//lib/logster/pattern.rb#73
  def save(args = T.unsafe(nil)); end

  # source://logster//lib/logster/pattern.rb#69
  def to_s; end

  # @return [Boolean]
  #
  # source://logster//lib/logster/pattern.rb#65
  def valid?; end

  private

  # @raise [PatternError]
  #
  # source://logster//lib/logster/pattern.rb#104
  def ensure_valid!; end

  # source://logster//lib/logster/pattern.rb#96
  def pattern=(new_pattern); end

  # source://logster//lib/logster/pattern.rb#100
  def set_name; end

  class << self
    # source://logster//lib/logster/pattern.rb#14
    def child_classes; end

    # source://logster//lib/logster/pattern.rb#46
    def find(pattern, store: T.unsafe(nil)); end

    # source://logster//lib/logster/pattern.rb#35
    def find_all(raw: T.unsafe(nil), store: T.unsafe(nil)); end

    # @private
    #
    # source://logster//lib/logster/pattern.rb#9
    def inherited(subclass); end

    # source://logster//lib/logster/pattern.rb#22
    def parse_pattern(string); end

    # source://logster//lib/logster/pattern.rb#18
    def set_name; end

    # @return [Boolean]
    #
    # source://logster//lib/logster/pattern.rb#54
    def valid?(pattern); end
  end
end

# source://logster//lib/logster/pattern.rb#7
class Logster::Pattern::PatternError < ::StandardError; end

# source://logster//lib/logster/rails/railtie.rb#3
module Logster::Rails
  class << self
    # source://logster//lib/logster/rails/railtie.rb#31
    def initialize!(app); end

    # source://logster//lib/logster/rails/railtie.rb#9
    def set_logger(config); end
  end
end

# source://logster//lib/logster/rails/railtie.rb#6
class Logster::Rails::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://logster//lib/logster/rails/railtie.rb#57
class Logster::Rails::Railtie < ::Rails::Railtie; end

# source://logster//lib/logster/redis_rate_limiter.rb#4
class Logster::RedisRateLimiter
  # @return [RedisRateLimiter] a new instance of RedisRateLimiter
  #
  # source://logster//lib/logster/redis_rate_limiter.rb#21
  def initialize(redis, severities, limit, duration, redis_prefix = T.unsafe(nil), callback = T.unsafe(nil)); end

  # Returns the value of attribute callback.
  #
  # source://logster//lib/logster/redis_rate_limiter.rb#8
  def callback; end

  # source://logster//lib/logster/redis_rate_limiter.rb#77
  def callback_key; end

  # source://logster//lib/logster/redis_rate_limiter.rb#36
  def check(severity); end

  # Returns the value of attribute duration.
  #
  # source://logster//lib/logster/redis_rate_limiter.rb#8
  def duration; end

  # source://logster//lib/logster/redis_rate_limiter.rb#71
  def key; end

  # source://logster//lib/logster/redis_rate_limiter.rb#32
  def retrieve_rate; end

  private

  # source://logster//lib/logster/redis_rate_limiter.rb#106
  def bucket_expiry(time); end

  # source://logster//lib/logster/redis_rate_limiter.rb#102
  def bucket_number(time); end

  # source://logster//lib/logster/redis_rate_limiter.rb#92
  def key_prefix; end

  # source://logster//lib/logster/redis_rate_limiter.rb#96
  def mget_keys(bucket_num); end

  class << self
    # source://logster//lib/logster/redis_rate_limiter.rb#10
    def clear_all(redis, redis_prefix = T.unsafe(nil)); end

    # source://logster//lib/logster/redis_rate_limiter.rb#83
    def key_prefix(redis_prefix); end
  end
end

# source://logster//lib/logster/redis_rate_limiter.rb#5
Logster::RedisRateLimiter::BUCKETS = T.let(T.unsafe(nil), Integer)

# source://logster//lib/logster/redis_rate_limiter.rb#6
Logster::RedisRateLimiter::PREFIX = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/redis_store.rb#9
class Logster::RedisStore < ::Logster::BaseStore
  # @return [RedisStore] a new instance of RedisStore
  #
  # source://logster//lib/logster/redis_store.rb#15
  def initialize(redis = T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#56
  def bulk_delete(message_keys, grouping_keys); end

  # source://logster//lib/logster/redis_store.rb#247
  def bulk_get(message_keys, with_env: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#165
  def clear; end

  # Delete everything, included protected messages
  # (use in tests)
  #
  # source://logster//lib/logster/redis_store.rb#206
  def clear_all; end

  # source://logster//lib/logster/redis_store.rb#93
  def count; end

  # source://logster//lib/logster/redis_store.rb#42
  def delete(msg); end

  # source://logster//lib/logster/redis_store.rb#359
  def find_pattern_groups(load_messages: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#224
  def get(message_key, load_env: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#340
  def get_all_ignore_count; end

  # source://logster//lib/logster/redis_store.rb#235
  def get_all_messages(with_env: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#276
  def get_env(message_key); end

  # source://logster//lib/logster/redis_store.rb#328
  def get_patterns(set_name); end

  # source://logster//lib/logster/redis_store.rb#332
  def increment_ignore_count(pattern); end

  # source://logster//lib/logster/redis_store.rb#320
  def insert_pattern(set_name, pattern); end

  # source://logster//lib/logster/redis_store.rb#107
  def latest(opts = T.unsafe(nil)); end

  # Returns the value of attribute max_backlog.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def max_backlog; end

  # Sets the attribute max_backlog
  #
  # @param value the value to set the attribute max_backlog to.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def max_backlog=(_arg0); end

  # source://logster//lib/logster/redis_store.rb#282
  def protect(message_key); end

  # @return [Boolean]
  #
  # source://logster//lib/logster/redis_store.rb#344
  def rate_limited?(ip_address, perform: T.unsafe(nil), limit: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#316
  def rate_limits; end

  # Returns the value of attribute redis.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def redis; end

  # Sets the attribute redis
  #
  # @param value the value to set the attribute redis to.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def redis=(_arg0); end

  # source://logster//lib/logster/redis_store.rb#310
  def redis_prefix; end

  # Sets the attribute redis_prefix
  #
  # @param value the value to set the attribute redis_prefix to.
  #
  # source://logster//lib/logster/redis_store.rb#13
  def redis_prefix=(_arg0); end

  # Returns the value of attribute redis_raw_connection.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def redis_raw_connection; end

  # Sets the attribute redis_raw_connection
  #
  # @param value the value to set the attribute redis_raw_connection to.
  #
  # source://logster//lib/logster/redis_store.rb#12
  def redis_raw_connection=(_arg0); end

  # source://logster//lib/logster/redis_store.rb#306
  def register_rate_limit_per_hour(severities, limit, &block); end

  # source://logster//lib/logster/redis_store.rb#302
  def register_rate_limit_per_minute(severities, limit, &block); end

  # source://logster//lib/logster/redis_store.rb#336
  def remove_ignore_count(pattern); end

  # source://logster//lib/logster/redis_store.rb#324
  def remove_pattern(set_name, pattern); end

  # source://logster//lib/logster/redis_store.rb#395
  def remove_pattern_group(pattern); end

  # source://logster//lib/logster/redis_store.rb#72
  def replace_and_bump(message); end

  # source://logster//lib/logster/redis_store.rb#23
  def save(message); end

  # source://logster//lib/logster/redis_store.rb#387
  def save_pattern_group(group, redis: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#89
  def similar_key(message); end

  # source://logster//lib/logster/redis_store.rb#97
  def solve(message_key); end

  # source://logster//lib/logster/redis_store.rb#298
  def solved; end

  # source://logster//lib/logster/redis_store.rb#289
  def unprotect(message_key); end

  protected

  # @return [Boolean]
  #
  # source://logster//lib/logster/redis_store.rb#557
  def array_env_matches?(message, search, exclude); end

  # source://logster//lib/logster/redis_store.rb#571
  def check_rate_limits(severity); end

  # source://logster//lib/logster/redis_store.rb#401
  def clear_solved; end

  # source://logster//lib/logster/redis_store.rb#589
  def env_key; end

  # @return [Boolean]
  #
  # source://logster//lib/logster/redis_store.rb#538
  def env_matches?(env, search); end

  # source://logster//lib/logster/redis_store.rb#526
  def filter_env!(message, search, exclude = T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#515
  def filter_search(row, search); end

  # source://logster//lib/logster/redis_store.rb#464
  def find_location(before, after, limit); end

  # source://logster//lib/logster/redis_store.rb#443
  def find_message(list, message_key); end

  # source://logster//lib/logster/redis_store.rb#506
  def get_search(search); end

  # source://logster//lib/logster/redis_store.rb#597
  def grouping_key; end

  # source://logster//lib/logster/redis_store.rb#585
  def hash_key; end

  # source://logster//lib/logster/redis_store.rb#601
  def ignored_logs_count_key; end

  # source://logster//lib/logster/redis_store.rb#605
  def ip_rate_limit_key(ip_address); end

  # source://logster//lib/logster/redis_store.rb#581
  def list_key; end

  # source://logster//lib/logster/redis_store.rb#609
  def pattern_groups_key; end

  # source://logster//lib/logster/redis_store.rb#593
  def protected_key; end

  # source://logster//lib/logster/redis_store.rb#577
  def solved_key; end

  # source://logster//lib/logster/redis_store.rb#415
  def trim; end

  # source://logster//lib/logster/redis_store.rb#433
  def update_message(message, save_env: T.unsafe(nil), redis: T.unsafe(nil)); end

  private

  # source://logster//lib/logster/redis_store.rb#651
  def delete_env(message_key, redis: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#663
  def env_prefix(key, with_namespace: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#655
  def env_unprefix(key, with_namespace: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#671
  def namespace; end

  # source://logster//lib/logster/redis_store.rb#644
  def push_env(message_key, env, redis: T.unsafe(nil)); end

  # source://logster//lib/logster/redis_store.rb#631
  def register_rate_limit(severities, limit, duration, callback); end

  # source://logster//lib/logster/redis_store.rb#615
  def serialize_group(group, row_id); end
end

# source://logster//lib/logster/redis_store.rb#239
Logster::RedisStore::BULK_ENV_GET_LUA = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/redis_store.rb#10
Logster::RedisStore::ENV_PREFIX = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/suppression_pattern.rb#4
class Logster::SuppressionPattern < ::Logster::Pattern
  # arg used in tests
  #
  # source://logster//lib/logster/suppression_pattern.rb#16
  def destroy(clear_cache: T.unsafe(nil)); end

  # source://logster//lib/logster/suppression_pattern.rb#10
  def save(args = T.unsafe(nil)); end

  private

  # source://logster//lib/logster/suppression_pattern.rb#24
  def retro_delete_messages; end

  class << self
    # source://logster//lib/logster/suppression_pattern.rb#6
    def set_name; end
  end
end

# source://logster//lib/logster/suppression_pattern.rb#5
Logster::SuppressionPattern::CACHE_KEY = T.let(T.unsafe(nil), Symbol)

# source://logster//lib/logster/version.rb#4
Logster::VERSION = T.let(T.unsafe(nil), String)

# source://logster//lib/logster/web.rb#5
class Logster::Web
  class << self
    # source://logster//lib/logster/web.rb#12
    def call(env); end
  end
end

# source://logster//lib/logster/web.rb#6
class Logster::Web::FourOhFour
  # source://logster//lib/logster/web.rb#7
  def call(env); end
end
