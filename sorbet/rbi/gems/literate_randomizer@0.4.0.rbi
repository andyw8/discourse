# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `literate_randomizer` gem.
# Please instead update this file by running `bin/tapioca gem literate_randomizer`.

# Inspiration:
#   http://openmonkey.com/blog/2008/10/23/using-markov-chains-to-provide-english-language-seed-data-for-your-rails-application/
#   by Tim Riley
# by Shane Brinkman-Davis
#
# source://literate_randomizer//lib/literate_randomizer/version.rb#1
module LiterateRandomizer
  class << self
    # Create a new Randomizer instance
    #
    # See LiterateRandomizer::Randomizer#initializer for options.
    #
    # source://literate_randomizer//lib/literate_randomizer.rb#16
    def create(options = T.unsafe(nil)); end

    # Access or initialize the global randomizer instance.
    #
    # The first time this is called, the global instance is created and initialized. Subsequent calls with no parameters just return
    # the global instance. If LiterateRandomize.global is called again with options, a new global instance is created.
    #
    # See LiterateRandomizer::Randomizer#initializer for options.
    #
    # source://literate_randomizer//lib/literate_randomizer.rb#26
    def global(options = T.unsafe(nil)); end

    # Forwards method invocations to the global Randomizer instance. Unless you need more than one instance of Randomizer,
    # this is the easiest way to use LiterateRandomizer.
    #
    # Examples:
    #
    # * LiterateRandomizer.word
    # * LiterateRandomizer.sentence
    # * LiterateRandomizer.paragraph
    # * LiterateRandomizer.paragraphs
    #
    # source://literate_randomizer//lib/literate_randomizer.rb#40
    def method_missing(method, *arguments, &block); end

    # correctly mirrors method_missing
    #
    # @return [Boolean]
    #
    # source://literate_randomizer//lib/literate_randomizer.rb#45
    def respond_to?(method); end
  end
end

# The Markov-Chain bi-gram model. Primary purpose is, given a word, return the next word that is "likely" based on the source material.
#
# source://literate_randomizer//lib/literate_randomizer/markov.rb#9
class LiterateRandomizer::MarkovModel
  # Initialize a new instance.
  #
  # Options:
  #
  # * :randomizer => Random.new # must respond to #rand(limit)
  # * :source_parser => SourceParser.new options
  #
  # @return [MarkovModel] a new instance of MarkovModel
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#91
  def initialize(options = T.unsafe(nil)); end

  # An array of all words that appear at the beginning of sentences in the source-material.
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#20
  def first_words; end

  # Data structure incoding all Markov-Chains (bi-grams) found in the source-material.
  #
  # markov_chains is a hash of hashs. The top level keys are the "first words" in the chain.
  # For each first-word, there are one or more words that followed that word in the text. Second-words are the second-level hash key.
  # The second-level hash values are the count of the number of times that second word followed the first.
  #
  # Summary: {first_words => {second_words => found-in-source-material-in-sequence-count}}
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#29
  def markov_chains; end

  # Given a word, return a weighted-randomly selected next-one.
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#99
  def next_word(word, randomizer = T.unsafe(nil)); end

  # The source of all random values. Must implement: #rand(limit)
  #
  # Default: Random.new()
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#14
  def randomizer; end

  # The source of all random values. Must implement: #rand(limit)
  #
  # Default: Random.new()
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#14
  def randomizer=(_arg0); end

  # an instance of SourceParser attached to the source_material
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#32
  def source_parser; end

  # an instance of SourceParser attached to the source_material
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#32
  def source_parser=(_arg0); end

  # A hash (string => true) of all unique words found in the source-material.
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#17
  def words; end

  private

  # add a word/next_word pair to @markov_chains
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#40
  def chain_add(word, next_word); end

  # cached copy of the options passed in on initialization
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#37
  def init_options; end

  # cached copy of the options passed in on initialization
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#37
  def init_options=(_arg0); end

  # Populate internal data-structures in preparation for #next_word
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#79
  def populate; end

  # populate the @markov_chains hash
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#53
  def populate_markov_chains; end

  # populate the weight-sums for each chain
  # (an optimization)
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#71
  def populate_markov_sum; end

  # remove all dead-end words
  #
  # source://literate_randomizer//lib/literate_randomizer/markov.rb#46
  def prune_markov_words; end
end

# The main class. Each instance has its own random number generator and can work against its own training source-material.
#
# source://literate_randomizer//lib/literate_randomizer/randomizer.rb#4
class LiterateRandomizer::Randomizer
  # Initialize a new instance. Each Markov randomizer instance can run against its own source_material.
  #
  # Options:
  #
  # * :source_material => string OR
  # * :source_material_file => filename
  # * :punctuation_distribution => DEFAULT_PUNCTUATION_DISTRIBUTION
  #   punctiation is randomly selected from this array
  #
  # Advanced options: (primiarilly for testing)
  #
  # * :randomizer => Random.new # must respond to #rand(limit)
  # * :source_parser => SourceParser.new options
  # * :model => MarkovModel.new :source_parser => source_parser
  #
  # @return [Randomizer] a new instance of Randomizer
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#54
  def initialize(options = T.unsafe(nil)); end

  # return a random first word of a sentence
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#74
  def first_word; end

  # Returns a quick summary of the instance.
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#63
  def inspect; end

  # The random-generator model
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#26
  def model; end

  # return a random paragraph
  #
  # Options:
  #
  # * :first_word => nil - the first word of the paragraph
  # * :words => range or int - number of words in sentence
  # * :sentences => range or int - number of sentences in paragraph
  # * :punctuation => nil - punction to end the paragraph with (nil == randomly selected from punctuation_distribution)
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#119
  def paragraph(options = T.unsafe(nil)); end

  # return random paragraphs
  #
  # Options:
  #
  # * :first_word => nil - the first word of the paragraph
  # * :words => range or int - number of words in sentence
  # * :sentences => range or int - number of sentences in paragraph
  # * :paragraphs => range or int - number of paragraphs in paragraph
  # * :join => "\n\n" - join the paragraphs. if :join => false, returns an array of the paragraphs
  # * :punctuation => nil - punction to end the paragraph with (nil == randomly selected from punctuation_distribution)
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#140
  def paragraphs(options = T.unsafe(nil)); end

  # return a random end-sentence string from punctuation_distribution
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#85
  def punctuation; end

  # To end setences, one of the strings in this array is selected at random (uniform-distribution)
  #
  # Default: DEFAULT_PUNCTUATION_DISTRIBUTION
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#20
  def punctuation_distribution; end

  # To end setences, one of the strings in this array is selected at random (uniform-distribution)
  #
  # Default: DEFAULT_PUNCTUATION_DISTRIBUTION
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#20
  def punctuation_distribution=(_arg0); end

  # return a random number generated by randomizer
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#80
  def rand(limit = T.unsafe(nil)); end

  # The source of all random values. Must implement: #rand(limit)
  #
  # Default: Random.new()
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#15
  def randomizer; end

  # The source of all random values. Must implement: #rand(limit)
  #
  # Default: Random.new()
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#15
  def randomizer=(_arg0); end

  # return a random sentence
  #
  # Options:
  #
  # * :first_word => nil - the start word
  # * :words => range or int - number of words in sentence
  # * :punctuation => nil - punction to end the sentence with (nil == randomly selected from punctuation_distribution)
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#96
  def sentence(options = T.unsafe(nil)); end

  # an instance of SourceParser attached to the source_material
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#23
  def source_parser; end

  # return a random word
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#68
  def word; end

  private

  # Check to see if the sentence ends in a PREPOSITION_REGEX word.
  # If so, add more words up to max-words until it does.
  #
  # source://literate_randomizer//lib/literate_randomizer/randomizer.rb#32
  def extend_trailing_preposition(max_words, words); end
end

# The default punctuation distribution. Punctuation is pulled randomly from this array. It can contain any string.
#
# source://literate_randomizer//lib/literate_randomizer/randomizer.rb#6
LiterateRandomizer::Randomizer::DEFAULT_PUNCTUATION_DISTRIBUTION = T.let(T.unsafe(nil), Array)

# LiterateRandomizer prefers to not end sentences with words that match the following regexp:
#
# source://literate_randomizer//lib/literate_randomizer/randomizer.rb#9
LiterateRandomizer::Randomizer::PREPOSITION_REGEX = T.let(T.unsafe(nil), Regexp)

# Parse the source material and provide "each_sentence" - an easy way to walk the source material.
#
# source://literate_randomizer//lib/literate_randomizer/source_parser.rb#4
class LiterateRandomizer::SourceParser
  # Options:
  #
  # * :source_material => string OR
  # * :source_material_file => filename
  #
  # @return [SourceParser] a new instance of SourceParser
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#13
  def initialize(options); end

  # read the default source material included with the gem
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#18
  def default_source_material; end

  # Yields to a block each sentence as an array of words
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#49
  def each_sentence; end

  # clean up all words in  a string, returning an array of clean words
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#44
  def scrub_sentence(sentence); end

  # remove any non-alpha characters from word
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#37
  def scrub_word(word); end

  # Options:
  #
  #     :source_material => string
  #     :source_material_file => filename
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#26
  def source_material(options = T.unsafe(nil)); end

  # Read the source material and split it into sentences
  # NOTE: this re-reads the source material each time. Usually this only needs to happen once and it would waste memory to keep it around.
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#32
  def source_sentences; end

  private

  # Returns the value of attribute init_options.
  #
  # source://literate_randomizer//lib/literate_randomizer/source_parser.rb#6
  def init_options; end
end

# A few utility methods
#
# source://literate_randomizer//lib/literate_randomizer/util.rb#4
class LiterateRandomizer::Util
  class << self
    # return word with the first letter capitalized
    #
    # source://literate_randomizer//lib/literate_randomizer/util.rb#20
    def capitalize(word); end

    # r can be an Integer of a Range. If an intenger, return r, else, return a the maximum value in the range.
    #
    # source://literate_randomizer//lib/literate_randomizer/util.rb#8
    def max(r); end

    # r can be an Integer of a Range. If an intenger, return r, else, return a random number within the range.
    #
    # source://literate_randomizer//lib/literate_randomizer/util.rb#14
    def rand_count(r, randomizer = T.unsafe(nil)); end
  end
end

# the current gem-version
#
# source://literate_randomizer//lib/literate_randomizer/version.rb#3
LiterateRandomizer::VERSION = T.let(T.unsafe(nil), String)
