# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fastimage` gem.
# Please instead update this file by running `bin/tapioca gem fastimage`.

# source://fastimage//lib/fastimage/version.rb#3
class FastImage
  # @return [FastImage] a new instance of FastImage
  #
  # source://fastimage//lib/fastimage.rb#215
  def initialize(uri, options = T.unsafe(nil)); end

  # Returns the value of attribute animated.
  #
  # source://fastimage//lib/fastimage.rb#74
  def animated; end

  # Returns the value of attribute bytes_read.
  #
  # source://fastimage//lib/fastimage.rb#76
  def bytes_read; end

  # Returns the value of attribute content_length.
  #
  # source://fastimage//lib/fastimage.rb#74
  def content_length; end

  # Returns the value of attribute orientation.
  #
  # source://fastimage//lib/fastimage.rb#74
  def orientation; end

  # Returns the value of attribute size.
  #
  # source://fastimage//lib/fastimage.rb#74
  def size; end

  # Returns the value of attribute type.
  #
  # source://fastimage//lib/fastimage.rb#74
  def type; end

  private

  # Some invalid locations need escaping
  #
  # source://fastimage//lib/fastimage.rb#286
  def escaped_location(location); end

  # source://fastimage//lib/fastimage.rb#441
  def fetch_using_base64(uri); end

  # source://fastimage//lib/fastimage.rb#402
  def fetch_using_file_open; end

  # source://fastimage//lib/fastimage.rb#279
  def fetch_using_http; end

  # source://fastimage//lib/fastimage.rb#296
  def fetch_using_http_from_parsed_uri; end

  # source://fastimage//lib/fastimage.rb#377
  def fetch_using_read(readable); end

  # source://fastimage//lib/fastimage.rb#436
  def parse_animated; end

  # source://fastimage//lib/fastimage.rb#1114
  def parse_animated_for_avif; end

  # source://fastimage//lib/fastimage.rb#1093
  def parse_animated_for_gif; end

  # source://fastimage//lib/fastimage.rb#1098
  def parse_animated_for_webp; end

  # source://fastimage//lib/fastimage.rb#409
  def parse_packets(stream); end

  # source://fastimage//lib/fastimage.rb#431
  def parse_size; end

  # source://fastimage//lib/fastimage.rb#748
  def parse_size_for_avif; end

  # source://fastimage//lib/fastimage.rb#883
  def parse_size_for_bmp; end

  # source://fastimage//lib/fastimage.rb#583
  def parse_size_for_cur; end

  # source://fastimage//lib/fastimage.rb#830
  def parse_size_for_gif; end

  # source://fastimage//lib/fastimage.rb#753
  def parse_size_for_heic; end

  # source://fastimage//lib/fastimage.rb#758
  def parse_size_for_heif; end

  # source://fastimage//lib/fastimage.rb#583
  def parse_size_for_ico; end

  # source://fastimage//lib/fastimage.rb#839
  def parse_size_for_jpeg; end

  # source://fastimage//lib/fastimage.rb#835
  def parse_size_for_png; end

  # source://fastimage//lib/fastimage.rb#1014
  def parse_size_for_psd; end

  # source://fastimage//lib/fastimage.rb#1088
  def parse_size_for_svg; end

  # source://fastimage//lib/fastimage.rb#1005
  def parse_size_for_tiff; end

  # source://fastimage//lib/fastimage.rb#897
  def parse_size_for_webp; end

  # source://fastimage//lib/fastimage.rb#912
  def parse_size_vp8; end

  # source://fastimage//lib/fastimage.rb#917
  def parse_size_vp8l; end

  # source://fastimage//lib/fastimage.rb#923
  def parse_size_vp8x; end

  # source://fastimage//lib/fastimage.rb#528
  def parse_type; end

  # @return [Boolean]
  #
  # source://fastimage//lib/fastimage.rb#346
  def protocol_relative_url?(url); end

  # source://fastimage//lib/fastimage.rb#350
  def proxy_uri; end

  # source://fastimage//lib/fastimage.rb#363
  def setup_http; end

  class << self
    # Returns a boolean value indicating the image is animated.
    # It will return nil if the image could not be fetched, or if the image type was not recognised.
    #
    # By default there is a timeout of 2 seconds for opening and reading from a remote server.
    # This can be changed by passing a :timeout => number_of_seconds in the options.
    #
    # If you wish FastImage to raise if it cannot find the type of the image for any reason, then pass
    # :raise_on_failure => true in the options.
    #
    # === Example
    #
    #   require 'fastimage'
    #
    #   FastImage.animated?("test/fixtures/test.gif")
    #   => false
    #   FastImage.animated?("test/fixtures/animated.gif")
    #   => true
    #
    # === Supported options
    # [:timeout]
    #   Overrides the default timeout of 2 seconds.  Applies both to reading from and opening the http connection.
    # [:raise_on_failure]
    #   If set to true causes an exception to be raised if the image type cannot be found for any reason.
    #
    # @return [Boolean]
    #
    # source://fastimage//lib/fastimage.rb#211
    def animated?(uri, options = T.unsafe(nil)); end

    # Returns an array containing the width and height of the image.
    # It will return nil if the image could not be fetched, or if the image type was not recognised.
    #
    # By default there is a timeout of 2 seconds for opening and reading from a remote server.
    # This can be changed by passing a :timeout => number_of_seconds in the options.
    #
    # If you wish FastImage to raise if it cannot size the image for any reason, then pass
    # :raise_on_failure => true in the options.
    #
    # FastImage knows about GIF, JPEG, BMP, TIFF, ICO, CUR, PNG, PSD, SVG and WEBP files.
    #
    # === Example
    #
    #   require 'fastimage'
    #
    #   FastImage.size("http://stephensykes.com/images/ss.com_x.gif")
    #   => [266, 56]
    #   FastImage.size("http://stephensykes.com/images/pngimage")
    #   => [16, 16]
    #   FastImage.size("http://farm4.static.flickr.com/3023/3047236863_9dce98b836.jpg")
    #   => [500, 375]
    #   FastImage.size("http://www-ece.rice.edu/~wakin/images/lena512.bmp")
    #   => [512, 512]
    #   FastImage.size("test/fixtures/test.jpg")
    #   => [882, 470]
    #   FastImage.size("http://pennysmalls.com/does_not_exist")
    #   => nil
    #   FastImage.size("http://pennysmalls.com/does_not_exist", :raise_on_failure=>true)
    #   => raises FastImage::ImageFetchFailure
    #   FastImage.size("http://stephensykes.com/favicon.ico", :raise_on_failure=>true)
    #   => [16, 16]
    #   FastImage.size("http://stephensykes.com/images/squareBlue.icns", :raise_on_failure=>true)
    #   => raises FastImage::UnknownImageType
    #   FastImage.size("http://stephensykes.com/favicon.ico", :raise_on_failure=>true, :timeout=>0.01)
    #   => raises FastImage::ImageFetchFailure
    #   FastImage.size("http://stephensykes.com/images/faulty.jpg", :raise_on_failure=>true)
    #   => raises FastImage::SizeNotFound
    #
    # === Supported options
    # [:timeout]
    #   Overrides the default timeout of 2 seconds.  Applies both to reading from and opening the http connection.
    # [:raise_on_failure]
    #   If set to true causes an exception to be raised if the image size cannot be found for any reason.
    #
    # source://fastimage//lib/fastimage.rb#141
    def size(uri, options = T.unsafe(nil)); end

    # Returns an symbol indicating the image type fetched from a uri.
    # It will return nil if the image could not be fetched, or if the image type was not recognised.
    #
    # By default there is a timeout of 2 seconds for opening and reading from a remote server.
    # This can be changed by passing a :timeout => number_of_seconds in the options.
    #
    # If you wish FastImage to raise if it cannot find the type of the image for any reason, then pass
    # :raise_on_failure => true in the options.
    #
    # === Example
    #
    #   require 'fastimage'
    #
    #   FastImage.type("http://stephensykes.com/images/ss.com_x.gif")
    #   => :gif
    #   FastImage.type("http://stephensykes.com/images/pngimage")
    #   => :png
    #   FastImage.type("http://farm4.static.flickr.com/3023/3047236863_9dce98b836.jpg")
    #   => :jpeg
    #   FastImage.type("http://www-ece.rice.edu/~wakin/images/lena512.bmp")
    #   => :bmp
    #   FastImage.type("test/fixtures/test.jpg")
    #   => :jpeg
    #   FastImage.type("http://stephensykes.com/does_not_exist")
    #   => nil
    #   File.open("/some/local/file.gif", "r") {|io| FastImage.type(io)}
    #   => :gif
    #   FastImage.type("test/fixtures/test.tiff")
    #   => :tiff
    #   FastImage.type("test/fixtures/test.psd")
    #   => :psd
    #
    # === Supported options
    # [:timeout]
    #   Overrides the default timeout of 2 seconds.  Applies both to reading from and opening the http connection.
    # [:raise_on_failure]
    #   If set to true causes an exception to be raised if the image type cannot be found for any reason.
    #
    # source://fastimage//lib/fastimage.rb#183
    def type(uri, options = T.unsafe(nil)); end
  end
end

# source://fastimage//lib/fastimage.rb#88
class FastImage::BadImageURI < ::FastImage::FastImageException; end

# source://fastimage//lib/fastimage.rb#86
class FastImage::CannotParseImage < ::FastImage::FastImageException; end

# source://fastimage//lib/fastimage.rb#91
FastImage::DefaultTimeout = T.let(T.unsafe(nil), Integer)

# source://fastimage//lib/fastimage.rb#936
class FastImage::Exif
  # @return [Exif] a new instance of Exif
  #
  # source://fastimage//lib/fastimage.rb#939
  def initialize(stream); end

  # Returns the value of attribute height.
  #
  # source://fastimage//lib/fastimage.rb#937
  def height; end

  # Returns the value of attribute orientation.
  #
  # source://fastimage//lib/fastimage.rb#937
  def orientation; end

  # @return [Boolean]
  #
  # source://fastimage//lib/fastimage.rb#945
  def rotated?; end

  # Returns the value of attribute width.
  #
  # source://fastimage//lib/fastimage.rb#937
  def width; end

  private

  # source://fastimage//lib/fastimage.rb#951
  def get_exif_byte_order; end

  # source://fastimage//lib/fastimage.rb#984
  def parse_exif; end

  # source://fastimage//lib/fastimage.rb#963
  def parse_exif_ifd; end
end

# source://fastimage//lib/fastimage.rb#78
class FastImage::FastImageException < ::StandardError; end

# source://fastimage//lib/fastimage.rb#469
class FastImage::FiberStream
  include ::FastImage::StreamUtil

  # @return [FiberStream] a new instance of FiberStream
  #
  # source://fastimage//lib/fastimage.rb#473
  def initialize(read_fiber); end

  # Peeking beyond the end of the input will raise
  #
  # source://fastimage//lib/fastimage.rb#481
  def peek(n); end

  # Returns the value of attribute pos.
  #
  # source://fastimage//lib/fastimage.rb#471
  def pos; end

  # source://fastimage//lib/fastimage.rb#498
  def read(n); end

  # source://fastimage//lib/fastimage.rb#505
  def skip(n); end
end

# source://fastimage//lib/fastimage.rb#763
class FastImage::Gif
  # @return [Gif] a new instance of Gif
  #
  # source://fastimage//lib/fastimage.rb#764
  def initialize(stream); end

  # Checks if a delay between frames exists and if it does, then the GIFs is
  # animated
  #
  # @return [Boolean]
  #
  # source://fastimage//lib/fastimage.rb#774
  def animated?; end

  # source://fastimage//lib/fastimage.rb#768
  def width_and_height; end

  private

  # source://fastimage//lib/fastimage.rb#818
  def skip_sub_blocks; end
end

# source://fastimage//lib/fastimage.rb#524
class FastImage::IOStream < ::SimpleDelegator
  include ::FastImage::StreamUtil
end

# source://fastimage//lib/fastimage.rb#82
class FastImage::ImageFetchFailure < ::FastImage::FastImageException; end

# HEIC/AVIF are a special case of the general ISO_BMFF format, in which all data is encapsulated in typed boxes,
# with a mandatory ftyp box that is used to indicate particular file types. Is composed of nested "boxes". Each
# box has a header composed of
# - Size (32 bit integer)
# - Box type (4 chars)
# - Extended size: only if size === 1, the type field is followed by 64 bit integer of extended size
# - Payload: Type-dependent
#
# source://fastimage//lib/fastimage.rb#597
class FastImage::IsoBmff
  # @return [IsoBmff] a new instance of IsoBmff
  #
  # source://fastimage//lib/fastimage.rb#598
  def initialize(stream); end

  # source://fastimage//lib/fastimage.rb#602
  def width_and_height; end

  private

  # source://fastimage//lib/fastimage.rb#673
  def handle_hdlr_box(box_size); end

  # source://fastimage//lib/fastimage.rb#680
  def handle_ipma_box(box_size); end

  # source://fastimage//lib/fastimage.rb#661
  def handle_irot_box; end

  # source://fastimage//lib/fastimage.rb#665
  def handle_ispe_box(box_size, index); end

  # source://fastimage//lib/fastimage.rb#706
  def handle_meta_box(box_size); end

  # source://fastimage//lib/fastimage.rb#701
  def handle_pitm_box(box_size); end

  # source://fastimage//lib/fastimage.rb#729
  def read_box_header!; end

  # If you need to inspect a heic/heif file, use
  # https://gpac.github.io/mp4box.js/test/filereader.html
  #
  # source://fastimage//lib/fastimage.rb#627
  def read_boxes!(max_read_bytes = T.unsafe(nil)); end

  # source://fastimage//lib/fastimage.rb#739
  def read_uint16!; end

  # source://fastimage//lib/fastimage.rb#743
  def read_uint32!; end

  # source://fastimage//lib/fastimage.rb#735
  def read_uint8!; end
end

# source://fastimage//lib/fastimage.rb#93
FastImage::LocalFileChunkSize = T.let(T.unsafe(nil), Integer)

# source://fastimage//lib/fastimage.rb#95
FastImage::SUPPORTED_IMAGE_TYPES = T.let(T.unsafe(nil), Array)

# source://fastimage//lib/fastimage.rb#84
class FastImage::SizeNotFound < ::FastImage::FastImageException; end

# source://fastimage//lib/fastimage.rb#451
module FastImage::StreamUtil
  # source://fastimage//lib/fastimage.rb#452
  def read_byte; end

  # source://fastimage//lib/fastimage.rb#456
  def read_int; end

  # source://fastimage//lib/fastimage.rb#460
  def read_string_int; end
end

# source://fastimage//lib/fastimage.rb#1018
class FastImage::Svg
  # @return [Svg] a new instance of Svg
  #
  # source://fastimage//lib/fastimage.rb#1019
  def initialize(stream); end

  # source://fastimage//lib/fastimage.rb#1025
  def width_and_height; end

  private

  # source://fastimage//lib/fastimage.rb#1077
  def attr_value; end

  # source://fastimage//lib/fastimage.rb#1041
  def parse_svg; end
end

# source://fastimage//lib/fastimage.rb#80
class FastImage::UnknownImageType < ::FastImage::FastImageException; end

# source://fastimage//lib/fastimage/version.rb#4
FastImage::VERSION = T.let(T.unsafe(nil), String)
