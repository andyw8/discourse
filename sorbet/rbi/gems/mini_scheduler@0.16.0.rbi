# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_scheduler` gem.
# Please instead update this file by running `bin/tapioca gem mini_scheduler`.

# Based off sidetiq https://github.com/tobiassvn/sidetiq/blob/master/lib/sidetiq/web.rb
#
# source://mini_scheduler//lib/mini_scheduler/engine.rb#4
module MiniScheduler
  class << self
    # source://mini_scheduler//lib/mini_scheduler.rb#56
    def before_sidekiq_web_request(&blk); end

    # @yield [_self]
    # @yieldparam _self [MiniScheduler] the object that the method was called on
    #
    # source://mini_scheduler//lib/mini_scheduler.rb#16
    def configure; end

    # source://mini_scheduler//lib/mini_scheduler.rb#35
    def handle_job_exception(ex, context = T.unsafe(nil)); end

    # source://mini_scheduler//lib/mini_scheduler.rb#30
    def job_exception_handler(&blk); end

    # source://mini_scheduler//lib/mini_scheduler.rb#51
    def job_ran(&blk); end

    # source://railties/7.0.7/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.7/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.7/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://mini_scheduler//lib/mini_scheduler.rb#47
    def redis; end

    # source://mini_scheduler//lib/mini_scheduler.rb#43
    def redis=(r); end

    # source://mini_scheduler//lib/mini_scheduler.rb#61
    def skip_schedule(&blk); end

    # source://mini_scheduler//lib/mini_scheduler.rb#66
    def start(workers: T.unsafe(nil)); end

    # source://railties/7.0.7/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.7/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

# source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#4
class MiniScheduler::DistributedMutex
  # @raise [ArgumentError]
  # @return [DistributedMutex] a new instance of DistributedMutex
  #
  # source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#17
  def initialize(key, redis); end

  # NOTE wrapped in mutex to maintain its semantics
  #
  # source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#29
  def synchronize; end

  private

  # source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#55
  def try_to_get_lock; end

  class << self
    # source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#9
    def redis=(redis); end

    # source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#13
    def synchronize(key, redis = T.unsafe(nil), &blk); end
  end
end

# source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#25
MiniScheduler::DistributedMutex::BASE_SLEEP_DURATION = T.let(T.unsafe(nil), Float)

# source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#24
MiniScheduler::DistributedMutex::MAX_POLLING_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#26
MiniScheduler::DistributedMutex::MAX_SLEEP_DURATION = T.let(T.unsafe(nil), Integer)

# source://mini_scheduler//lib/mini_scheduler/distributed_mutex.rb#5
class MiniScheduler::DistributedMutex::Timeout < ::StandardError; end

# source://mini_scheduler//lib/mini_scheduler/engine.rb#5
class MiniScheduler::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.7/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://mini_scheduler//lib/mini_scheduler/manager.rb#4
class MiniScheduler::Manager
  # @return [Manager] a new instance of Manager
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#211
  def initialize(options = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#332
  def blocking_tick; end

  # Returns the value of attribute enable_stats.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def enable_stats; end

  # Sets the attribute enable_stats
  #
  # @param value the value to set the attribute enable_stats to.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def enable_stats=(_arg0); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#251
  def ensure_schedule!(klass); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#285
  def get_klass(name); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#235
  def hostname; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#388
  def identity_key; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#346
  def keep_alive(*ids); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#342
  def keep_alive_duration; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#353
  def lock; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#247
  def next_run(klass); end

  # Returns the value of attribute queue.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def queue; end

  # Sets the attribute queue
  #
  # @param value the value to set the attribute queue to.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def queue=(_arg0); end

  # Returns the value of attribute random_ratio.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def random_ratio; end

  # Sets the attribute random_ratio
  #
  # @param value the value to set the attribute random_ratio to.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def random_ratio=(_arg0); end

  # Returns the value of attribute redis.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def redis; end

  # Sets the attribute redis
  #
  # @param value the value to set the attribute redis to.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def redis=(_arg0); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#257
  def remove(klass); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#291
  def repair_queue; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#263
  def reschedule_orphans!; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#270
  def reschedule_orphans_on!(hostname = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#243
  def schedule_info(klass); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#307
  def schedule_next_job(hostname = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#337
  def stop!; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#300
  def tick; end

  # Returns the value of attribute workers.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def workers; end

  # Sets the attribute workers
  #
  # @param value the value to set the attribute workers to.
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#5
  def workers=(_arg0); end

  class << self
    # source://mini_scheduler//lib/mini_scheduler/manager.rb#231
    def current; end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#359
    def discover_queues; end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#363
    def discover_schedules; end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#395
    def lock_key(queue); end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#399
    def queue_key(queue, hostname = T.unsafe(nil)); end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#407
    def schedule_key(klass, hostname = T.unsafe(nil)); end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#380
    def seq; end

    # source://mini_scheduler//lib/mini_scheduler/manager.rb#207
    def without_runner; end
  end
end

# source://mini_scheduler//lib/mini_scheduler/manager.rb#7
class MiniScheduler::Manager::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://mini_scheduler//lib/mini_scheduler/manager.rb#8
  def initialize(manager); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#193
  def attempts(max_attempts); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#82
  def current_worker_thread_id; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#177
  def enq(klass); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#55
  def ensure_worker_threads; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#78
  def hostname; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#37
  def keep_alive(*ids); end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#94
  def process_queue; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#43
  def repair_queue; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#49
  def reschedule_orphans; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#86
  def set_current_worker_thread_id!; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#152
  def stop!; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#181
  def wait_till_done; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#65
  def worker_loop; end

  # source://mini_scheduler//lib/mini_scheduler/manager.rb#90
  def worker_thread_ids; end
end

# source://mini_scheduler//lib/mini_scheduler/schedule.rb#3
module MiniScheduler::Schedule
  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#10
  def daily(options = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#17
  def every(duration = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#32
  def is_per_host; end

  # schedule job independently on each host (looking at hostname)
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#28
  def per_host; end

  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#5
  def queue(value = T.unsafe(nil)); end

  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#36
  def schedule_info; end

  # @return [Boolean]
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule.rb#41
  def scheduled?; end
end

# source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#4
class MiniScheduler::ScheduleInfo
  # @return [ScheduleInfo] a new instance of ScheduleInfo
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#11
  def initialize(klass, manager); end

  # Returns the value of attribute current_owner.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def current_owner; end

  # Sets the attribute current_owner
  #
  # @param value the value to set the attribute current_owner to.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def current_owner=(_arg0); end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#110
  def del!; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#115
  def key; end

  # Returns the value of attribute next_run.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def next_run; end

  # Sets the attribute next_run
  #
  # @param value the value to set the attribute next_run to.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def next_run=(_arg0); end

  # Returns the value of attribute prev_duration.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_duration; end

  # Sets the attribute prev_duration
  #
  # @param value the value to set the attribute prev_duration to.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_duration=(_arg0); end

  # Returns the value of attribute prev_result.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_result; end

  # Sets the attribute prev_result
  #
  # @param value the value to set the attribute prev_result to.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_result=(_arg0); end

  # Returns the value of attribute prev_run.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_run; end

  # Sets the attribute prev_run
  #
  # @param value the value to set the attribute prev_run to.
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#5
  def prev_run=(_arg0); end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#123
  def queue_key; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#131
  def redis; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#87
  def schedule!; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#71
  def schedule_daily!; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#56
  def schedule_every!; end

  # this means the schedule is going to fire, it is setup correctly.
  # invalid schedules are fixed by running "schedule!"
  # this happens automatically after if fire by the manager.
  #
  # @return [Boolean]
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#36
  def valid?; end

  # @return [Boolean]
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#48
  def valid_daily?; end

  # @return [Boolean]
  #
  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#41
  def valid_every?; end

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#97
  def write!; end

  private

  # source://mini_scheduler//lib/mini_scheduler/schedule_info.rb#136
  def clear!; end
end

# source://mini_scheduler//lib/mini_scheduler.rb#20
class MiniScheduler::SidekiqExceptionHandler
  class << self
    # source://mini_scheduler//lib/mini_scheduler.rb#24
    def handle_exception(exception, context); end
  end
end

class MiniScheduler::Stat < ::ActiveRecord::Base
  include ::MiniScheduler::Stat::GeneratedAttributeMethods
  include ::MiniScheduler::Stat::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.7/lib/active_record/enum.rb#116
    def defined_enums; end

    def purge_old; end
  end
end

module MiniScheduler::Stat::GeneratedAssociationMethods; end
module MiniScheduler::Stat::GeneratedAttributeMethods; end
