# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `email_reply_trimmer` gem.
# Please instead update this file by running `bin/tapioca gem email_reply_trimmer`.

# source://email_reply_trimmer//lib/email_reply_trimmer/delimiter_matcher.rb#1
class DelimiterMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/delimiter_matcher.rb#6
    def match?(line); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer/delimiter_matcher.rb#3
DelimiterMatcher::DELIMITER_CHARACTERS = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer/delimiter_matcher.rb#4
DelimiterMatcher::DELIMITER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#1
class EmailHeaderMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#64
    def match?(line); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#3
EmailHeaderMatcher::EMAIL_HEADERS_WITH_DATE_MARKERS = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#28
EmailHeaderMatcher::EMAIL_HEADERS_WITH_DATE_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#32
EmailHeaderMatcher::EMAIL_HEADERS_WITH_TEXT_MARKERS = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#55
EmailHeaderMatcher::EMAIL_HEADERS_WITH_TEXT_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/email_header_matcher.rb#59
EmailHeaderMatcher::EMAIL_HEADER_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#8
class EmailReplyTrimmer
  class << self
    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#197
    def compute_elided(text, lines); end

    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#133
    def extract_embedded_email(text); end

    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#19
    def identify_line_content(line); end

    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#215
    def is_reply_at_end?(pattern); end

    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#160
    def preprocess!(text); end

    # source://email_reply_trimmer//lib/email_reply_trimmer.rb#29
    def trim(text, split = T.unsafe(nil)); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#11
EmailReplyTrimmer::DELIMITER = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#14
EmailReplyTrimmer::EMAIL_HEADER = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#12
EmailReplyTrimmer::EMBEDDED = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#13
EmailReplyTrimmer::EMPTY = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#15
EmailReplyTrimmer::QUOTE = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#16
EmailReplyTrimmer::SIGNATURE = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#17
EmailReplyTrimmer::TEXT = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer.rb#9
EmailReplyTrimmer::VERSION = T.let(T.unsafe(nil), String)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#1
class EmbeddedEmailMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#147
    def match?(line); end
  end
end

# 2015-10-18 0:17 GMT+03:00 Matt Palmer <info@discourse.org>:
# 2013/10/2 camilohollanda <info@discourse.org>
# вт, 5 янв. 2016 г. в 23:39, Erlend Sogge Heggen <info@discourse.org>:
# ср, 1 апр. 2015, 18:29, Denis Didkovsky <info@discourse.org>:
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#89
EmbeddedEmailMatcher::DATE_SOMEONE_EMAIL_REGEX = T.let(T.unsafe(nil), Regexp)

# суббота, 14 марта 2015 г. пользователь etewiah написал:
# 23 mar 2017 21:25 "Neil Lalonde" <meta@discoursemail.com> napisał(a):
# 30 серп. 2016 р. 20:45 "Arpit" no-reply@example.com пише:
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#59
EmbeddedEmailMatcher::DATE_SOMEONE_WROTE_MARKERS = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#68
EmbeddedEmailMatcher::DATE_SOMEONE_WROTE_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#134
EmbeddedEmailMatcher::EMBEDDED_REGEXES = T.let(T.unsafe(nil), Array)

# Begin forwarded message:
# Reply Message
# ----- Forwarded Message -----
# ----- Original Message -----
# -----Original Message-----
# *----- Original Message -----*
# ----- Reply message -----
# ------------------ 原始邮件 ------------------
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#119
EmbeddedEmailMatcher::FORWARDED_EMAIL_REGEXES = T.let(T.unsafe(nil), Array)

# 2016-03-03 17:21 GMT+01:00 Some One
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#83
EmbeddedEmailMatcher::ISO_DATE_SOMEONE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#14
EmbeddedEmailMatcher::ON_DATE_SOMEONE_WROTE_REGEXES = T.let(T.unsafe(nil), Array)

# Op 10 dec. 2015 18:35 schreef "Arpit Jalan" <info@discourse.org>:
# Am 18.09.2013 um 16:24 schrieb codinghorror <info@discourse.org>:
# Den 15. jun. 2016 kl. 20.42 skrev Jeff Atwood <info@discourse.org>:
# søn. 30. apr. 2017 kl. 00.26 skrev David Taylor <meta@discoursemail.com>:
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#41
EmbeddedEmailMatcher::ON_DATE_WROTE_SOMEONE_MARKERS = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#52
EmbeddedEmailMatcher::ON_DATE_WROTE_SOMEONE_REGEXES = T.let(T.unsafe(nil), Array)

# Posted by mpalmer on 01/21/2016
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#109
EmbeddedEmailMatcher::POSTED_BY_SOMEONE_ON_DATE_REGEX = T.let(T.unsafe(nil), Regexp)

# Some One <info@discourse.org> wrote:
# Gavin Sinclair (gsinclair@soyabean.com.au) wrote:
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#106
EmbeddedEmailMatcher::SOMEONE_EMAIL_WROTE_REGEX = T.let(T.unsafe(nil), Regexp)

# codinghorror via Discourse Meta wrote:
# codinghorror via Discourse Meta <info@discourse.org> schrieb:
#
# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#93
EmbeddedEmailMatcher::SOMEONE_VIA_SOMETHING_WROTE_MARKERS = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#100
EmbeddedEmailMatcher::SOMEONE_VIA_SOMETHING_WROTE_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/embedded_email_matcher.rb#75
EmbeddedEmailMatcher::SOMEONE_WROTE_ON_DATE_REGEXES = T.let(T.unsafe(nil), Array)

# source://email_reply_trimmer//lib/email_reply_trimmer/empty_line_matcher.rb#1
class EmptyLineMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/empty_line_matcher.rb#3
    def match?(line); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer/quote_matcher.rb#1
class QuoteMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/quote_matcher.rb#3
    def match?(line); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer/signature_matcher.rb#1
class SignatureMatcher
  class << self
    # @return [Boolean]
    #
    # source://email_reply_trimmer//lib/email_reply_trimmer/signature_matcher.rb#44
    def match?(line); end
  end
end

# source://email_reply_trimmer//lib/email_reply_trimmer/signature_matcher.rb#16
SignatureMatcher::SIGNATURE_REGEXES = T.let(T.unsafe(nil), Array)
