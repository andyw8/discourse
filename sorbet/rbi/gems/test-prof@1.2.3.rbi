# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `test-prof` gem.
# Please instead update this file by running `bin/tapioca gem test-prof`.

# source://test-prof//lib/minitest/base_reporter.rb#6
module Minitest
  class << self
    # source://minitest/5.20.0/lib/minitest.rb#176
    def __run(reporter, options); end

    # source://minitest/5.20.0/lib/minitest.rb#97
    def after_run(&block); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def allow_fork; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def allow_fork=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#69
    def autorun; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def backtrace_filter; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def backtrace_filter=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#18
    def cattr_accessor(name); end

    # source://minitest/5.20.0/lib/minitest.rb#1102
    def clock_time; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def extensions; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def extensions=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#267
    def filter_backtrace(bt); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def info_signal; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def info_signal=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#101
    def init_plugins(options); end

    # source://minitest/5.20.0/lib/minitest.rb#108
    def load_plugins; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def parallel_executor; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def parallel_executor=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#189
    def process_args(args = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def reporter; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def reporter=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#143
    def run(args = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest.rb#1093
    def run_one_method(klass, method_name); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def seed; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def seed=(_arg0); end
  end
end

class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::TestProf::FactoryDoctorIgnore
end

# source://test-prof//lib/minitest/base_reporter.rb#7
module Minitest::TestProf; end

# source://test-prof//lib/minitest/base_reporter.rb#8
class Minitest::TestProf::BaseReporter < ::Minitest::AbstractReporter
  include ::TestProf::Logging

  # @return [BaseReporter] a new instance of BaseReporter
  #
  # source://test-prof//lib/minitest/base_reporter.rb#13
  def initialize(io = T.unsafe(nil), _options = T.unsafe(nil)); end

  # source://test-prof//lib/minitest/base_reporter.rb#30
  def after_test(test); end

  # source://test-prof//lib/minitest/base_reporter.rb#24
  def before_test(test); end

  # Returns the value of attribute io.
  #
  # source://test-prof//lib/minitest/base_reporter.rb#11
  def io; end

  # Sets the attribute io
  #
  # @param value the value to set the attribute io to.
  #
  # source://test-prof//lib/minitest/base_reporter.rb#11
  def io=(_arg0); end

  # source://test-prof//lib/minitest/base_reporter.rb#21
  def prerecord(group, example); end

  # source://test-prof//lib/minitest/base_reporter.rb#27
  def record(*_arg0); end

  # source://test-prof//lib/minitest/base_reporter.rb#33
  def report; end

  # source://test-prof//lib/minitest/base_reporter.rb#18
  def start; end

  private

  # source://test-prof//lib/minitest/base_reporter.rb#60
  def inject_to_minitest_reporters; end

  # source://test-prof//lib/minitest/base_reporter.rb#38
  def location(group, example = T.unsafe(nil)); end

  # source://test-prof//lib/minitest/base_reporter.rb#52
  def location_with_line_number(group, example = T.unsafe(nil)); end

  # source://test-prof//lib/minitest/base_reporter.rb#56
  def location_without_line_number(group, example = T.unsafe(nil)); end
end

# source://test-prof//lib/minitest/event_prof_formatter.rb#8
class Minitest::TestProf::EventProfFormatter
  # @return [EventProfFormatter] a new instance of EventProfFormatter
  #
  # source://test-prof//lib/minitest/event_prof_formatter.rb#12
  def initialize(profilers); end

  # source://test-prof//lib/minitest/event_prof_formatter.rb#17
  def prepare_results; end

  private

  # source://test-prof//lib/minitest/event_prof_formatter.rb#61
  def by_examples(profiler); end

  # source://test-prof//lib/minitest/event_prof_formatter.rb#43
  def by_groups(profiler); end

  # source://test-prof//lib/minitest/event_prof_formatter.rb#82
  def time_percentage(time, total_time); end

  # source://test-prof//lib/minitest/event_prof_formatter.rb#28
  def total_results(profiler); end
end

# source://test-prof//lib/test_prof/event_prof/minitest.rb#8
class Minitest::TestProf::EventProfReporter < ::Minitest::TestProf::BaseReporter
  # @return [EventProfReporter] a new instance of EventProfReporter
  #
  # source://test-prof//lib/test_prof/event_prof/minitest.rb#9
  def initialize(io = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#25
  def before_test(test); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#20
  def prerecord(group, example); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#29
  def record(*_arg0); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#33
  def report; end

  private

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#55
  def change_current_group(group, example); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#64
  def configure_profiler(options); end

  # source://test-prof//lib/test_prof/event_prof/minitest.rb#41
  def track_current_example(group, example); end
end

# Add fd_ignore methods
#
# source://test-prof//lib/test_prof/factory_doctor/minitest.rb#9
module Minitest::TestProf::FactoryDoctorIgnore
  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#10
  def fd_ignore; end
end

# source://test-prof//lib/test_prof/factory_doctor/minitest.rb#17
class Minitest::TestProf::FactoryDoctorReporter < ::Minitest::TestProf::BaseReporter
  # @return [FactoryDoctorReporter] a new instance of FactoryDoctorReporter
  #
  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#22
  def initialize(io = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#30
  def prerecord(_group, _example); end

  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#34
  def record(example); end

  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#60
  def report; end

  private

  # source://test-prof//lib/test_prof/factory_doctor/minitest.rb#89
  def pluralize_records(count); end
end

# source://test-prof//lib/test_prof/factory_doctor/minitest.rb#20
Minitest::TestProf::FactoryDoctorReporter::SUCCESS_MESSAGE = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/version.rb#3
module TestProf
  extend ::TestProf::Logging

  class << self
    # Run block only if provided env var is present and
    # equal to the provided value (if any).
    # Contains workaround for applications using Spring.
    #
    # source://test-prof//lib/test_prof/core.rb#73
    def activate(env_var, val = T.unsafe(nil)); end

    # Return a path to store artifact
    #
    # source://test-prof//lib/test_prof/core.rb#93
    def artifact_path(filename); end

    # Return absolute path to asset
    #
    # source://test-prof//lib/test_prof/core.rb#88
    def asset_path(filename); end

    # source://test-prof//lib/test_prof/core.rb#30
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/core.rb#34
    def configure; end

    # source://test-prof//lib/test_prof/core.rb#106
    def create_artifact_dir; end

    # Returns true if we're inside Minitest
    #
    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/core.rb#44
    def minitest?; end

    # Returns the current process time
    #
    # source://test-prof//lib/test_prof/core.rb#56
    def now; end

    # Require gem and shows a custom
    # message if it fails to load
    #
    # source://test-prof//lib/test_prof/core.rb#62
    def require(gem_name, msg = T.unsafe(nil)); end

    # Returns true if we're inside RSpec
    #
    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/core.rb#39
    def rspec?; end

    # Returns true if Spring is used and not disabled
    #
    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/core.rb#49
    def spring?; end

    private

    # source://test-prof//lib/test_prof/core.rb#112
    def activate!(env_var, val); end

    # source://test-prof//lib/test_prof/core.rb#134
    def notify_spring_activate(env_var); end

    # source://test-prof//lib/test_prof/core.rb#128
    def notify_spring_detected; end

    # source://test-prof//lib/test_prof/core.rb#122
    def with_report_suffix(path); end

    # source://test-prof//lib/test_prof/core.rb#116
    def with_timestamps(path); end
  end
end

# TestProf configuration
#
# source://test-prof//lib/test_prof/core.rb#140
class TestProf::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/core.rb#147
  def initialize; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def color; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def color=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/core.rb#155
  def color?; end

  # source://test-prof//lib/test_prof/core.rb#163
  def logger; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def output; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def output=(_arg0); end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def output_dir; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def output_dir=(_arg0); end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def report_suffix; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def report_suffix=(_arg0); end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def timestamps; end

  # IO to write logs
  #
  # source://test-prof//lib/test_prof/core.rb#141
  def timestamps=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/core.rb#159
  def timestamps?; end
end

# EventProf profiles your tests and suites against custom events,
# such as ActiveSupport::Notifications.
#
# It works very similar to `rspec --profile` but can track arbitrary events.
#
# Example:
#
#   # Collect SQL queries stats for every suite and example
#   EVENT_PROF='sql.active_record' rspec ...
#
# By default it collects information only about top-level groups (aka suites),
# but you can also profile individual examples. Just set the configuration option:
#
#  TestProf::EventProf.configure do |config|
#    config.per_example = true
#  end
#
# Or provide the EVENT_PROF_EXAMPLES=1 env variable.
#
# source://test-prof//lib/test_prof/event_prof/profiler.rb#4
module TestProf::EventProf
  class << self
    # Returns new configured instance of profilers group
    #
    # source://test-prof//lib/test_prof/event_prof.rb#78
    def build(event = T.unsafe(nil)); end

    # source://test-prof//lib/test_prof/event_prof.rb#69
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/event_prof.rb#73
    def configure; end

    # source://test-prof//lib/test_prof/event_prof.rb#88
    def instrumenter; end

    # Instrument specified module methods.
    # Wraps them with `instrumenter.instrument(event) { ... }`.
    #
    # Use it to profile arbitrary methods:
    #
    #   TestProf::EventProf.monitor(MyModule, "my_module.call", :call)
    #
    # source://test-prof//lib/test_prof/event_prof.rb#98
    def monitor(mod, event, *mids, **kwargs); end
  end
end

# EventProf configuration
#
# source://test-prof//lib/test_prof/event_prof.rb#30
class TestProf::EventProf::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/event_prof.rb#39
  def initialize; end

  # Returns the value of attribute event.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def event; end

  # Sets the attribute event
  #
  # @param value the value to set the attribute event to.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def event=(_arg0); end

  # Returns the value of attribute instrumenter.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def instrumenter; end

  # Sets the attribute instrumenter
  #
  # @param value the value to set the attribute instrumenter to.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def instrumenter=(_arg0); end

  # Returns the value of attribute per_example.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def per_example; end

  # Sets the attribute per_example
  #
  # @param value the value to set the attribute per_example to.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def per_example=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/event_prof.rb#54
  def per_example?; end

  # Returns the value of attribute rank_by.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def rank_by; end

  # Sets the attribute rank_by
  #
  # @param value the value to set the attribute rank_by to.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def rank_by=(_arg0); end

  # @raise [ArgumentError]
  #
  # source://test-prof//lib/test_prof/event_prof.rb#58
  def resolve_instrumenter; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/event_prof.rb#50
  def stamp?; end

  # Returns the value of attribute top_count.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def top_count; end

  # Sets the attribute top_count
  #
  # @param value the value to set the attribute top_count to.
  #
  # source://test-prof//lib/test_prof/event_prof.rb#36
  def top_count=(_arg0); end
end

# Map of supported instrumenters
#
# source://test-prof//lib/test_prof/event_prof.rb#32
TestProf::EventProf::Configuration::INSTRUMENTERS = T.let(T.unsafe(nil), Hash)

# Registers and activates custom events (which require patches).
#
# source://test-prof//lib/test_prof/event_prof/custom_events.rb#6
module TestProf::EventProf::CustomEvents
  class << self
    # source://test-prof//lib/test_prof/event_prof/custom_events.rb#13
    def activate_all(events); end

    # @raise [ArgumentError]
    #
    # source://test-prof//lib/test_prof/event_prof/custom_events.rb#8
    def register(event, &block); end

    # source://test-prof//lib/test_prof/event_prof/custom_events.rb#18
    def try_activate(event); end

    private

    # source://test-prof//lib/test_prof/event_prof/custom_events.rb#25
    def registrations; end
  end
end

# source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#4
module TestProf::EventProf::Instrumentations; end

# Wrapper over ActiveSupport::Notifications
#
# source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#6
module TestProf::EventProf::Instrumentations::ActiveSupport
  class << self
    # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#34
    def instrument(event); end

    # @raise [ArgumentError]
    #
    # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#28
    def subscribe(event, &block); end
  end
end

# source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#7
class TestProf::EventProf::Instrumentations::ActiveSupport::Subscriber
  # @return [Subscriber] a new instance of Subscriber
  #
  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#10
  def initialize(block); end

  # Returns the value of attribute block.
  #
  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#8
  def block; end

  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#22
  def finish(*_arg0); end

  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#18
  def publish(_name, started_at, finished_at, *_arg3); end

  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#14
  def start(*_arg0); end

  # Returns the value of attribute started_at.
  #
  # source://test-prof//lib/test_prof/event_prof/instrumentations/active_support.rb#8
  def started_at; end
end

# Wrap methods with instrumentation
#
# source://test-prof//lib/test_prof/event_prof/monitor.rb#6
module TestProf::EventProf::Monitor
  class << self
    # source://test-prof//lib/test_prof/event_prof/monitor.rb#46
    def call(mod, event, *mids, guard: T.unsafe(nil), top_level: T.unsafe(nil)); end
  end
end

# source://test-prof//lib/test_prof/event_prof/monitor.rb#7
class TestProf::EventProf::Monitor::BaseTracker
  # @return [BaseTracker] a new instance of BaseTracker
  #
  # source://test-prof//lib/test_prof/event_prof/monitor.rb#10
  def initialize(event); end

  # Returns the value of attribute event.
  #
  # source://test-prof//lib/test_prof/event_prof/monitor.rb#8
  def event; end

  # source://test-prof//lib/test_prof/event_prof/monitor.rb#14
  def track; end
end

# source://test-prof//lib/test_prof/event_prof/monitor.rb#19
class TestProf::EventProf::Monitor::TopLevelTracker < ::TestProf::EventProf::Monitor::BaseTracker
  # @return [TopLevelTracker] a new instance of TopLevelTracker
  #
  # source://test-prof//lib/test_prof/event_prof/monitor.rb#22
  def initialize(event); end

  # Returns the value of attribute id.
  #
  # source://test-prof//lib/test_prof/event_prof/monitor.rb#20
  def id; end

  # source://test-prof//lib/test_prof/event_prof/monitor.rb#28
  def track; end
end

# source://test-prof//lib/test_prof/event_prof/profiler.rb#5
class TestProf::EventProf::Profiler
  # @return [Profiler] a new instance of Profiler
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#11
  def initialize(event:, instrumenter:, rank_by: T.unsafe(nil), top_count: T.unsafe(nil), per_example: T.unsafe(nil)); end

  # Returns the value of attribute absolute_run_time.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def absolute_run_time; end

  # Returns the value of attribute count.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def count; end

  # Returns the value of attribute event.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def event; end

  # Returns the value of attribute example_count.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def example_count; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#74
  def example_finished(id); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#68
  def example_started(id); end

  # Returns the value of attribute example_time.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def example_time; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#51
  def group_finished(id); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#46
  def group_started(id); end

  # Returns the value of attribute per_example.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def per_example; end

  # Returns the value of attribute per_example.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def per_example?; end

  # Returns the value of attribute rank_by.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def rank_by; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#90
  def results; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#100
  def take_time(start_ts); end

  # Returns the value of attribute time.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def time; end

  # Returns the value of attribute top_count.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def top_count; end

  # Returns the value of attribute total_count.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def total_count; end

  # Returns the value of attribute total_time.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#6
  def total_time; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#32
  def track(time); end

  private

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#113
  def reset_example!; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#106
  def reset_group!; end
end

# Multiple profilers wrapper
#
# source://test-prof//lib/test_prof/event_prof/profiler.rb#121
class TestProf::EventProf::ProfilersGroup
  # @return [ProfilersGroup] a new instance of ProfilersGroup
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#124
  def initialize(event:, **options); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#131
  def each(&block); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#139
  def events; end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#145
  def example_finished(id); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#145
  def example_started(id); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#145
  def group_finished(id); end

  # source://test-prof//lib/test_prof/event_prof/profiler.rb#145
  def group_started(id); end

  # Returns the value of attribute profilers.
  #
  # source://test-prof//lib/test_prof/event_prof/profiler.rb#122
  def profilers; end
end

# source://test-prof//lib/test_prof/event_prof/rspec.rb#8
class TestProf::EventProf::RSpecListener
  include ::TestProf::Logging

  # @return [RSpecListener] a new instance of RSpecListener
  #
  # source://test-prof//lib/test_prof/event_prof/rspec.rb#20
  def initialize; end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#40
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#31
  def example_group_finished(notification); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#26
  def example_group_started(notification); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#36
  def example_started(notification); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#44
  def print; end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#48
  def report(profiler); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#100
  def stamp!(profiler); end

  # source://test-prof//lib/test_prof/event_prof/rspec.rb#133
  def time_percentage(time, total_time); end
end

# source://test-prof//lib/test_prof/event_prof/rspec.rb#13
TestProf::EventProf::RSpecListener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# source://test-prof//lib/test_prof/factory_bot.rb#4
TestProf::FACTORY_GIRL_NAMES = T.let(T.unsafe(nil), Hash)

# FactoryAllStub inject into FactoryBot to make
# all strategies be `build_stubbed` strategy.
#
# source://test-prof//lib/test_prof/factory_all_stub/factory_bot_patch.rb#4
module TestProf::FactoryAllStub
  class << self
    # source://test-prof//lib/test_prof/factory_all_stub.rb#28
    def disable!; end

    # source://test-prof//lib/test_prof/factory_all_stub.rb#24
    def enable!; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_all_stub.rb#20
    def enabled?; end

    # source://test-prof//lib/test_prof/factory_all_stub.rb#14
    def init; end
  end
end

# Wrap #run method to override strategy
#
# source://test-prof//lib/test_prof/factory_all_stub/factory_bot_patch.rb#6
module TestProf::FactoryAllStub::FactoryBotPatch
  # source://test-prof//lib/test_prof/factory_all_stub/factory_bot_patch.rb#7
  def run(_strategy = T.unsafe(nil)); end
end

# source://test-prof//lib/test_prof/factory_all_stub.rb#11
TestProf::FactoryAllStub::LOCAL_NAME = T.let(T.unsafe(nil), Symbol)

# FactoryBot 5.0 uses strategy classes for associations,
# older versions and top-level invocations use Symbols.
#
# This Refinement should be used FactoryRunner patches to check
# that strategy is :create.
#
# source://test-prof//lib/test_prof/ext/factory_bot_strategy.rb#9
module TestProf::FactoryBotStrategy; end

# FactoryDoctor is a tool that helps you identify
# tests that perform unnecessary database queries.
#
# source://test-prof//lib/test_prof/factory_doctor/factory_bot_patch.rb#6
module TestProf::FactoryDoctor
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/factory_doctor.rb#57
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#61
    def configure; end

    # Returns the value of attribute count.
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#55
    def count; end

    # Do not analyze code within the block
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#106
    def ignore; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#114
    def ignore!; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#118
    def ignore?; end

    # Patch factory lib, init counters
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#66
    def init; end

    # Returns the value of attribute queries_count.
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#55
    def queries_count; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#101
    def result; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#88
    def stamp?; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#92
    def start; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#97
    def stop; end

    # Returns the value of attribute time.
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#55
    def time; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#122
    def within_factory(strategy); end

    private

    # source://test-prof//lib/test_prof/factory_doctor.rb#139
    def reset!; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#159
    def running?; end

    # source://test-prof//lib/test_prof/factory_doctor.rb#147
    def subscribe!; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_doctor.rb#155
    def within_factory?; end
  end
end

# source://test-prof//lib/test_prof/factory_doctor.rb#41
class TestProf::FactoryDoctor::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#44
  def initialize; end

  # Returns the value of attribute event.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#42
  def event; end

  # Sets the attribute event
  #
  # @param value the value to set the attribute event to.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#42
  def event=(_arg0); end

  # Returns the value of attribute threshold.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#42
  def threshold; end

  # Sets the attribute threshold
  #
  # @param value the value to set the attribute threshold to.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#42
  def threshold=(_arg0); end
end

# Wrap #run method with FactoryDoctor tracking
#
# source://test-prof//lib/test_prof/factory_doctor/fabrication_patch.rb#6
module TestProf::FactoryDoctor::FabricationPatch
  # source://test-prof//lib/test_prof/factory_doctor/fabrication_patch.rb#7
  def create(*_arg0); end
end

# Wrap #run method with FactoryDoctor tracking
#
# source://test-prof//lib/test_prof/factory_doctor/factory_bot_patch.rb#8
module TestProf::FactoryDoctor::FactoryBotPatch
  # source://test-prof//lib/test_prof/factory_doctor/factory_bot_patch.rb#11
  def run(strategy = T.unsafe(nil)); end
end

# source://test-prof//lib/test_prof/factory_doctor.rb#25
TestProf::FactoryDoctor::IGNORED_QUERIES_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://test-prof//lib/test_prof/factory_doctor/rspec.rb#7
class TestProf::FactoryDoctor::RSpecListener
  include ::TestProf::Logging

  # @return [RSpecListener] a new instance of RSpecListener
  #
  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#18
  def initialize; end

  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#28
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#24
  def example_started(_notification); end

  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#46
  def print; end

  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#81
  def stamp!; end

  private

  # source://test-prof//lib/test_prof/factory_doctor/rspec.rb#115
  def pluralize_records(count); end
end

# source://test-prof//lib/test_prof/factory_doctor/rspec.rb#13
TestProf::FactoryDoctor::RSpecListener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# source://test-prof//lib/test_prof/factory_doctor/rspec.rb#11
TestProf::FactoryDoctor::RSpecListener::SUCCESS_MESSAGE = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/factory_doctor.rb#11
class TestProf::FactoryDoctor::Result
  # @return [Result] a new instance of Result
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#14
  def initialize(count, time, queries_count); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#20
  def bad?; end

  # Returns the value of attribute count.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#12
  def count; end

  # Returns the value of attribute queries_count.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#12
  def queries_count; end

  # Returns the value of attribute time.
  #
  # source://test-prof//lib/test_prof/factory_doctor.rb#12
  def time; end
end

# FactoryProf collects "factory stacks" that can be used to build
# flamegraphs or detect most popular factories
#
# source://test-prof//lib/test_prof/factory_prof/printers/simple.rb#5
module TestProf::FactoryProf
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/factory_prof.rb#73
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/factory_prof.rb#77
    def configure; end

    # Patch factory lib, init vars
    #
    # source://test-prof//lib/test_prof/factory_prof.rb#82
    def init; end

    # source://test-prof//lib/test_prof/factory_prof.rb#90
    def patch!; end

    # source://test-prof//lib/test_prof/factory_prof.rb#112
    def print(started_at); end

    # source://test-prof//lib/test_prof/factory_prof.rb#127
    def result; end

    # Inits FactoryProf and setups at exit hook,
    # then runs
    #
    # source://test-prof//lib/test_prof/factory_prof.rb#100
    def run; end

    # source://test-prof//lib/test_prof/factory_prof.rb#118
    def start; end

    # source://test-prof//lib/test_prof/factory_prof.rb#123
    def stop; end

    # source://test-prof//lib/test_prof/factory_prof.rb#131
    def track(factory); end

    private

    # source://test-prof//lib/test_prof/factory_prof.rb#167
    def flush_stack; end

    # source://test-prof//lib/test_prof/factory_prof.rb#152
    def reset!; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/factory_prof.rb#173
    def running?; end
  end
end

# FactoryProf configuration
#
# source://test-prof//lib/test_prof/factory_prof.rb#17
class TestProf::FactoryProf::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#20
  def initialize; end

  # Whether we want to generate flamegraphs
  #
  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#34
  def flamegraph?; end

  # Returns the value of attribute mode.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#18
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#18
  def mode=(_arg0); end

  # Returns the value of attribute printer.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#18
  def printer; end

  # Sets the attribute printer
  #
  # @param value the value to set the attribute printer to.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#18
  def printer=(_arg0); end
end

# source://test-prof//lib/test_prof/factory_prof.rb#13
TestProf::FactoryProf::FACTORY_BUILDERS = T.let(T.unsafe(nil), Array)

# Wrap #run method with FactoryProf tracking
#
# source://test-prof//lib/test_prof/factory_prof/fabrication_patch.rb#6
module TestProf::FactoryProf::FabricationPatch
  # source://test-prof//lib/test_prof/factory_prof/fabrication_patch.rb#7
  def create(name, overrides = T.unsafe(nil)); end
end

# Wrap #run method with FactoryProf tracking
#
# source://test-prof//lib/test_prof/factory_prof/factory_bot_patch.rb#6
module TestProf::FactoryProf::FactoryBotPatch
  # source://test-prof//lib/test_prof/factory_prof/factory_bot_patch.rb#7
  def run(strategy = T.unsafe(nil)); end
end

# source://test-prof//lib/test_prof/factory_prof/factory_builders/factory_bot.rb#9
module TestProf::FactoryProf::FactoryBuilders; end

# implementation of #patch and #track methods
# to provide unified interface for all factory-building gems
#
# source://test-prof//lib/test_prof/factory_prof/factory_builders/fabrication.rb#10
class TestProf::FactoryProf::FactoryBuilders::Fabrication
  class << self
    # Monkey-patch Fabrication
    #
    # source://test-prof//lib/test_prof/factory_prof/factory_builders/fabrication.rb#12
    def patch; end

    # source://test-prof//lib/test_prof/factory_prof/factory_builders/fabrication.rb#18
    def track(factory, &block); end
  end
end

# implementation of #patch and #track methods
# to provide unified interface for all factory-building gems
#
# source://test-prof//lib/test_prof/factory_prof/factory_builders/factory_bot.rb#12
class TestProf::FactoryProf::FactoryBuilders::FactoryBot
  class << self
    # Monkey-patch FactoryBot / FactoryGirl
    #
    # source://test-prof//lib/test_prof/factory_prof/factory_builders/factory_bot.rb#16
    def patch; end

    # source://test-prof//lib/test_prof/factory_prof/factory_builders/factory_bot.rb#21
    def track(strategy, factory, &block); end
  end
end

# source://test-prof//lib/test_prof/factory_prof/printers/simple.rb#6
module TestProf::FactoryProf::Printers; end

# source://test-prof//lib/test_prof/factory_prof/printers/flamegraph.rb#7
module TestProf::FactoryProf::Printers::Flamegraph
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/factory_prof/printers/flamegraph.rb#32
    def convert_stacks(result); end

    # source://test-prof//lib/test_prof/factory_prof/printers/flamegraph.rb#14
    def dump(result, **_arg1); end
  end
end

# source://test-prof//lib/test_prof/factory_prof/printers/flamegraph.rb#9
TestProf::FactoryProf::Printers::Flamegraph::OUTPUT_NAME = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/factory_prof/printers/flamegraph.rb#8
TestProf::FactoryProf::Printers::Flamegraph::TEMPLATE = T.let(T.unsafe(nil), String)

# See https://twitter.com/nateberkopec/status/1389945187766456333
#
# source://test-prof//lib/test_prof/factory_prof/printers/nate_heckler.rb#8
module TestProf::FactoryProf::Printers::NateHeckler
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/factory_prof/printers/nate_heckler.rb#13
    def dump(result, start_time:); end
  end
end

# source://test-prof//lib/test_prof/factory_prof/printers/simple.rb#7
module TestProf::FactoryProf::Printers::Simple
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/factory_prof/printers/simple.rb#12
    def dump(result, start_time:); end
  end
end

# source://test-prof//lib/test_prof/factory_prof.rb#39
class TestProf::FactoryProf::Result
  # @return [Result] a new instance of Result
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#42
  def initialize(stacks, raw_stats); end

  # Returns the value of attribute raw_stats.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#40
  def raw_stats; end

  # Returns the value of attribute stacks.
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#40
  def stacks; end

  # Returns sorted stats
  #
  # source://test-prof//lib/test_prof/factory_prof.rb#48
  def stats; end

  # source://test-prof//lib/test_prof/factory_prof.rb#53
  def total_count; end

  # source://test-prof//lib/test_prof/factory_prof.rb#57
  def total_time; end

  private

  # source://test-prof//lib/test_prof/factory_prof.rb#63
  def sorted_stats(key); end
end

# Extend Float with #duration method
#
# source://test-prof//lib/test_prof/ext/float_duration.rb#5
module TestProf::FloatDuration; end

# Helper for output printing
#
# source://test-prof//lib/test_prof/logging.rb#5
module TestProf::Logging
  # source://test-prof//lib/test_prof/logging.rb#28
  def log(level, msg); end
end

# source://test-prof//lib/test_prof/logging.rb#6
TestProf::Logging::COLORS = T.let(T.unsafe(nil), Hash)

# source://test-prof//lib/test_prof/logging.rb#12
class TestProf::Logging::Formatter
  # source://test-prof//lib/test_prof/logging.rb#13
  def call(severity, _time, progname, msg); end

  private

  # source://test-prof//lib/test_prof/logging.rb#19
  def colorize(level, msg); end
end

# RSpecDissect tracks how much time do you spend in `before` hooks
# and memoization helpers (i.e. `let`) in your tests.
#
# source://test-prof//lib/test_prof/rspec_dissect.rb#9
module TestProf::RSpecDissect
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/rspec_dissect.rb#78
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/rspec_dissect.rb#82
    def configure; end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#86
    def init; end

    # Whether we are able to track `let` usage
    #
    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/rspec_dissect.rb#121
    def memoization_available?; end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#129
    def meta_for(key); end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#114
    def reset!; end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#125
    def time_for(key); end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#133
    def total_time_for(key); end

    # source://test-prof//lib/test_prof/rspec_dissect.rb#103
    def track(type, meta = T.unsafe(nil)); end
  end
end

# source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#12
module TestProf::RSpecDissect::Collectors; end

# source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#13
class TestProf::RSpecDissect::Collectors::Base
  # @return [Base] a new instance of Base
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#16
  def initialize(name:, top_count:); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#28
  def <<(data); end

  # Returns the value of attribute name.
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#14
  def name; end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#24
  def populate!(data); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#52
  def print_group_result(group); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#40
  def print_name; end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#44
  def print_result_header; end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#58
  def print_results; end

  # Returns the value of attribute results.
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#14
  def results; end

  # Returns the value of attribute top_count.
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#14
  def top_count; end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#32
  def total_time; end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/base.rb#36
  def total_time_message; end
end

# source://test-prof//lib/test_prof/rspec_dissect/collectors/before.rb#8
class TestProf::RSpecDissect::Collectors::Before < ::TestProf::RSpecDissect::Collectors::Base
  # @return [Before] a new instance of Before
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/before.rb#9
  def initialize(params); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/before.rb#13
  def print_name; end
end

# source://test-prof//lib/test_prof/rspec_dissect/collectors/let.rb#8
class TestProf::RSpecDissect::Collectors::Let < ::TestProf::RSpecDissect::Collectors::Base
  # @return [Let] a new instance of Let
  #
  # source://test-prof//lib/test_prof/rspec_dissect/collectors/let.rb#9
  def initialize(params); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/let.rb#13
  def populate!(data); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/let.rb#23
  def print_group_result(group); end

  # source://test-prof//lib/test_prof/rspec_dissect/collectors/let.rb#18
  def print_results; end
end

# RSpecDisect configuration
#
# source://test-prof//lib/test_prof/rspec_dissect.rb#35
class TestProf::RSpecDissect::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#45
  def initialize; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#64
  def before?; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#60
  def let?; end

  # Returns the value of attribute let_stats_enabled.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def let_stats_enabled; end

  # Sets the attribute let_stats_enabled
  #
  # @param value the value to set the attribute let_stats_enabled to.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def let_stats_enabled=(_arg0); end

  # Returns the value of attribute let_stats_enabled.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def let_stats_enabled?; end

  # Returns the value of attribute let_top_count.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def let_top_count; end

  # Sets the attribute let_top_count
  #
  # @param value the value to set the attribute let_top_count to.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def let_top_count=(_arg0); end

  # Returns the value of attribute mode.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#43
  def mode; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#68
  def stamp?; end

  # Returns the value of attribute top_count.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def top_count; end

  # Sets the attribute top_count
  #
  # @param value the value to set the attribute top_count to.
  #
  # source://test-prof//lib/test_prof/rspec_dissect.rb#38
  def top_count=(_arg0); end
end

# source://test-prof//lib/test_prof/rspec_dissect.rb#36
TestProf::RSpecDissect::Configuration::MODES = T.let(T.unsafe(nil), Array)

# source://test-prof//lib/test_prof/rspec_dissect.rb#10
module TestProf::RSpecDissect::ExampleInstrumentation
  # source://test-prof//lib/test_prof/rspec_dissect.rb#11
  def run_before_example(*_arg0); end
end

# source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#7
class TestProf::RSpecDissect::Listener
  include ::TestProf::Logging

  # @return [Listener] a new instance of Listener
  #
  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#16
  def initialize; end

  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#32
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#37
  def example_group_finished(notification); end

  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#56
  def print; end

  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#81
  def stamp!; end

  private

  # Returns the value of attribute collectors.
  #
  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#116
  def collectors; end

  # source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#118
  def top_count; end
end

# source://test-prof//lib/test_prof/rspec_dissect/rspec.rb#11
TestProf::RSpecDissect::Listener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# source://test-prof//lib/test_prof/rspec_dissect.rb#73
TestProf::RSpecDissect::METRICS = T.let(T.unsafe(nil), Array)

# source://test-prof//lib/test_prof/rspec_dissect.rb#16
module TestProf::RSpecDissect::MemoizedInstrumentation
  # source://test-prof//lib/test_prof/rspec_dissect.rb#17
  def fetch_or_store(id, *_arg1); end
end

# Mark RSpec examples with provided tags
#
# source://test-prof//lib/test_prof/rspec_stamp/parser.rb#6
module TestProf::RSpecStamp
  extend ::TestProf::Logging

  class << self
    # Accepts source code (as array of lines),
    # line numbers (of example to apply tags)
    # and an array of tags.
    #
    # source://test-prof//lib/test_prof/rspec_stamp.rb#105
    def apply_tags(code, lines, tags); end

    # source://test-prof//lib/test_prof/rspec_stamp.rb#94
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/rspec_stamp.rb#98
    def configure; end

    private

    # source://test-prof//lib/test_prof/rspec_stamp.rb#170
    def quote(str); end

    # source://test-prof//lib/test_prof/rspec_stamp.rb#119
    def stamp_example(example, tags); end
  end
end

# RSpecStamp configuration
#
# source://test-prof//lib/test_prof/rspec_stamp.rb#12
class TestProf::RSpecStamp::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#16
  def initialize; end

  # Returns the value of attribute dry_run.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#14
  def dry_run; end

  # Sets the attribute dry_run
  #
  # @param value the value to set the attribute dry_run to.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#14
  def dry_run=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#22
  def dry_run?; end

  # Returns the value of attribute ignore_files.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#14
  def ignore_files; end

  # Sets the attribute ignore_files
  #
  # @param value the value to set the attribute ignore_files to.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#14
  def ignore_files=(_arg0); end

  # Returns the value of attribute tags.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#13
  def tags; end

  # source://test-prof//lib/test_prof/rspec_stamp.rb#26
  def tags=(val); end

  private

  # source://test-prof//lib/test_prof/rspec_stamp.rb#36
  def parse_tags(str); end
end

# source://test-prof//lib/test_prof/rspec_stamp.rb#9
TestProf::RSpecStamp::EXAMPLE_RXP = T.let(T.unsafe(nil), Regexp)

# Parse examples headers
#
# source://test-prof//lib/test_prof/rspec_stamp/parser.rb#8
module TestProf::RSpecStamp::Parser
  class << self
    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#31
    def parse(code); end

    private

    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#91
    def parse_arg(res, arg); end

    # Expr of the form:
    #  [:var_ref, [:@const, "User", [1, 9]]]
    #
    #  or
    #
    #  [:const_path_ref, [:const_path_ref, [:var_ref,
    #    [:@const, "User", [1, 17]]],
    #    [:@const, "Guest", [1, 23]]],
    #    [:@const, "Collection", [1, 30]]
    #
    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#140
    def parse_const(expr); end

    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#99
    def parse_hash(res, hash_arg); end

    # Expr of the form:
    #  [:string_literal, [:string_content, [:@tstring_content, "is", [1, 4]]]]
    #
    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#124
    def parse_literal(expr); end

    # Expr of the form:
    #  bool - [:var_ref, [:@kw, "true", [1, 24]]]
    #  string - [:string_literal, [:string_content, [...]]]
    #  int - [:@int, "3", [1, 52]]]]
    #
    # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#109
    def parse_value(expr); end
  end
end

# Contains the result of parsing
#
# source://test-prof//lib/test_prof/rspec_stamp/parser.rb#10
class TestProf::RSpecStamp::Parser::Result
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#19
  def add_htag(k, v); end

  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#14
  def add_tag(v); end

  # Returns the value of attribute desc.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def desc; end

  # Sets the attribute desc
  #
  # @param value the value to set the attribute desc to.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def desc=(_arg0); end

  # Returns the value of attribute desc_const.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def desc_const; end

  # Sets the attribute desc_const
  #
  # @param value the value to set the attribute desc_const to.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def desc_const=(_arg0); end

  # Returns the value of attribute fname.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def fname; end

  # Sets the attribute fname
  #
  # @param value the value to set the attribute fname to.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#11
  def fname=(_arg0); end

  # Returns the value of attribute htags.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#12
  def htags; end

  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#24
  def remove_tag(tag); end

  # Returns the value of attribute tags.
  #
  # source://test-prof//lib/test_prof/rspec_stamp/parser.rb#12
  def tags; end
end

# source://test-prof//lib/test_prof/rspec_stamp/rspec.rb#5
class TestProf::RSpecStamp::RSpecListener
  include ::TestProf::Logging

  # @return [RSpecListener] a new instance of RSpecListener
  #
  # source://test-prof//lib/test_prof/rspec_stamp/rspec.rb#12
  def initialize; end

  # source://test-prof//lib/test_prof/rspec_stamp/rspec.rb#19
  def example_failed(notification); end

  # source://test-prof//lib/test_prof/rspec_stamp/rspec.rb#29
  def stamp!; end
end

# source://test-prof//lib/test_prof/rspec_stamp/rspec.rb#8
TestProf::RSpecStamp::RSpecListener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# Stamper collects statistics about applying tags
# to examples.
#
# source://test-prof//lib/test_prof/rspec_stamp.rb#50
class TestProf::RSpecStamp::Stamper
  include ::TestProf::Logging

  # @return [Stamper] a new instance of Stamper
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#55
  def initialize; end

  # Returns the value of attribute failed.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#53
  def failed; end

  # Returns the value of attribute ignored.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#53
  def ignored; end

  # source://test-prof//lib/test_prof/rspec_stamp.rb#61
  def stamp_file(file, lines); end

  # Returns the value of attribute total.
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#53
  def total; end

  private

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#86
  def dry_run?; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/rspec_stamp.rb#76
  def ignored?(file); end
end

# RubyProf wrapper.
#
# Has 2 modes: global and per-example.
#
# Example:
#
#   # To activate global profiling you can use env variable
#   TEST_RUBY_PROF=1 rspec ...
#
#   # or in your code
#   TestProf::RubyProf.run
#
# To profile a specific examples add :rprof tag to it:
#
#   it "is doing heavy stuff", :rprof do
#     ...
#   end
#
# source://test-prof//lib/test_prof/ruby_prof.rb#22
module TestProf::RubyProf
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/ruby_prof.rb#156
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/ruby_prof.rb#160
    def configure; end

    # source://test-prof//lib/test_prof/ruby_prof.rb#180
    def profile; end

    # Run RubyProf and automatically dump
    # a report when the process exits.
    #
    # Use this method to profile the whole run.
    #
    # source://test-prof//lib/test_prof/ruby_prof.rb#168
    def run; end

    private

    # source://test-prof//lib/test_prof/ruby_prof.rb#236
    def check_ruby_prof_version; end

    # source://test-prof//lib/test_prof/ruby_prof.rb#255
    def exclude_common_methods(profiler); end

    # source://test-prof//lib/test_prof/ruby_prof.rb#247
    def exclude_rspec_methods(profiler); end

    # source://test-prof//lib/test_prof/ruby_prof.rb#224
    def init_ruby_prof; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/ruby_prof.rb#220
    def locked?; end
  end
end

# RubyProf configuration
#
# source://test-prof//lib/test_prof/ruby_prof.rb#24
class TestProf::RubyProf::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#53
  def initialize; end

  # Returns the value of attribute custom_exclusions.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def custom_exclusions; end

  # Sets the attribute custom_exclusions
  #
  # @param value the value to set the attribute custom_exclusions to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def custom_exclusions=(_arg0); end

  # Returns the value of attribute exclude_common_methods.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def exclude_common_methods; end

  # Sets the attribute exclude_common_methods
  #
  # @param value the value to set the attribute exclude_common_methods to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def exclude_common_methods=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#68
  def exclude_common_methods?; end

  # Returns the value of attribute include_threads.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def include_threads; end

  # Sets the attribute include_threads
  #
  # @param value the value to set the attribute include_threads to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def include_threads=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#64
  def include_threads?; end

  # Returns the value of attribute min_percent.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def min_percent; end

  # Sets the attribute min_percent
  #
  # @param value the value to set the attribute min_percent to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def min_percent=(_arg0); end

  # Returns the value of attribute mode.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def mode=(_arg0); end

  # Returns the value of attribute printer.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def printer; end

  # Sets the attribute printer
  #
  # @param value the value to set the attribute printer to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def printer=(_arg0); end

  # Returns an array of printer type (ID) and class.
  #
  # @raise [ArgumentError]
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#77
  def resolve_printer; end

  # Based on deprecated https://github.com/ruby-prof/ruby-prof/blob/fd3a5236a459586c5ca7ce4de506c1835129516a/lib/ruby-prof.rb#L36
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#89
  def ruby_prof_mode; end

  # Returns the value of attribute test_prof_exclusions_enabled.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def test_prof_exclusions_enabled; end

  # Sets the attribute test_prof_exclusions_enabled
  #
  # @param value the value to set the attribute test_prof_exclusions_enabled to.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#48
  def test_prof_exclusions_enabled=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#72
  def test_prof_exclusions_enabled?; end
end

# source://test-prof//lib/test_prof/ruby_prof.rb#46
TestProf::RubyProf::Configuration::LOGFILE_PREFIX = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/ruby_prof.rb#25
TestProf::RubyProf::Configuration::PRINTERS = T.let(T.unsafe(nil), Hash)

# Mapping from printer to report file extension
# NOTE: txt is not included and considered default
#
# source://test-prof//lib/test_prof/ruby_prof.rb#39
TestProf::RubyProf::Configuration::PRINTER_EXTENSTION = T.let(T.unsafe(nil), Hash)

# Reporter for RSpec to profile specific examples with RubyProf
#
# source://test-prof//lib/test_prof/ruby_prof/rspec.rb#8
class TestProf::RubyProf::Listener
  # source://test-prof//lib/test_prof/ruby_prof/rspec.rb#26
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/ruby_prof/rspec.rb#20
  def example_started(notification); end

  private

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/ruby_prof/rspec.rb#35
  def profile?(example); end

  class << self
    # Returns the value of attribute report_name_generator.
    #
    # source://test-prof//lib/test_prof/ruby_prof/rspec.rb#10
    def report_name_generator; end

    # Sets the attribute report_name_generator
    #
    # @param value the value to set the attribute report_name_generator to.
    #
    # source://test-prof//lib/test_prof/ruby_prof/rspec.rb#10
    def report_name_generator=(_arg0); end
  end
end

# source://test-prof//lib/test_prof/ruby_prof/rspec.rb#15
TestProf::RubyProf::Listener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# Generates the list of RSpec (framework internal) methods
# to exclude from profiling
#
# source://test-prof//lib/test_prof/ruby_prof/rspec_exclusions.rb#7
module TestProf::RubyProf::RSpecExclusions
  private

  # source://test-prof//lib/test_prof/ruby_prof/rspec_exclusions.rb#10
  def generate; end

  class << self
    # source://test-prof//lib/test_prof/ruby_prof/rspec_exclusions.rb#10
    def generate; end
  end
end

# Wrapper over RubyProf profiler and printer
#
# source://test-prof//lib/test_prof/ruby_prof.rb#106
class TestProf::RubyProf::Report
  include ::TestProf::Logging

  # @return [Report] a new instance of Report
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#109
  def initialize(profiler); end

  # Stop profiling and generate the report
  # using provided name.
  #
  # source://test-prof//lib/test_prof/ruby_prof.rb#115
  def dump(name); end

  private

  # source://test-prof//lib/test_prof/ruby_prof.rb#141
  def build_path(name, printer); end

  # source://test-prof//lib/test_prof/ruby_prof.rb#148
  def config; end
end

# StackProf wrapper.
#
# Has 2 modes: global and per-example.
#
# Example:
#
#   # To activate global profiling you can use env variable
#   TEST_STACK_PROF=1 rspec ...
#
#   # or in your code
#   TestProf::StackProf.run
#
# To profile a specific examples add :sprof tag to it:
#
#   it "is doing heavy stuff", :sprof do
#     ...
#   end
#
# source://test-prof//lib/test_prof/stack_prof.rb#22
module TestProf::StackProf
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/stack_prof.rb#60
    def config; end

    # @yield [config]
    #
    # source://test-prof//lib/test_prof/stack_prof.rb#64
    def configure; end

    # source://test-prof//lib/test_prof/stack_prof.rb#110
    def dump(name); end

    # source://test-prof//lib/test_prof/stack_prof.rb#81
    def profile(name = T.unsafe(nil)); end

    # Run StackProf and automatically dump
    # a report when the process exits or when the application is booted.
    #
    # source://test-prof//lib/test_prof/stack_prof.rb#70
    def run; end

    private

    # source://test-prof//lib/test_prof/stack_prof.rb#126
    def build_path(name); end

    # source://test-prof//lib/test_prof/stack_prof.rb#149
    def check_stack_prof_version; end

    # source://test-prof//lib/test_prof/stack_prof.rb#160
    def dump_html_report(path); end

    # source://test-prof//lib/test_prof/stack_prof.rb#170
    def dump_json_report(path); end

    # source://test-prof//lib/test_prof/stack_prof.rb#136
    def init_stack_prof; end

    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/stack_prof.rb#132
    def locked?; end
  end
end

# StackProf configuration
#
# source://test-prof//lib/test_prof/stack_prof.rb#24
class TestProf::StackProf::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#28
  def initialize; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#48
  def boot?; end

  # Returns the value of attribute format.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def format; end

  # Sets the attribute format
  #
  # @param value the value to set the attribute format to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def format=(_arg0); end

  # Returns the value of attribute ignore_gc.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def ignore_gc; end

  # Sets the attribute ignore_gc
  #
  # @param value the value to set the attribute ignore_gc to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def ignore_gc=(_arg0); end

  # Returns the value of attribute interval.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def interval; end

  # Sets the attribute interval
  #
  # @param value the value to set the attribute interval to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def interval=(_arg0); end

  # Returns the value of attribute mode.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def mode=(_arg0); end

  # Returns the value of attribute raw.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def raw; end

  # Sets the attribute raw
  #
  # @param value the value to set the attribute raw to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def raw=(_arg0); end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#44
  def raw?; end

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#52
  def suite?; end

  # Returns the value of attribute target.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://test-prof//lib/test_prof/stack_prof.rb#27
  def target=(_arg0); end
end

# source://test-prof//lib/test_prof/stack_prof.rb#25
TestProf::StackProf::Configuration::FORMATS = T.let(T.unsafe(nil), Array)

# Reporter for RSpec to profile specific examples with StackProf
#
# source://test-prof//lib/test_prof/stack_prof/rspec.rb#8
class TestProf::StackProf::Listener
  # source://test-prof//lib/test_prof/stack_prof/rspec.rb#25
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/stack_prof/rspec.rb#20
  def example_started(notification); end

  private

  # @return [Boolean]
  #
  # source://test-prof//lib/test_prof/stack_prof/rspec.rb#36
  def profile?(example); end

  class << self
    # Returns the value of attribute report_name_generator.
    #
    # source://test-prof//lib/test_prof/stack_prof/rspec.rb#10
    def report_name_generator; end

    # Sets the attribute report_name_generator
    #
    # @param value the value to set the attribute report_name_generator to.
    #
    # source://test-prof//lib/test_prof/stack_prof/rspec.rb#10
    def report_name_generator=(_arg0); end
  end
end

# source://test-prof//lib/test_prof/stack_prof/rspec.rb#15
TestProf::StackProf::Listener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# Extend String with #truncate method
#
# source://test-prof//lib/test_prof/ext/string_truncate.rb#5
module TestProf::StringTruncate; end

# source://test-prof//lib/test_prof/tag_prof/result.rb#4
module TestProf::TagProf; end

# source://test-prof//lib/test_prof/tag_prof/printers/simple.rb#6
module TestProf::TagProf::Printers; end

# source://test-prof//lib/test_prof/tag_prof/printers/html.rb#5
module TestProf::TagProf::Printers::HTML
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/tag_prof/printers/html.rb#12
    def dump(result); end
  end
end

# source://test-prof//lib/test_prof/tag_prof/printers/html.rb#7
TestProf::TagProf::Printers::HTML::OUTPUT_NAME = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/tag_prof/printers/html.rb#6
TestProf::TagProf::Printers::HTML::TEMPLATE = T.let(T.unsafe(nil), String)

# source://test-prof//lib/test_prof/tag_prof/printers/simple.rb#7
module TestProf::TagProf::Printers::Simple
  extend ::TestProf::Logging

  class << self
    # source://test-prof//lib/test_prof/tag_prof/printers/simple.rb#12
    def dump(result); end
  end
end

# source://test-prof//lib/test_prof/tag_prof/rspec.rb#5
class TestProf::TagProf::RSpecListener
  include ::TestProf::Logging

  # @return [RSpecListener] a new instance of RSpecListener
  #
  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#15
  def initialize; end

  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#38
  def example_finished(notification); end

  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#32
  def example_started(_notification); end

  # Returns the value of attribute printer.
  #
  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#13
  def printer; end

  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#47
  def report; end

  # Returns the value of attribute result.
  #
  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#13
  def result; end

  private

  # source://test-prof//lib/test_prof/tag_prof/rspec.rb#53
  def fetch_events_data; end
end

# source://test-prof//lib/test_prof/tag_prof/rspec.rb#8
TestProf::TagProf::RSpecListener::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# Object holding all the stats for tags
#
# source://test-prof//lib/test_prof/tag_prof/result.rb#6
class TestProf::TagProf::Result
  # @return [Result] a new instance of Result
  #
  # source://test-prof//lib/test_prof/tag_prof/result.rb#9
  def initialize(tag, events = T.unsafe(nil)); end

  # Returns the value of attribute data.
  #
  # source://test-prof//lib/test_prof/tag_prof/result.rb#7
  def data; end

  # Returns the value of attribute events.
  #
  # source://test-prof//lib/test_prof/tag_prof/result.rb#7
  def events; end

  # Returns the value of attribute tag.
  #
  # source://test-prof//lib/test_prof/tag_prof/result.rb#7
  def tag; end

  # source://test-prof//lib/test_prof/tag_prof/result.rb#29
  def to_json(*args); end

  # source://test-prof//lib/test_prof/tag_prof/result.rb#21
  def track(tag, time:, events: T.unsafe(nil)); end
end

# source://test-prof//lib/test_prof/utils.rb#4
module TestProf::Utils
  class << self
    # @return [Boolean]
    #
    # source://test-prof//lib/test_prof/utils.rb#18
    def supported_version?(gem_version, at_least, at_most); end

    # Verify that loaded gem has correct version
    #
    # @raise [ArgumentError]
    #
    # source://test-prof//lib/test_prof/utils.rb#7
    def verify_gem_version(gem_name, at_least: T.unsafe(nil), at_most: T.unsafe(nil)); end
  end
end

# Generates static HTML reports with injected data
#
# source://test-prof//lib/test_prof/utils/html_builder.rb#8
module TestProf::Utils::HTMLBuilder
  class << self
    # source://test-prof//lib/test_prof/utils/html_builder.rb#10
    def generate(data:, template:, output:); end
  end
end

# source://test-prof//lib/test_prof/utils/rspec.rb#10
module TestProf::Utils::RSpec
  class << self
    # source://test-prof//lib/test_prof/utils/rspec.rb#12
    def example_to_filename(example); end
  end
end

# Ordered set with capacity
#
# source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#6
class TestProf::Utils::SizedOrderedSet
  include ::Enumerable

  # @return [SizedOrderedSet] a new instance of SizedOrderedSet
  #
  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#14
  def initialize(max_size, sort_by: T.unsafe(nil), &block); end

  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#27
  def <<(item); end

  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#44
  def each(&block); end

  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#52
  def size; end

  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#56
  def to_a; end

  private

  # Returns the value of attribute comparator.
  #
  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#62
  def comparator; end

  # Returns the value of attribute data.
  #
  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#62
  def data; end

  # Returns the value of attribute max_size.
  #
  # source://test-prof//lib/test_prof/utils/sized_ordered_set.rb#62
  def max_size; end
end

# source://test-prof//lib/test_prof/version.rb#4
TestProf::VERSION = T.let(T.unsafe(nil), String)
