# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `in_threads` gem.
# Please instead update this file by running `bin/tapioca gem in_threads`.

# Run Enumerable methods with blocks in threads
#
# source://in_threads//lib/in_threads.rb#33
class InThreads < ::SimpleDelegator
  # @return [InThreads] a new instance of InThreads
  #
  # source://in_threads//lib/in_threads.rb#46
  def initialize(enumerable, thread_count = T.unsafe(nil)); end

  # source://in_threads//lib/in_threads.rb#78
  def all?(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def any?(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def collect(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def collect_concat(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def count(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def cycle(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def detect(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def drop_while(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each_cons(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each_entry(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each_slice(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each_with_index(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def each_with_object(*args, &block); end

  # Returns the value of attribute enumerable.
  #
  # source://in_threads//lib/in_threads.rb#36
  def enumerable; end

  # source://in_threads//lib/in_threads.rb#78
  def filter(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def filter_map(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def find(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def find_all(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def find_index(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def flat_map(*args, &block); end

  # Special case method, works by applying `run_in_threads_use_block_result` with
  # map on enumerable returned by blockless run
  #
  # source://in_threads//lib/in_threads.rb#146
  def grep(*args, &block); end

  # Special case method, works by applying `run_in_threads_use_block_result` with
  # map on enumerable returned by blockless run
  #
  # source://in_threads//lib/in_threads.rb#157
  def grep_v(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def group_by(*args, &block); end

  # Creates new instance using underlying enumerable and new thread_count
  #
  # source://in_threads//lib/in_threads.rb#57
  def in_threads(thread_count = T.unsafe(nil), &block); end

  # source://in_threads//lib/in_threads.rb#78
  def map(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def max_by(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def min_by(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def minmax_by(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def none?(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def one?(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def partition(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def reject(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def reverse_each(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def select(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def sort_by(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def sum(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def take_while(*args, &block); end

  # Returns the value of attribute thread_count.
  #
  # source://in_threads//lib/in_threads.rb#36
  def thread_count; end

  # source://in_threads//lib/in_threads.rb#78
  def to_h(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def to_set(*args, &block); end

  # source://in_threads//lib/in_threads.rb#78
  def uniq(*args, &block); end

  # befriend with progress gem
  #
  # source://in_threads//lib/in_threads.rb#167
  def with_progress(title = T.unsafe(nil), length = T.unsafe(nil), &block); end

  # source://in_threads//lib/in_threads.rb#78
  def zip(*args, &block); end

  protected

  # source://delegate/0.3.0/delegate.rb#318
  def __getobj__; end

  # source://delegate/0.3.0/delegate.rb#340
  def __setobj__(obj); end

  # Use for methods which don't use block result
  #
  # source://in_threads//lib/in_threads.rb#243
  def run_in_threads_ignore_block_result(method, *args, &block); end

  # Use for methods which do use block result
  #
  # source://in_threads//lib/in_threads.rb#270
  def run_in_threads_use_block_result(method, *args, &block); end

  private

  # source://in_threads//lib/in_threads.rb#305
  def filler_thread(pool, enums); end

  # source://in_threads//lib/in_threads.rb#319
  def runner_thread(pool, enum, results, &block); end

  class << self
    # source://in_threads//lib/in_threads.rb#38
    def new(enumerable, thread_count = T.unsafe(nil), &block); end

    # Specify runner to use
    #
    #   use :run_in_threads_use_block_result, :for => %w[all? any? none? one?]
    #
    # `:for` is required
    # `:ignore_undefined` ignores methods which are not present in
    # `Enumerable.instance_methods`
    #
    # source://in_threads//lib/in_threads.rb#69
    def use(runner, options); end

    private

    # @return [Boolean]
    #
    # source://in_threads//lib/in_threads.rb#91
    def enumerable_method?(name); end
  end
end

# source://in_threads//lib/in_threads.rb#125
InThreads::BLOCKLESS_METHODS = T.let(T.unsafe(nil), Array)

# source://in_threads//lib/in_threads.rb#116
InThreads::DEPENDENT_BLOCK_CALLS = T.let(T.unsafe(nil), Array)

# source://in_threads//lib/in_threads.rb#121
InThreads::ENUMERATOR_RETURNED = T.let(T.unsafe(nil), Array)

# source://in_threads//lib/in_threads.rb#142
InThreads::INCOMPATIBLE_METHODS = T.let(T.unsafe(nil), Array)

# Thread pool
#
# source://in_threads//lib/in_threads.rb#200
class InThreads::Pool
  # @return [Pool] a new instance of Pool
  #
  # source://in_threads//lib/in_threads.rb#203
  def initialize(thread_count); end

  # source://in_threads//lib/in_threads.rb#234
  def catch; end

  # Returns the value of attribute exception.
  #
  # source://in_threads//lib/in_threads.rb#201
  def exception; end

  # source://in_threads//lib/in_threads.rb#228
  def finalize; end

  # source://in_threads//lib/in_threads.rb#216
  def run(&block); end

  # source://in_threads//lib/in_threads.rb#224
  def stop!; end

  # @return [Boolean]
  #
  # source://in_threads//lib/in_threads.rb#220
  def stop?; end
end

# Enum out of queue
#
# source://in_threads//lib/in_threads.rb#174
class InThreads::QueueEnum
  include ::Enumerable

  # @return [QueueEnum] a new instance of QueueEnum
  #
  # source://in_threads//lib/in_threads.rb#177
  def initialize(size = T.unsafe(nil)); end

  # source://in_threads//lib/in_threads.rb#192
  def close(clear = T.unsafe(nil)); end

  # source://in_threads//lib/in_threads.rb#181
  def each(&block); end

  # source://in_threads//lib/in_threads.rb#188
  def push(*args); end
end
