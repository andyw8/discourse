# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_sql` gem.
# Please instead update this file by running `bin/tapioca gem mini_sql`.

# source://mini_sql//lib/mini_sql/version.rb#2
module MiniSql; end

# source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#4
module MiniSql::Abstract; end

# source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#5
class MiniSql::Abstract::PreparedBinds
  # source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#60
  def array_wrap(object); end

  # source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#10
  def bind(sql, *params); end

  # source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#42
  def bind_array(sql, array); end

  # source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#18
  def bind_hash(sql, hash); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#68
  def bind_output(_); end
end

# For compatibility with Active Record
#
# source://mini_sql//lib/mini_sql/abstract/prepared_binds.rb#8
class MiniSql::Abstract::PreparedBinds::BindName < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#5
class MiniSql::Abstract::PreparedCache
  # @return [PreparedCache] a new instance of PreparedCache
  #
  # source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#9
  def initialize(connection, max_size = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#16
  def prepare_statement(sql); end

  private

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#35
  def alloc(_); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#39
  def dealloc(_); end

  # source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#31
  def next_key; end
end

# source://mini_sql//lib/mini_sql/abstract/prepared_cache.rb#7
MiniSql::Abstract::PreparedCache::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://mini_sql//lib/mini_sql.rb#34
module MiniSql::ActiveRecordPostgres; end

# source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#5
class MiniSql::ActiveRecordPostgres::Connection < ::MiniSql::Postgres::Connection
  # Initialize a new MiniSql::Postgres::Connection object
  #
  # @param active_record_adapter [ActiveRecord::ConnectionAdapters::PostgresqlAdapter]
  # @param deserializer_cache [MiniSql::DeserializerCache] a cache of field names to deserializer, can be nil
  # @param type_map [PG::TypeMap] a type mapper for all results returned, can be nil
  # @return [Connection] a new instance of Connection
  #
  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#13
  def initialize(active_record_adapter, args = T.unsafe(nil)); end

  # Returns the value of attribute active_record_connection.
  #
  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#6
  def active_record_connection; end

  # These two methods do not use `run`, so we need to apply
  # the lock separately:
  #
  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#24
  def query_each(sql, *params); end

  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#27
  def query_each_hash(sql, *params); end

  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#18
  def raw_connection; end

  private

  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#37
  def run(sql, params); end

  # source://mini_sql//lib/mini_sql/active_record_postgres/connection.rb#33
  def with_lock; end
end

# source://mini_sql//lib/mini_sql/builder.rb#3
class MiniSql::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://mini_sql//lib/mini_sql/builder.rb#5
  def initialize(connection, template); end

  # source://mini_sql//lib/mini_sql/builder.rb#83
  def count(field = T.unsafe(nil)); end

  def exec(hash_args = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def group_by(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def join(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def left_join(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#42
  def limit(value); end

  # source://mini_sql//lib/mini_sql/builder.rb#42
  def offset(value); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def order_by(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#73
  def prepared(condition = T.unsafe(nil)); end

  def query(hash_args = T.unsafe(nil)); end
  def query_array(hash_args = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/builder.rb#69
  def query_decorator(decorator, hash_args = T.unsafe(nil)); end

  def query_hash(hash_args = T.unsafe(nil)); end
  def query_single(hash_args = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def select(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def set(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#51
  def sql_literal(literals); end

  # source://mini_sql//lib/mini_sql/builder.rb#79
  def to_sql(hash_args = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def where(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def where2(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def where2_or(sql_part, *args); end

  # source://mini_sql//lib/mini_sql/builder.rb#21
  def where_or(sql_part, *args); end

  private

  # source://mini_sql//lib/mini_sql/builder.rb#87
  def connection_switcher; end

  # source://mini_sql//lib/mini_sql/builder.rb#14
  def initialize_copy(_original_builder); end

  # source://mini_sql//lib/mini_sql/builder.rb#96
  def parametrized_sql; end

  # source://mini_sql//lib/mini_sql/builder.rb#139
  def union_parameters(hash_args); end
end

# source://mini_sql//lib/mini_sql/builder.rb#49
MiniSql::Builder::PREDEFINED_SQL_LITERALS = T.let(T.unsafe(nil), Set)

# source://mini_sql//lib/mini_sql/builder.rb#95
MiniSql::Builder::WHERE_SECTIONS = T.let(T.unsafe(nil), Array)

# source://mini_sql//lib/mini_sql/connection.rb#4
class MiniSql::Connection
  # source://mini_sql//lib/mini_sql/connection.rb#56
  def build(sql); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#68
  def escape_string(str); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#52
  def exec(sql, *params); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#32
  def query(sql, *params); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#40
  def query_decorator(sql, *params); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#44
  def query_each(sql, *params); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#48
  def query_each_hash(sql, *params); end

  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/connection.rb#36
  def query_hash(sql, *params); end

  # Returns a flat array containing all results.
  # Note, if selecting multiple columns array will be flattened
  #
  # @param sql [String] the query to run
  # @param params [Array or Hash] , params to apply to query
  # @raise [NotImplementedError]
  # @return [Object] a flat array containing all results
  #
  # source://mini_sql//lib/mini_sql/connection.rb#28
  def query_single(sql, *params); end

  # source://mini_sql//lib/mini_sql/connection.rb#60
  def to_sql(sql, *params); end

  class << self
    # source://mini_sql//lib/mini_sql/connection.rb#6
    def get(raw_connection, options = T.unsafe(nil)); end
  end
end

# source://mini_sql//lib/mini_sql/decoratable.rb#4
module MiniSql::Decoratable
  # source://mini_sql//lib/mini_sql/decoratable.rb#5
  def decorated(mod); end

  # source://mini_sql//lib/mini_sql/decoratable.rb#18
  def decorator; end
end

# source://mini_sql//lib/mini_sql/deserializer_cache.rb#4
class MiniSql::DeserializerCache
  # method takes a raw result and converts to proper objects
  #
  # @raise [NotImplementedError]
  #
  # source://mini_sql//lib/mini_sql/deserializer_cache.rb#6
  def materialize(result); end
end

# source://mini_sql//lib/mini_sql/inline_param_encoder.rb#4
class MiniSql::InlineParamEncoder
  # @return [InlineParamEncoder] a new instance of InlineParamEncoder
  #
  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#7
  def initialize(conn); end

  # Returns the value of attribute conn.
  #
  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#5
  def conn; end

  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#11
  def encode(sql, *params); end

  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#41
  def encode_array(sql, array); end

  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#20
  def encode_hash(sql, hash); end

  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#53
  def quote_val(value); end

  # source://mini_sql//lib/mini_sql/inline_param_encoder.rb#49
  def quoted_time(value); end
end

# source://mini_sql//lib/mini_sql.rb#46
module MiniSql::Mysql; end

# source://mini_sql//lib/mini_sql/mysql/connection.rb#5
class MiniSql::Mysql::Connection < ::MiniSql::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://mini_sql//lib/mini_sql/mysql/connection.rb#8
  def initialize(raw_connection, args = T.unsafe(nil)); end

  # Returns the value of attribute deserializer_cache.
  #
  # source://mini_sql//lib/mini_sql/mysql/connection.rb#6
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#50
  def escape_string(str); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#35
  def exec(sql, *params); end

  # Returns the value of attribute param_encoder.
  #
  # source://mini_sql//lib/mini_sql/mysql/connection.rb#6
  def param_encoder; end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#14
  def prepared(condition = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#40
  def query(sql, *params); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#31
  def query_array(sql, *params); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#45
  def query_decorator(decorator, sql, *params); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#26
  def query_hash(sql, *params); end

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#22
  def query_single(sql, *params); end

  # Returns the value of attribute raw_connection.
  #
  # source://mini_sql//lib/mini_sql/mysql/connection.rb#6
  def raw_connection; end

  private

  # source://mini_sql//lib/mini_sql/mysql/connection.rb#56
  def run(sql, as, params); end
end

# source://mini_sql//lib/mini_sql/mysql/deserializer_cache.rb#5
class MiniSql::Mysql::DeserializerCache
  # @return [DeserializerCache] a new instance of DeserializerCache
  #
  # source://mini_sql//lib/mini_sql/mysql/deserializer_cache.rb#9
  def initialize(max_size = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/mysql/deserializer_cache.rb#14
  def materialize(result, decorator_module = T.unsafe(nil)); end

  private

  # source://mini_sql//lib/mini_sql/mysql/deserializer_cache.rb#37
  def new_row_materializer(result); end
end

# source://mini_sql//lib/mini_sql/mysql/deserializer_cache.rb#7
MiniSql::Mysql::DeserializerCache::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://mini_sql//lib/mini_sql/mysql/prepared_binds.rb#7
class MiniSql::Mysql::PreparedBinds < ::MiniSql::Abstract::PreparedBinds
  # source://mini_sql//lib/mini_sql/mysql/prepared_binds.rb#9
  def bind_output(i); end
end

# source://mini_sql//lib/mini_sql/mysql/prepared_cache.rb#7
class MiniSql::Mysql::PreparedCache < ::MiniSql::Abstract::PreparedCache
  private

  # source://mini_sql//lib/mini_sql/mysql/prepared_cache.rb#11
  def alloc(sql); end

  # source://mini_sql//lib/mini_sql/mysql/prepared_cache.rb#15
  def dealloc(statement); end
end

# source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#5
class MiniSql::Mysql::PreparedConnection < ::MiniSql::Mysql::Connection
  # @return [PreparedConnection] a new instance of PreparedConnection
  #
  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#9
  def initialize(unprepared_connection); end

  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#18
  def build(_); end

  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#26
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#22
  def prepared(condition = T.unsafe(nil)); end

  # Returns the value of attribute unprepared.
  #
  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#7
  def unprepared; end

  private

  # source://mini_sql//lib/mini_sql/mysql/prepared_connection.rb#30
  def run(sql, as, params); end
end

# source://mini_sql//lib/mini_sql.rb#25
module MiniSql::Postgres; end

# source://mini_sql//lib/mini_sql/postgres/coders.rb#5
module MiniSql::Postgres::Coders; end

# source://mini_sql//lib/mini_sql/postgres/coders.rb#12
class MiniSql::Postgres::Coders::IPAddrCoder < ::PG::SimpleDecoder
  # source://mini_sql//lib/mini_sql/postgres/coders.rb#13
  def decode(string, tuple = T.unsafe(nil), field = T.unsafe(nil)); end
end

# source://mini_sql//lib/mini_sql/postgres/coders.rb#6
class MiniSql::Postgres::Coders::NumericCoder < ::PG::SimpleDecoder
  # source://mini_sql//lib/mini_sql/postgres/coders.rb#7
  def decode(string, tuple = T.unsafe(nil), field = T.unsafe(nil)); end
end

# source://mini_sql//lib/mini_sql/postgres/coders.rb#18
class MiniSql::Postgres::Coders::TimestampUtc < ::PG::SimpleDecoder
  # source://mini_sql//lib/mini_sql/postgres/coders.rb#22
  def decode(string, tuple = T.unsafe(nil), field = T.unsafe(nil)); end
end

# exact same implementation as Rails here
#
# source://mini_sql//lib/mini_sql/postgres/coders.rb#20
MiniSql::Postgres::Coders::TimestampUtc::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

# source://mini_sql//lib/mini_sql/postgres/connection.rb#5
class MiniSql::Postgres::Connection < ::MiniSql::Connection
  # Initialize a new MiniSql::Postgres::Connection object
  #
  # @param raw_connection [PG::Connection] an active connection to PG
  # @param deserializer_cache [MiniSql::DeserializerCache] a cache of field names to deserializer, can be nil
  # @param type_map [PG::TypeMap] a type mapper for all results returned, can be nil
  # @return [Connection] a new instance of Connection
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#38
  def initialize(raw_connection, args = T.unsafe(nil)); end

  # Returns the value of attribute deserializer_cache.
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#6
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#195
  def escape_string(str); end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#180
  def exec(sql, *params); end

  # Returns the value of attribute param_encoder.
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#6
  def param_encoder; end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#49
  def prepared(condition = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#98
  def query(sql, *params); end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#90
  def query_array(sql, *params); end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#172
  def query_decorator(decorator, sql, *params); end

  # @raise [StandardError]
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#106
  def query_each(sql, *params); end

  # @raise [StandardError]
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#139
  def query_each_hash(sql, *params); end

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#187
  def query_hash(sql, *params); end

  # Returns a flat array containing all results.
  # Note, if selecting multiple columns array will be flattened
  #
  # @param sql [String] the query to run
  # @param params [Array or Hash] , params to apply to query
  # @return [Object] a flat array containing all results
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#63
  def query_single(sql, *params); end

  # Returns the value of attribute raw_connection.
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#6
  def raw_connection; end

  # Returns the value of attribute type_map.
  #
  # source://mini_sql//lib/mini_sql/postgres/connection.rb#45
  def type_map; end

  private

  # source://mini_sql//lib/mini_sql/postgres/connection.rb#201
  def run(sql, params); end

  class << self
    # source://mini_sql//lib/mini_sql/postgres/connection.rb#8
    def default_deserializer_cache; end

    # source://mini_sql//lib/mini_sql/postgres/connection.rb#12
    def type_map(conn); end
  end
end

# source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#5
class MiniSql::Postgres::DeserializerCache
  # @return [DeserializerCache] a new instance of DeserializerCache
  #
  # source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#9
  def initialize(max_size = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#28
  def materialize(result, decorator_module = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#14
  def materializer(result); end

  private

  # source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#58
  def new_row_materializer(result); end
end

# source://mini_sql//lib/mini_sql/postgres/deserializer_cache.rb#7
MiniSql::Postgres::DeserializerCache::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://mini_sql//lib/mini_sql/postgres/prepared_binds.rb#7
class MiniSql::Postgres::PreparedBinds < ::MiniSql::Abstract::PreparedBinds
  # source://mini_sql//lib/mini_sql/postgres/prepared_binds.rb#9
  def bind_hash(sql, hash); end

  # source://mini_sql//lib/mini_sql/postgres/prepared_binds.rb#36
  def bind_output(i); end
end

# source://mini_sql//lib/mini_sql/postgres/prepared_cache.rb#7
class MiniSql::Postgres::PreparedCache < ::MiniSql::Abstract::PreparedCache
  private

  # source://mini_sql//lib/mini_sql/postgres/prepared_cache.rb#11
  def alloc(sql); end

  # source://mini_sql//lib/mini_sql/postgres/prepared_cache.rb#18
  def dealloc(key); end
end

# source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#5
class MiniSql::Postgres::PreparedConnection < ::MiniSql::Postgres::Connection
  # @return [PreparedConnection] a new instance of PreparedConnection
  #
  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#9
  def initialize(unprepared_connection); end

  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#19
  def build(_); end

  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#27
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#23
  def prepared(condition = T.unsafe(nil)); end

  # Returns the value of attribute unprepared.
  #
  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#7
  def unprepared; end

  private

  # source://mini_sql//lib/mini_sql/postgres/prepared_connection.rb#31
  def run(sql, params); end
end

# source://mini_sql//lib/mini_sql/result.rb#4
module MiniSql::Result
  # source://mini_sql//lib/mini_sql/result.rb#20
  def ==(other_result); end

  # @return [Boolean]
  #
  # source://mini_sql//lib/mini_sql/result.rb#26
  def eql?(other_result); end

  # AM serializer support
  def read_attribute_for_serialization(*_arg0); end

  # source://mini_sql//lib/mini_sql/result.rb#8
  def to_h; end

  # source://mini_sql//lib/mini_sql/result.rb#16
  def values; end
end

# source://mini_sql//lib/mini_sql/serializer.rb#4
class MiniSql::Serializer < ::Array
  # @return [Serializer] a new instance of Serializer
  #
  # source://mini_sql//lib/mini_sql/serializer.rb#7
  def initialize(result); end

  # source://mini_sql//lib/mini_sql/serializer.rb#15
  def marshal_dump; end

  # source://mini_sql//lib/mini_sql/serializer.rb#19
  def marshal_load(wrapper); end

  private

  # source://mini_sql//lib/mini_sql/serializer.rb#25
  def serialize; end

  class << self
    # source://mini_sql//lib/mini_sql/serializer.rb#48
    def cached_materializer(fields, decorator_module = T.unsafe(nil)); end

    # source://mini_sql//lib/mini_sql/serializer.rb#11
    def marshallable(result); end

    # source://mini_sql//lib/mini_sql/serializer.rb#37
    def materialize(wrapper); end

    # source://mini_sql//lib/mini_sql/serializer.rb#67
    def materializer(fields); end
  end
end

# source://mini_sql//lib/mini_sql/serializer.rb#5
MiniSql::Serializer::MAX_CACHE_SIZE = T.let(T.unsafe(nil), Integer)

# source://mini_sql//lib/mini_sql.rb#38
module MiniSql::Sqlite; end

# source://mini_sql//lib/mini_sql/sqlite/connection.rb#5
class MiniSql::Sqlite::Connection < ::MiniSql::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#8
  def initialize(raw_connection, args = T.unsafe(nil)); end

  # Returns the value of attribute deserializer_cache.
  #
  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#6
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#67
  def escape_string(str); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#41
  def exec(sql, *params); end

  # Returns the value of attribute param_encoder.
  #
  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#6
  def param_encoder; end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#14
  def prepared(condition = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#55
  def query(sql, *params); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#37
  def query_array(sql, *params); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#61
  def query_decorator(decorator, sql, *params); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#27
  def query_hash(sql, *params); end

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#22
  def query_single(sql, *params); end

  # Returns the value of attribute raw_connection.
  #
  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#6
  def raw_connection; end

  private

  # source://mini_sql//lib/mini_sql/sqlite/connection.rb#73
  def run(sql, params); end
end

# source://mini_sql//lib/mini_sql/sqlite/deserializer_cache.rb#5
class MiniSql::Sqlite::DeserializerCache
  # @return [DeserializerCache] a new instance of DeserializerCache
  #
  # source://mini_sql//lib/mini_sql/sqlite/deserializer_cache.rb#9
  def initialize(max_size = T.unsafe(nil)); end

  # source://mini_sql//lib/mini_sql/sqlite/deserializer_cache.rb#14
  def materialize(result, decorator_module = T.unsafe(nil)); end

  private

  # source://mini_sql//lib/mini_sql/sqlite/deserializer_cache.rb#44
  def new_row_materializer(result); end
end

# source://mini_sql//lib/mini_sql/sqlite/deserializer_cache.rb#7
MiniSql::Sqlite::DeserializerCache::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://mini_sql//lib/mini_sql/sqlite/prepared_binds.rb#7
class MiniSql::Sqlite::PreparedBinds < ::MiniSql::Abstract::PreparedBinds
  # source://mini_sql//lib/mini_sql/sqlite/prepared_binds.rb#9
  def bind_output(i); end
end

# source://mini_sql//lib/mini_sql/sqlite/prepared_cache.rb#7
class MiniSql::Sqlite::PreparedCache < ::MiniSql::Abstract::PreparedCache
  private

  # source://mini_sql//lib/mini_sql/sqlite/prepared_cache.rb#11
  def alloc(sql); end

  # source://mini_sql//lib/mini_sql/sqlite/prepared_cache.rb#15
  def dealloc(statement); end
end

# source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#5
class MiniSql::Sqlite::PreparedConnection < ::MiniSql::Sqlite::Connection
  # @return [PreparedConnection] a new instance of PreparedConnection
  #
  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#9
  def initialize(unprepared_connection); end

  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#18
  def build(_); end

  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#26
  def deserializer_cache; end

  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#22
  def prepared(condition = T.unsafe(nil)); end

  # Returns the value of attribute unprepared.
  #
  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#7
  def unprepared; end

  private

  # source://mini_sql//lib/mini_sql/sqlite/prepared_connection.rb#30
  def run(sql, params); end
end

# source://mini_sql//lib/mini_sql/version.rb#3
MiniSql::VERSION = T.let(T.unsafe(nil), String)

class PG::SimpleCoder < ::PG::Coder; end
class PG::SimpleDecoder < ::PG::SimpleCoder; end
